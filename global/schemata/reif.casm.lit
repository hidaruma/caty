<<ignore  -*- coding: utf-8 -*- >>

= レイフィケーション

<<{
/** レイフィケーションされたメタオブジェクトを表現する型
 *
 */
module reif related [kreif, treif]; 

}>>

== 全般的な注意

# 疑似タグについては、大幅に変更する予定なので、今はほっておく。塩漬け。
# 開発途中段階でもエラーが出にくいように、オプショナル（'?'）な定義が多いが、後で必須とするものもある。
  （その逆もあるだろう。）
# QualifierMixin というミクシンを使っているため、多くのオブジェクト型が open-constraintsになっている。
  いずれ制約を閉じることにして、開発中はopenとする。
  よって今は、typoの検出ができない。
  （QualifierMixin を使ってないところもある。）
# const宣言された定数は、型とコマンドとして定義されるので、定数定義は独立したメタオブジェクトとは考えないことにした。
  実際、constだけ特別扱いすると一様に扱えないために場合分けが必要になる弊害が出ている。
  できるだけ概念は減らし、一様に扱うべき（特別扱いはなし）。
# メタオブジェクト名前グラフ（MOGra）のルート（基点）はプロジェクトとした。runtimeメタオブジェクトは、
  プロジェクトのプロパティとして生（foreign）で取れるようになっているが、これは変更されるだろう。
# 名前空間であるプロパティには @[namespace] を付けた。
# 他の名前空間の一部となるプロパティには @[subnamespace] を付けた。
# NamespaceInfoをどこに置くかは未定。
# 型とコマンドの両方に共通のレイフィケーションルールを使うことを考慮して
  シングルトン型は「値の表現」と解釈する。
# 構文上は、object, arrayが予約語だが、レイフィケーションされたBuiltinType には入ってない。
  objectとarrayはpredefinedな名前と考え、
  レイフィケーション時は常に展開される。（展開形式は下。スキーマにも入っている。）
# シャローレイフィケーションの当座の実装を容易にするため、
  テキスト表現も許すTypeSpecという型を入れた。TypeSpecは暫定的な処理。
# //型がmogra-nodeになってない。//
# 変数（名前）のphylum概念は必要そうだ。

{{{
// object の展開形式

@object-of {
 "specified" : {},
 "additional" : @builtin {"typeName": "univ"}
}

// array の展開形式

@array-of {
 "specified" : [],
 "additional" : @builtin {"typeName": "univ"}
}
}}}

== 変更予定

=== 位置情報

# **位置情報のプロパティ名は "location" **
# **app, pkg, mod, cls の4つのプロパティを持つJSONオブジェクト**、
  必要なプロパティだけに値（文字列）が入る。
# projectメタオブジェクト、
  applicationメタオブジェクトを除くすべてのメタオブジェクト（レイフィケーション）に、
 この情報を持たせる。

=== optsとargsは必須に

=== profiles --> profile

同名コマンドに異なるプロファイルを割り当てたいなら、オーバーロードを使う。

=== docコメントがないときはundefined

=== 例外とシグナルの値にタグを追加

@only か @likely を付ける。
 

== 実装優先度

State, Resource, Actionを優先。これらは、プロトタイプサイト（モックアップ）作成に使う。

型のレイフィケーションには型名／テキスト形式（文字列）を併用する。
名前を持つ型で、スキーマ属性と型パラメータを持たない型は
その名前のみで識別できる。
現状では、型名しか受け付けないコマンドを使う状況が多いので、
型名／テキスト形式としてのレイフィケーションを優先する。
最後の方の get-name コマンドを参照。

レイフィケーション・コマンドに、--type-name オプションを付けると、可能な限りtypeNameを使うようにする。
型名（テキスト文字列）の使用は、今後も排除できないと思う。

スクリプトコードのレイフィケーションの整備は先延ばし。

== ネーミングルール

# 型名は大文字始まりのキャメルケース、ただしスカラー型のときは小文字始まり。
# プロパティ名は小文字始まりのキャメルケース
# タグ名は小文字のみ、ハイフン区切り
# タグ名が予約語とかぶるときは、末尾に -of を付ける。
  実際に使うのは、**object-of**と**array-o**fだけ。

== スクリプトレイフィケーションとの共有

次のレイフィケーション要素は、スクリプトのレイフィケーションでも使う。

# @xxx-val というタグが付いているシングルトン型 → リテラル
# @object-of, @array-of, @tagged → 複合コマンドの構成
# @builtin も利用する可能性あり。
# @type-refと@command-refを共用できないか？ → 共有しないほうがいいような。
# AppliedType と type applied command を共通にできないか？ → 共有しないほうがいいような。

== 共通の定義

<<{
/** ドキュメンテーションコメント */
type Doc = {
  /** 短い簡潔な記述 */
  "description": string?,
  /** より詳しい説明（Wikiテキストと解釈する） */
  "moreDescription" : string(remark="Wikiテキスト")?,
};

/** 共通の修飾情報 - 名前?, Doc, アノテーション
 *
 * # 名前
 * # Docコメント
 * # アノテーション
 */
type QualifierMixin = {

  /** 名前
   * nameもこのミクシンに含まれる、ただし省略可能
   * ミクシンを使用するときにnameを必須にすることもできる。
   */
  "name": string?,

  // docコメントとアノテーションは、ほとんどどこにでも付けることができる

  /** ドキュメンテーションコメント */
  "document": Doc?, // いずれ必須にすべき
  /** アノテーション */
  "annotations": object?, // いずれ必須にすべき

   *: any?
};


/* メタオブジェクトグラフ内での位置を表現するデータ */
type Location = {
    "app": string?,
    "pkg": string?,
    "mod": string?,
    "cls": string?,
};

/** コロンドットパスによるロケーションを含む修飾情報
 */
type LocatedQualifierMixin = QualifierMixin & {
  /** このメタオブジェクトが所属する親コンテナの位置情報
   */
  "location": Location?, // いずれ必須にする */

  * : any?
};

}>>


== カインドの定義

KindExprの定義は済んでいる。kreif.casm.lit。
いずれはカインドも統合する。

<<{
/** カインド表現 */
type KindExpr = kreif:KindExpr;

}>>

== メタオブジェクト名前構造

**名前空間**は、名前（文字列）と実体（値）のペアの集合である。
名前空間はJSONオブジェクトにレイファイされる。名前はプロパティ名、実体がプロパティ値となる。
名前空間はまた、**束縛**、**環境**、**コンテキスト**などと呼ばれるメタオブジェクトに相当する。
Catyのレイフィケーションでは、束縛、環境、コンテキストなども一様に名前空間と呼ぶことにする。

**名前空間コンテナ**は、いくつかの名前空間を保持するメタオブジェクトである。

**メタオブジェクト名前構造**とは、名前空間コンテナ、名前空間、その他の実体から構成されるグラフ構造である。
メタオブジェクト名前構造がグラフであることを強調するときは**メタオブジェクト名前グラフ**、
または**メタオブジェクト・グラフ**とも呼ぶ。**MOGra** と略記する。

メタオブジェクト・グラフのノードは、URL記法またはコロンドットパス（CDパス）で指し示すことができる。
URL記法はノードを一意的に特定できるが、CDパスは一意的にノードを指せない。
CDパスには、名前の種別（型かコマンドか、など）の情報が欠如しているからである。

<<{
/** 名前空間の種別 
 * その名前空間に格納されている実体がなんであるかで、
 * 名前空間の種別が決まる。
 *
 * cが名前空間コンテナ、sが名前空間の種別（ソート）であるとき、
 * 当該の名前空間には、x.s でアクセスできる。
 * 名前nに対する値（定義、実体）は、x.s.n でアクセスできる。
 * 
 * 次の実体は独自の名前空間を持たない点に注意。
 *
 * # 例外 （型）
 * # カインド （型）
 * # 構文 （型）
 * # リソースクラス （クラス）
 * # ポート （コマンド）
 * # フィルター  （コマンド）
 * # フォーマット （コマンド）
 *
 */
type namespaceSort = (
  "applications"
| "facilities"
| "packages"
| "modules"
| "types"
| "commands"
| "classes"
| "states"
| "userroles"
);


/** 値の型がTの名前空間 */
type NamespaceOf<T> = @* {

  */* 名前 */: T?,
};
}>>  

=== 再帰

再帰的な定義（参照・呼び出しのサイクル）を持つ可能性があるのは、型とコマンドだけである。

他のモジュール／クラスを経由したサイクリック参照は原則的に許さないが、
related宣言があるときだけは許す。
related宣言されたモジュール群は単一のものとして扱う。
これにより、型名前空間／コマンド名前空間ごとの分割コンパイルが可能となる。

== 名前空間コンテナ

プロジェクト、アプリケーション、パッケージ、モジュール、クラスは名前空間コンテナである。

<<{

/** プロジェクトの基本情報 */
type ProjectSummary = QualifierMixin & {

  /** プロジェクト名 
   * プロジェクト名は任意の文字列で、ドメイン名のようにドットを含んでもよい。
   * 設定項目の projectName 
   */
  "name": string, // 必須

  /** 設定ファイルの deprecated の値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?,

   *: any?
};

/** 名前空間コンテナとしてのプロジェクト
 * プロジェクトは1つの名前空間を持つ：
 * * アプリケーションの名前空間 applications
 */
@[mogra-node, full-info]
type Project = @project (ProjectSummary & {

/*{{{

  /** ランタイム・メタオブジェクト 
   * まだ未定
   */
  "runtime" : foreign?,

}}}*/


  /** アプリケーションの名前空間 */
  @[namespace]
  "applications": NamespaceOf<Application>,

/*{{{

  /** 全てのファシリティの所在 
   * プロジェクト全体でファシリティ名は一意的に保つ。
   */

  "facilityLocations": {
     * /* ファシリティ名 */: string(remark="アプリケーション名")?
   },

}}}*/

  *: any?

});

/** アプリケーションの基本情報 */
type ApplicationSummary =  QualifierMixin & {

  /** アプリケーション名 */
  "name": string(remark="名前"), // 必須

  /** 所属するグループ */
  "group" : (string | null),

  /** WebのURI空間にマウントされたときのパス */
  "path" : string(remark="パス"),

  /** 可視性関係（アプリケーション・ツリー構造）の親 */
  @[default("global")]
  "visibleParent" : string(remark="アプリケーション名")?,

  /** 設定フィルの deprecated の値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?,


  *: any?
};

/** 名前空間コンテナとしてのアプリケーション 
 * アプリケーションは2つの名前空間を持つ：
 * # パッケージの名前空間 packages
 * # モジュールの名前空間 modules
 */
@[mogra-node, full-info]
type Application = @application (ApplicationSummary & {

  /** パッケージの名前空間 */
  @[namespace]
  "packages": NamespaceOf<Package>,

  /** モジュールの名前空間 */
  @[namespace]
  "modules": NamespaceOf<Module>,

  /** ファシリティの名前空間 */
  @[namespace]
  "facilities": NamespaceOf<Facility>,

  *: any?
});

/** ファシリティの基本情報 */
type FacilitySummary = LocatedQualifierMixin & {

  /** ファシリティの登録名 */
  "name" : string, // 必須

  /** スペッククラスのコロンドットパス */
  "specClass": string(remark="CDパス"),

  /** システムパラメータ */
  "systemParam" : any,

  /** @[deprecated]アノテーションの値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?,

  /** 実装クラスの実装言語依存の参照 */
  @[old-long-summary]
  "implClass": ImplRef?, // 必須にする予定

   *: any?
};

/** ファシリティ */
@[mogra-node, full-info]
type Facility = @facility (FacilitySummary & {

  // サブツリーなし

   *: any?
});

/** パッケージの基本情報 */
type PackageSummary = LocatedQualifierMixin & {

  /** パッケージ名 */
  "name": string(remark="名前"), // 必須

  /** 置かれているプレース */
  "place" : ("schemata" | "actions"),

  // 現状、deprecatedは指定できない

  *: any?
};

/** パッケージ 
 * パッケージは2つの名前空間を持つ：
 * # パッケージの名前空間 packages
 * # モジュールの名前空間 modules
 */
@[mogra-node, full-info]
type Package = @package (PackageSummary &  {

  /** パッケージの名前空間 */
  @[namespace]
  "packages": NamespaceOf<Package>,

  /** モジュールの名前空間 */
  @[namespace]
  "modules": NamespaceOf<Module>,

  *: any?
});

/** モジュールに関する基本情報 */
type ModuleSummary = LocatedQualifierMixin & {

  /** モジュール名 */
  "name": string(remark="名前"), // 必須

  /** 置かれているプレース */
  "place" : ("schemata" | "actions"),

  /** モジュール記述の構文 */
  "syntax": ("casm"|"cara"|"camb")?,

  /** 文芸的か */
  "literate": boolean?,

  /** @[deprecated]アノテーションの値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?, // 廃止予定

  /** ロードタイミング */
  @[default("boot")]
  "loadOn": ("boot" | "demand")?,

  /** 既にロードされているか 
   * loadOn が boot なら、この値は常に真である。
   * loadOn が demand のとき、この値は状況により変わる。
   */
  @[default(true)]
  "loaded": boolean?,


  *: any?
};



/** モジュール
 * モジュールは常に3つの名前空間を持つ： 
 * # 型の名前空間 types
 * # コマンドの名前空間 commands
 * # クラスの名前空間 classes
 *
 * 他の名前空間、部分名前空間はオプショナルである。
 */
@[mogra-node, full-info]
type Module = @module (ModuleSummary & {

  /** 型の名前空間 */
  @[namespace]
  "types": NamespaceOf<TypeSpec>,

  /** コマンドの名前空間 */
  @[namespace]
  "commands": NamespaceOf<Command>,

  /** クラスの名前空間 */
  @[namespace]
  "classes": NamespaceOf<Class>,

  /** ポートの部分名前空間
   * commandsと名前空間は同じ
   * 部分名前空間をレイファイするかどうかは未定
   */
  @[subnamespace]
  "ports": NamespaceOf<Port>?,

  /** カインドの部分名前空間 
   * commandsと名前空間は同じ
   */
  @[subnamespace]
  "kinds": NamespaceOf<Kind>?,

/* 以下の名前空間は、caraモジュールのみ */

  /** リソースクラス 
   * classesと名前空間は同じ
   * 部分名前空間をレイファイするかどうかは未定
   */
  @[subnamespace]
  "resources": NamespaceOf<Resource>?, 

  /** ユーザーロールの名前空間 */
  @[namespace]
  "userroles": NamespaceOf<Userrole>?,

  /** 状態の名前空間 */
  @[namespace]
  "states": NamespaceOf<State>?,

  *: any?
});

/** クラスの基本情報 */
type ClassSummary = LocatedQualifierMixin & {
  "document": Doc?,
  "annotations": object?,  // アノテーションもサマリーに必要

  /** クラス名 */
  "name": string,

  /** arg0 */
  "arg0": TypeSpec?,

  /** @[deprecated]アノテーションの値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?,

 *: any?
};
   

/** クラス
 * クラスは名前空間コンテナだが、現状では1つだけの名前空間commandsを持つ
 * クラス表現（class expression）を導入すると、この定義は大幅に変更される。
 */
@[mogra-node, full-info]
type Class = @class (ClassSummary & {

  /** コマンドの名前空間 */
  @[namespace]
  "commands": NamespaceOf<Command>,

  *: any?
});
}>>

== 型

<<{

/* treifに移したものを、ここで定義 */

type TypeExpr =  treif:TypeExpr;
type TypeSpec =  treif:TypeSpec;
type TypeParam = treif:TypeParam;

/** 型の基本情報 */
type TypeSummary = LocatedQualifierMixin & {
  "name": string, // 必須

  "typeParams": [TypeParam*], // 必須にする予定

  /** @[deprecated]アノテーションの値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?, // 廃止予定

  *: any?
};


/** メタオブジェクトとしての型
 * 名前付きの型、または型関数の定義
 */
@[mogra-node, full-info]
type Type = @type (TypeSummary & {

  @[body]
  "body": TypeSpec,

  *: any? // open
});


/** カインドの基本情報 */
type KindSummary = LocatedQualifierMixin & {
  "name": string, // 必須

  *: any?
};

/** カインド
 */
@[mogra-node, full-info]
type Kind = @kind (KindSummary & {

  @[body]
  "body": KindExpr,

  *: any? // open
});

}>>


== コマンド


<<{
/** コマンドのレイフィケーションデータの修飾情報 
 */
type CommandQualifierMixin = QualifierMixin & {

    /** コマンドが名前空間（束縛セット、コンテキスト）内で名前に束縛されているとき、その名前が再帰的かどうか 
     */
    @[default(@Indef)]
    "recursive": triboolean?,

    *: any?  // open
};

/** 実装状況を示す値 
 */
type implemented = (
  /** 実装はない、宣言されているだけ */
  "none" |

  /** Python実装を持つ */
  "python" |

  /** CatyScript実装を持つ */
  "catyscript" |
);

/**
 * ファシリティの利用宣言
 */
type FacilityUsage = {
    /** ファシリティ名（登録名）
     * キー（オブジェクトのプロパティ）としてはインジェクション名を使う
     */
    "registeredName": string,

    /** インジェクションのときに使う名前
     * キーとしてはインジェクション名を使う
     * 同一の登録名のファシリティが異なるインジェクション名で使われることがある。
     */
    "name": string?,

    /** アクセスのモード */
    "mode": ("read" | "update" | "use"),

    /** ファシリティのユーザーパラメータ */
    @[default(null)]
    "userParam": any?,
};

/** 実装 */
type Implement = (ScriptCode | ImplRef);

/** 実装への参照 */
type ImplRef = @imple-ref {
  /** 実装言語 
   * Pythonのときは、"python"
   */
  "implLang": string,
  /** 参照 フォーマットは実装言語に依存 */
  "ref": string,
};

/** スクリプトコード */
type ScriptCode = deferred @script any;


/** コマンドの基本情報 */
type CommandSummary = LocatedQualifierMixin & {

  /** コマンド名 */
  "name": string?,

  "typeParams": [TypeParam*]?,
  "profile": Profile, //マルチプロファイルがまだ有効

  /** ファシリティの利用宣言
   * オブジェクトのプロパティ名（キー）は、
   * ファシリティの登録名ではなくてインジェクション名である点に注意
   */
  "facilityUsages": {*: FacilityUsage?}?, 

  "implemented": implemented,

  /** @[deprecated]アノテーションの値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?,

   * : any?
};


/** コマンド */
@[mogra-node, full-info]
type Command = @command (CommandQualifierMixin & CommandSummary & {

    @[body]
    "body": Implement?,
    
     *: any?
});

/** プロファイル
 * コマンドの型変数（typeParams）のスコープは
 * プロファイル全体になる。
 */
type Profile = {
   /** クラスに属するときは、クラスのarg0をコピーする */
   "arg0": TypeSpec,
   /** オプションの型 */
   "opts": TypeSpec, //ObjectType?, 必須にする。
   /** 引数の型 */
   "args": TypeSpec, //ArrayType?, 必須にする。
   /** 入力の型 */
   "input": TypeSpec,

   /** 出力の型 */
   "output": TypeSpec,
   /** 例外の型 */
   "exception": ExceptionTypes, // @only か @likely を付ける
   /** シグナルの型 */
   "signal": ExceptionTypes, // @only か @likely を付ける
};

type ExceptionTypes = (@only [TypeSpec*]) | (@likely [TypeSpec*]);

}>>


== リソース、アクション、状態

* リソースクラスのパスパターンには ("/" | "*/") のような場合もあるので、[string*] とする。
* パスパターンを持たないリソースクラスも認める。そのときのパスパターンは空リスト [] となる。


<<{
/** リソースクラスの基本情報 */
type ResourceSummary = LocatedQualifierMixin & {

  /** リソースクラス名 */
  "name": string,

  /** パスパターン */
  "pathPattern": [string*],

  "filetype": {"contentType": string, "isText": boolean}?,

  /** @[deprecated]アノテーションの値をコピーする */
  @[deprecated, default(false)]
  "deprecated": boolean?,

  /** インスタンス文字列の集合
   * 将来、サマリーには入れないことになるかもしれない。
   */
  "instances" : [string*]?,

  *: any?
};

/** リソースクラス */
@[mogra-node, full-info]
type Resource = @resource (ResourceSummary & {

    /** アクションの名前空間 */
    @[subnamespace]
    "actions": NamespaceOf<Action>,

   *: any?

});

/** アクション・インボーカー */
type Invoker = {
  "verb": string,
  "method": httpMethod,
  "checkers": object?
};


/** アクションプロファイル

アクション専用のプロファイル。
次の項目が省略可能となっている。
 
 # "arg0":
 # "args":
 # "input":
 # "output":

次は必須である。

 # "internalInput"
 # "opts":
 # "exception": 
 # "signal": 

*/
type ActionProfile = {
   /** リソースクラスの pathPatternのコピー
    * 冗長なので省略してもよい。
    */
   "arg0": TypeSpec?,
   /** オプションの型 */
   "opts": TypeSpec, // これは必須
   /** 引数の型 */
   "args": TypeSpec?,

   /** 入力の型 */
   "input": TypeSpec?,

   /** 内部的な入力の型 
    * inlet.input のコピー
    */
   "internalInput": TypeSpec?,

   /** 出力の型 */
   "output": TypeSpec?,

   /** 例外の型 */
   "exception": ExceptionTypes,  // これは必須
   /** シグナルの型 */
   "signal": ExceptionTypes, // これは必須
};


/** アクションの基本情報 */
type ActionSummary = LocatedQualifierMixin & {

  /** アクション名 */
  "name": string,

  /** アクションは型パラメータを持てない。
   * アクションはWebから呼び出されるため、
   * 型パラメータを具体化するタイミングがない。
   */
  "typeParams": undefined,

  /** プロファイル
   * アクションはコマンドの一種なので、コマンドと同じ情報を持つ
   * ただし、デフォルトが決まっているので一部の項目は省略可能である。
   */
  "profile": ActionProfile?, // 必須にする予定

  /** 使用するファシリティ
   * アクションがファシリティを使う可能性を否定はしない。
   * 使用法と意味論はコマンドのときと同じ。
   */
  "facilityUsages": {*: FacilityUsage?}?, 

  // implementedはコマンドと同じ
  "implemented": implemented,


  // 以下はアクション特有

  /** 所属するリソースのpathPatternのコピーを持つ */
  "pathPattern": [string*],

  /** このアクションの起動方式 */
  "invoker": Invoker, // アクション特有


  /** このアクションが生成する可能性のある状態のリスト */
  "produces": [string*],
  /** このアクションがリダイレクトする可能性のあるアクション／ポートのリスト */
  "redirects": [string*],
  /** このアクションがフォーワードする可能性のあるアクション／ポートのリスト */
  "forwards": [string*],


  /* フラグメント情報の形式はまだ未定、以下は暫定案 */


  /** 入り口フラグメント（inlet） 
   * 入り口フラグメント（**高々1個**）を保持する。
   */
  "inlet" : FragmentProfile?,  // これがないときはinletが未定義と解釈

   /** 出口フラグメント（outlet） 
    * 出口フラグメント（任意個数）を保持する。
    * 出口／入り口の両方に接しているフラグメントがあると、inletとoutletsに重複が生じる。
    */
   "outlets": {*: FragmentProfile?}?,  // これがないときはoutlets未定義と解釈


   /** 中間フラグメント（midlet） 
    * 出口／入り口に接していないフラグメント。
    */
   "midlets": {*: FragmentProfile?}?,


   *: any?
};

/** アクション
 * 親リソースを参照することなく、
 * アクションの情報だけでメタプログラミングが出来るようにする。
 *
 * リソースから独立したトップレベルアクションにも対応可能な定義としておく。
 */
@[mogra-node, full-info]
type Action = @action (ActionSummary & {
  @[body]
   "body": Implement?,

  @[body]
   "lock": ScriptCode?, //@ なんだっけ？

    *: any?
});


/** 不定な型 
 * 構文上は '_' で示される。
 */
type IndeterminateType = @indeterminate null; //@ tag-onlyがreifyできないようだ。

/** フラグメントの情報 */
type FragmentProfile = {
    /** フラグメント名 */
    "name": string,
    /** フラグメントの境界特性 
     */
    "boundary": {"in": boolean, "out":boolean}, 
    /** フラグメントへの入力型 */
    "input": (TypeSpec | IndeterminateType)?,
    /** フラグメントからの出力型 */
    "output": (TypeSpec | IndeterminateType)?,

    // アクションの構造グラフの辺情報

    /** 生成する状態 */
    "produces": [string*]?, 
    /** アクション内の制御の遷移先 */
    "relays": [string*]?,   
    /** リダイレクト先アクション／ポート */
    "redirects": [string*]?,
    /** フォーワード先アクション／ポート  */
    "forwards": [string*]?, 
};

/** ユーザーロールの基本情報 */
type UserroleSummary = LocatedQualifierMixin & {

  "name": string,
  
  *: any?
};

/** ユーザーロール（アクター） */
@[mogra-node, full-info]
type Userrole = @userrole (UserroleSummary & {

  // サブツリー情報なし

  *: any?
});

/** 半プロファイル */
type HalfProfile = {
   "opts": TypeSpec?, //ObjectType?,
   "args": TypeSpec?, //ArrayType?,
   "input": TypeSpec,
};

/** ポートの基本情報 */
type PortSummary = LocatedQualifierMixin & {

  "name": string,
  "profile" : HalfProfile?,

  *: any?
};

/** ポート */
@[mogra-node, full-info]
type Port = @port (PortSummary & {

  // サブツリー情報なし

  *: any?
});

/** 状態の基本情報 */
type StateSummary = LocatedQualifierMixin & {

  "name": string,

  "type": TypeSpec,

  /** この状態に含まれる（可能性がある）ハイパーリンク 
   */
  "links": { *: Link?},


   /** この状態が所属する親モジュールのコロンドットパス
    */
  @[old-long-summary]
   "parentPath": string?,

  /** forの目的語のuserroles */
  @[old-long-summary]
  "forWhom": [string*]?, 

  /** as で指定された名前 */
  @[default("data"), old-long-summary]
  "statePropName": string?, 

  /** links as で指定された名前 */
  @[default("links"), old-long-summary]
  "linksPropName": string?,

  /** baseobjctが指定されているかどうか  */
  @[default("false"), old-long-summary]
  "isBaseObject": boolean?,

  /** ハイパーリンクグラフのバックポインタ */
  @[old-long-summary]
  "producedBy" : [string(remark="アクション名")* ]?,

  *: any?
};

/** 状態 */
@[mogra-node, full-info]
type State = @state (StateSummary & {

  // サブツリー情報なし

  *:any?
});

/** ハイパーリンク 
 * ハイパーリンク辺の集合を表現する
 */
type Link = @link {
 "annotations": object?,

 "document":  Doc?,

 /** リンクの種別を識別する名前 
  * HTML要素のclass属性に使うことを想定している。
  */
 "name" : string,  // 構文的にはラベル

 /** このリンク達がどのようにして作られるか */
 "becoming": (
    /** リンク情報が状態データに含まれる */
    "embedded" 
  |
    /** リンクは状態データとは別に後から追加する必要がある */
    "additional" 
  | 
    /** 未定、不明を意味する値 */
    "indef"
  ),

  /** この種類のリンクが、状態インスタンス（ページ）内に最小でも何個出現すべきか
   * 利用者の便宜性を考慮して省略不可能とする。暫定的に省略可能。
   */
  "minOccurs" : integer(minimum=0)?, 

  /** この種類のリンクが、状態インスタンス（ページ）内に最大で何個出現できるか
   * 利用者の便宜性を考慮して省略不可能とする。暫定的に省略可能。
   */
  "maxOccurs" : (integer(minimum=1)|"unbounded")?,

  /** 動かなくなるのを避けるため */
  @[deprecated]
  "occurrence":  ("*" | "+" | "!" | "?")?,


  /** このリンクのリンク先アクション */
  "targets": [string, string*], // 文字列ではなく構造的データにするかも

  /** 状態データからリンク情報を取り出す時に使うコマンド 
   * リンク情報（トリガー）の型は、このコマンドの出力の型となる。
   */
  "extractor": string(remark="コマンド名")?,


  *: any?
};

}>>

== 型の名前

<<{
/** 型が名前を持つときは、その名前を取り出す 
*/
command get-name :: TypeExpr -> (string|null) {
  // 組み込み型と型参照を選び出す
  when {
    builtin => [pass], 
    ref     => [pass],
    *       => [],
  } | 
  // スキーマ属性がないものを選び出す
  take {pv --safe attributes | filter:empty} > taken;

  %taken |
  // refプロパティか、またはtyeNameプロパティを取り出す
  // （この処理はちょっとトリッキー）
  each {[xjson:get --safe --default="" ref, xjson:get --safe --default="" typeName]} | 
  list:concat | text:concat > name-string;

  // 名前が""だった場合はnullに置き換える
  %name-string |
  cond {
    "" => null,
    *  => pass,
  }

};
}>>

== reifyコマンド

シャローレイフィケーションのshow-* と ディープレイフィケーションのreify-* で機能的にほとんど同じものもあるが、
名前（動詞＋名詞）の組み合わせは例外なしに揃えることにする。

<<{

/** コロンドット・パス */
type cdpath = string(remark="CDPATH");

/** プロジェクト全体をレイファイする
 * 巨大なデータになることがあるので注意
 */
command reify-project
:: void -> Project
;

/** 指定されたアプリケーションをレイファイする
 */
command reify-application
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [/** 指定がなければthis */cdpath? app]
:: void -> Application?
;

/** 指定されたパッケージをレイファイする
 */
command reify-package
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath pkg]
:: void -> Package?
;

/** 指定されたモジュールをレイファイする
 */
command reify-module
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath mod]
:: void -> Module?
;

/** 指定されたクラスをレイファイする
 */
command reify-class
  [cdpath cls]
:: void -> Class
;

/** 指定されたリソースクラスをレイファイする
 */
command reify-resource
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath res]
:: void -> Resource?
;

/** 指定された型をレイファイする
 */
command reify-type
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath typ]
:: void -> Type?
  refers python:reif.ReifyType
;

/** 指定されたカインドをレイファイする
 */
command reify-kind
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath typ]
:: void -> Kind?
;

/** 指定されたコマンドをレイファイする
 */
command reify-command
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath cmd]
:: void -> Command?
;

/** 指定されたアクションをレイファイする
 */
command reify-action
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath act]
:: void -> Action?
;

/** 指定されたポートをレイファイする
 */
command reify-port
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath prt]
:: void -> Port?
;

/** 指定された状態をレイファイする
 */
command reify-state
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath stt]
:: void -> State?
;

/** 指定されたファシリティをレイファイする
 */
command reify-facility
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath fcl]
:: void -> Facility?
;

/** 指定されたユーザーロールをレイファイする
 */
command reify-userrole
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [cdpath uro]
:: void -> Userrole?
;


}>>
