<<ignore  -*- coding: utf-8 -*- >>

= Graphviz -- gvモジュール

<<{
// 本体の標準ライブラリに入れるのでSysSpecからは一旦除外
/** GraphvizのCaty向けフロントエンド */
module gv;

}>>

== 属性値に使うスカラー型

<<{
/** 色の名前、または数値指定 
 * [[http://www.graphviz.org/content/attrs#kcolor]]
 */
type color  = deferred string(remark="color description");

/** ノードの形状名
 * [[http://www.graphviz.org/content/attrs#kshape]]
 */
type shape  = deferred string(remark="shape name");

/** ノードのスタイルの値 
 * [[http://www.graphviz.org/content/attrs#kstyle]]
 */
type nodeStyle  = deferred string(remark="node style value");

/** 辺のスタイルの値 
 * [[http://www.graphviz.org/content/attrs#kstyle]]
 */
type edgeStyle  = deferred string(remark="edge style value");


/** グラフのスタイルの値 
 * [[http://www.graphviz.org/content/attrs#kstyle]]
 */
type graphStyle = deferred string(remark="graph style value");

/** 矢印の形状の名前 
 * [[http://www.graphviz.org/content/attrs#karrowType]]
 */
type arrowType = deferred string(remark="arrow type");

/** エスケープシーケンスを許す文字列
 * [[http://www.graphviz.org/content/attrs#kescString]]
 */
type escString = string(remark="string allowing escape sequences");

/** ラベル文字列
 * [[ http://www.graphviz.org/content/attrs#klblString]]
 */
type lblString = string(remark="escString or an HTML label");

}>>

== その他のスカラー型

<<{
/** グラフ、ノード、辺、クラスターに付けるID */
type elementId = string;

/** Graphvizで使える属性名 */
@[typical(["name"])]
type AttrName = string(pattern="[a-zA-Z][a-zA-Z0-9]*");
}>>

== 属性

* propNameFormat以外にpropNameType というスキーマ属性が必要だ。

<<{
/** 属性の一般的な形式 */
type Attributes = {
 "id": undefined,
 "nodes" : undefined,
 * : (number|string|boolean)?
}(propNameFormat="gv-attr-name") ;

/** ノードの属性 */
type NodeAttributes = Attributes & {
 "color"     : color?,
 "fillcolor" : color?,
 "fontcolor" : color?,
 "label"     : lblString?,
 "shape"     : shape?,
 "style"     : nodeStyle?,

// 以下、2011-12-27T15:30:48 追加分

 "sides": integer(minimum=3)?,
 "peripheries": integer(minimum=0)?,
 "skey": number?,
 "distortion":number?,

 // まだ実験的なので拡張を許す
 *          : (number|string|boolean)?
};

/** 辺の属性 */
type EdgeAttributes = Attributes & {
 "arrowhead" : arrowType?,
 "arrowtail" : arrowType?,
 "color"     : color?,
 "fontcolor" : color?,
 "headlabel" : lblString?,
 "label"     : lblString?,
 "style"     : edgeStyle?,

 // まだ実験的なので拡張を許す
 *          : (number|string|boolean)?
};

/** グラフの属性 */
type GraphAttributes = Attributes & {
 @[default("X11")]
 "colorscheme" : string?,// ("X11" | "SVG" | "Brewer")?, // ???

 "bgcolor"   : color?,
 "color"     : color?,
 "fillcolor" : color?,
 "fontcolor" : color?,
 "label"     : lblString?,
 "style"     : graphStyle?,

 // まだ実験的なので拡張を許す
 *          : (number|string|boolean)?
};

/** クラスターの属性 */
type ClusterAttributes = GraphAttributes;
}>>

== グラフとその構成要素

<<{
type ElementList = [(Node | Edge | Cluster | ElementList)*];


/** 有向グラフ */
type Digraph = @digraph {
 "id" : elementId,

 /** このグラフ全体の属性 */
 "graph" : GraphAttributes?,

 /** ノードのデフォルト属性 */
 "node"  : NodeAttributes?,

 /** 辺のデフォルト属性 */
 "edge"  : EdgeAttributes?,

 /** グラフを構成するノード、辺、クラスター */
 "elements" : ElementList
};

/** ノード
 * 属性が不要なときは、IDとなる文字列だけでよい。
 */
type Node = @node (elementId | NodeObj);

/** ノードを表現するオブジェクト
 * id以外のプロパティはノード属性。
 */
type NodeObj = NodeAttributes ++ {
 "id" : elementId
};

/** 辺のターゲット
 * 複数のノードIDを指定してもよい。
 */
type Target = (elementId | [elementId, elementId, elementId*]);

/** 辺
 * 属性が不要なときは、ノードIDの組み合わせだけでよい。
 */
type Edge = @edge ([elementId, Target] | EdgeObj);


/** 辺を表現するオブジェクト
 * id, nodes以外のプロパティは辺属性。
 */
type EdgeObj = EdgeAttributes ++ {
 "id" : elementId?,
 "nodes" : [elementId, Target]
};

/** クラスター（特殊なサブグラフ） */
type Cluster = @cluster {
 /** クラスターID
  * このIDに "cluster" が前置されてサブグラフのIDとなる。
  */
 "id" : elementId,

 /** このサブグラフ全体の属性 */
 "graph" : GraphAttributes?,

 /** ノードのデフォルト属性 */
 "node"  : NodeAttributes?,

 /** 辺のデフォルト属性 */
 "edge"  : EdgeAttributes?,

 /** サブグラフを構成するノード、辺、クラスター */
 "elements" : [(Node | Edge | Cluster)*]
};

}>>


== 描画コマンド

<<{
/** Catyのファイルパス */
type filePath = string(remark="Catyのファイルパス");

/** Graphvizのレイアウトエンジン名 */
type layoutEngine = ("dot" | "neato" | "fdp" | "sfdp" | "twopi" | "circo");

/** Graphvizの出力フォーマット名 */
type outputFormat = ("gif" | "png" | "jpeg" | "dot" | "svg" | "svge" | "plaindot");

/** 有向グラフの描画 */
@[no-auto-fill]
command draw 
 {
  /** 出力フォーマット */
  @[default("gif")]
  "format": outputFormat?,

  /** レイアウトエンジン */
  @[default("dot")]
  "engine": layoutEngine?,
 
  /** 描画に使われるフォント。日本語を使う場合は指定するのを推奨 */
  "font": string(remark="フォント名")?,
 
  /** 出力ファイル
   * 指定がないときは標準出力
   */
  "out": filePath?,

  /** データ最終変更の日時 */
  @[without("timefile")]
  "time" : common:dateTime?,

  /** このファイルのタイムスタンプをデータ最終変更の日時とみなす 
   * ファイルが存在しないときは、そのタイムスタンプは無限の未来だとする。
   */
  @[without("time")]
  "timefile" : filePath?,

  /** 出力ファイルがデータ最終変更の日時より古いときだけ描画する */
  @[with(@_OR ["time", "timefile"]), default(false)]
  "if-modified" : boolean?
  
 }
:: Digraph -> (void | binary | string) 
 uses pub
 refers python:gv.Draw;

}>> 

== ファイルからの描画コマンド

<<{
// drawのラッパー
//
/** 引数で指定されたファイルのグラフデータを描画する */
command draw-from-file 
 {
  /** 出力フォーマット */
  "format": outputFormat?,

  /** レイアウトエンジン */
  "engine": layoutEngine?,
 
  /** 描画に使われるフォント。日本語を使う場合は指定するのを推奨 */
  "font": string(remark="フォント名")?,

  /** 出力ファイル
   * 指定がないときは標準出力
   */
  "out": filePath?,

  /** 出力ファイルが入力ファイルより古いときだけ描画する */
  "if-modified" : boolean?
 }
 [/** グラフデータが格納されたファイル */ filePath file]
:: void  -> (void | binary | string) 
{ 
  %1 > file;
  file:exists %file |
  when {
    NG => empty-graph,
    OK => xjson:read %file
  } | draw --timefile=%file %--format %--engine %--font %--out %--if-modified 
};
}>>

== 便利コマンド

<<{
/**  略記を正式な記法にする */
command fix
:: (array | Node | Edge | Cluster |Digraph ) -> (array | Node|Edge|Cluster|Digraph)
{
  when {

    array => dump --prefix="gv:fix input: array:" |
         each {call gv:fix},
    node =>
         when {
           object => pass,
           string => {"id": pass},
         } | add-tag node
    ,
    edge =>
         when {
           object => pass,
           array => {"nodes": pass},
         } | add-tag edge
    ,
    * ==>
      pass
    ,
  }
};

/** グラフの描画結果を表示する */
@[interactive]
command show
 {
   "font" : string?, // とりあえずfontオプションは使える
 } 
:: Digraph -> void 
{
  gv:draw --font=%font? | ct:show-image
};


/** グラフの描画結果を表示してからpassする */
@[interactive]
command peek 
 {
   /** debugの値に無関係に常に描画する */
   @[default(false)]
   "force": boolean?
 }
:: (array | Node|Edge|Cluster|Digraph) -> (array |Node|Edge|Cluster|Digraph) 
{
 pass > g;

 [%force, %DEBUG] | cpl:bor --tag |
 when {
   True =>
     %g |
     when {
      digraph ==> gv:draw,
      *       ==> gv:graph "" | gv:draw,
     } | ct:show-image; %g
   , // カンマ忘れるから注意せよ、ここに書いておくのがいいかもな
   False => %g
   ,
 }
};

}>>

== グラフデータのコンストラクタ

<<{
/** グラフの構築 */
command graph
 {
   * : (number|string|boolean)?,
 }
 [elementId? id]
:: (null | Node | Edge | Cluster| array) -> Digraph
{
  pass |
  when {
   null => [],
   node    ==> [pass],
   edge    ==> [pass],
   cluster ==> [pass],
   array   ==> pass
  } > elements;

  %1? |
  when {
   undefined => "graph",
   * ==> pass
  } > id;

  @digraph {
   "id": %id,

   "graph" : [%_OPTS, {"label" : %id}] | json:merge --mode=fst,
   "elements" : %elements | when {array=>xjson:flatten, *=> pass} // これは、のdrawコマンドで対処して欲しい。
  }

};

/** ノードの構築 */
command node
 {
   * : (number|string|boolean)?,
 }
 [elementId? id]
:: void -> Node
{
  %1? |
  when {
   undefined => "node",
   * ==> pass
  } > id;

  [
   "node", 
   [%_OPTS, {"id": %id}] | json:merge --mode=fst
  ] | tagged
};

/** 辺の構築 */
command edge
 {
   * : (number|string|boolean)?,
 }
 [elementId from, elementId to]
:: void -> Edge
{
  %1 > from;
  %2 > to;

  [
    "edge",
    [{"nodes" : [%from, %to]}, %_OPTS] | json:merge --mode=error
  ] | tagged
};

/** クラスターの構築 */
command cluster
 {
   * : (number|string|boolean)?,
 }
 [elementId? id]
:: (null | Node | Edge | Cluster| array) -> Cluster
{
  pass > in;

  %1? |
  when {
   undefined => "",
   * ==> pass
  } > id;

  %in |
  when {
   null => [@node {"id":["__dummy_", %id] | text:concat, "style":"invis"}],
   node    ==> [pass],
   edge    ==> [pass],
   cluster ==> [pass],
   array   ==> pass
  } > elements;

  @cluster {
   "id" : %id,
   "graph" : [%_OPTS, {"label" : %id}] | json:merge --mode=fst,
   "elements" : %elements
  }
};

/** ノードのデフォルトを設定 */
command node-attr
 {
   * : (number|string|boolean)?,
 }
:: ( Digraph | Cluster) -> ( Digraph | Cluster)
{
  pass > in;
  %_OPTS > attrs;

  %in | xjson:get --safe $.node |
  when {
   undefined => {},
   *         => pass
  } > old-attrs;

  %in | [ tag > tag, untagged > content];
  [%tag, [%content, [%attrs, %old-attrs] | json:merge --mode=fst] | xjson:put $.node] | tagged
};

/** 辺のデフォルトを設定 */
command edge-attr
 {
   * : (number|string|boolean)?,
 }
:: (Digraph | Cluster) -> (Digraph | Cluster)
{
  pass > in;
  %_OPTS > attrs;

  %in | xjson:get --safe $.edge |
  when {
   undefined => {},
   *         => pass
  } > old-attrs;

  %in | [ tag > tag, untagged > content];
  [%tag, [%content, [%attrs, %old-attrs] | json:merge --mode=fst] | xjson:put $.edge] | tagged
};

/*{{{

/** 固有の属性を設定 */
command attr
 {
   * : (number|string|boolean)?,
 }
:: (Node|Edge| Digraph | Cluster) -> (Node|Edge| Digraph | Cluster)
{
  pass > in;
  %_OPTS > attrs;

  %in |
  when {
    node => [_fix-node-content, %attrs] | xjson:merge --mode=snd,
    edge => [_fix-edge-content, %attrs] | xjson:merge --mode=snd,
};

}}}*/

}>>

== サンプル

* 参考：[[http://www.graphviz.org/Documentation/dotguide.pdf|dot Manual]]

<<{

/* "dot Manual" = http://www.graphviz.org/Documentation/dotguide.pdf */

/** dot Manual fig. 1 */
command sample1 :: void -> Digraph {
 @digraph {
   "id" : "G",
   "elements" : [
     @edge ["main", "parse" ],
     @edge ["parse", "execute"],
     @edge ["main", "init"],
     @edge ["main", "cleanup"],
     @edge ["execute", "make_string"],
     @edge ["execute", "printf"],
     @edge ["init", "make_string"],
     @edge ["main", "printf"],
     @edge ["execute", "compare"]
   ]
 }
};

/** dot Manual fig. 3 */
command sample2 :: void -> Digraph {
 @digraph {
   "id" : "G",
   "graph" : {"size": "4,4"},

   "elements" : [
     @node {
       "id" : "main",
       "shape" : "box"
     },

     @edge { 
       "nodes" : ["main", "parse"],
       "weight": "8",
     },

     @edge ["parse", "execute"],
     @edge {
       "nodes" : ["main", "init"],
       "style" : "dotted",
      },
     @edge ["main", "cleanup"],
     @edge ["execute", ["make_string", "printf"]],
     @edge ["init", "make_string"],
     @edge {
      "nodes" : ["main", "printf"],
      "style":"bold",
      "label":"100 times"
     },
     @node {
       "id":"make_string",
       "label":"make a\nstring"
     },
     @node {
       "id":"compare",
       "shape":"box",
        "style":"filled",
        "color": ".7 .3 1.0"
     },
     @edge {
       "nodes": ["execute", "compare"],
       "color":"red"
     },

   ]
 }

};


/** dot Manual fig. 5 */
command sample3 :: void -> Digraph {

 @digraph {
  "id":"G",

  "elements": [
    @edge ["a", "b"],
    @edge ["b", "c"],
    @edge ["b", "d"],
// 4: a [shape=polygon,sides=5,peripheries=3,color=lightblue,style=filled];
    @node {
     "id":"a",
     "shape":"polygon",
     "sides":5,
     "peripheries":3,
     "color":"lightblue",
     "style":"filled",
    },
// 5: c [shape=polygon,sides=4,skew=.4,label="hello world"]
    @node {
     "id":"c",
     "shape":"polygon",
     "sides":4,
     "skey":0.4,
     "label":"hello world",
    },
// 6: d [shape=invtriangle];
    @node {
     "id":"d",
     "shape":"invtriangle",
    },
// 7: e [shape=polygon,sides=4,distortion=.7];
    @node {
     "id":"e",
     "shape":"polygon",
     "sides":4,
     "distortion":0.7,
    },

  ]
 }

};

/** dot Manual fig. 7 */
command sample4 :: void -> Digraph {
 @digraph  {
  "id":"structs",
  "node" : {"shape":"record"},
  "elements":[
// 3: struct1 [shape=record,label="<f0> left|<f1> mid\ dle|<f2> right"];
   @node {
    "id":"struct1",
    "shape":"record",
    "label":"<f0> left|<f1> mid\\ dle|<f2> right",
   },
// 4: struct2 [shape=record,label="<f0> one|<f1> two"];
   @node {
    "id":"struct2",
    "shape":"record",
    "label":"<f0> \"one\"|<f1> two",
   },
// 5: struct3 [shape=record,label="hello\nworld |{ b |{c|<here> d|e}| f}| g | h"];
   @node {
    "id":"struct3",
    "shape":"record",
    "label":"hello\nworld |{ b |{c|<here> d|e}| f}| g | h",
   },
// 6: struct1 -> struct2;
  @edge ["struct1", "struct2"],
// 7: struct1 -> struct3;
  @edge ["struct1", "struct3"],

  ]
 }

};

/** dot Manual fig. 11 
 * Binary search tree using records
 */
command sample5 :: void -> Digraph {

 @digraph {
  "id":"g",
  "node": {
  // 2: node [shape = record,height=.1];
    "shape":"record",
    "height":0.1
  },

  "elements":[
// 3: node0[label = "<f0> |<f1> G|<f2> "];
     @node {
      "id":"node0",
      "label":"<f0> |<f1> G|<f2> ",
     },
// 4: node1[label = "<f0> |<f1> E|<f2> "];
     @node {
      "id":"node1",
      "label":"<f0> |<f1> E|<f2> ",
     },

// 5: node2[label = "<f0> |<f1> B|<f2> "];
     @node {
      "id":"node2",
      "label":"<f0> |<f1> B|<f2> ",
     },

// 6: node3[label = "<f0> |<f1> F|<f2> "];
     @node {
      "id":"node3",
      "label":"<f0> |<f1> F|<f2> ",
     },

// 7: node4[label = "<f0> |<f1> R|<f2> "];
     @node {
      "id":"node4",
      "label":"<f0> |<f1> R|<f2> ",
     },

// 8: node5[label = "<f0> |<f1> H|<f2> "];
     @node {
      "id":"node5",
      "label":"<f0> |<f1> H|<f2> ",
     },

// 9: node6[label = "<f0> |<f1> Y|<f2> "];
     @node {
      "id":"node6",
      "label":"<f0> |<f1> Y|<f2> ",
     },

// 10: node7[label = "<f0> |<f1> A|<f2> "];
     @node {
      "id":"node7",
      "label":"<f0> |<f1> A|<f2> ",
     },

// 11: node8[label = "<f0> |<f1> C|<f2> "];
     @node {
      "id":"node8",
      "label":"<f0> |<f1> C|<f2> ",
     },


// 12: "node0":f2 -> "node4":f1;
     @edge ["\"node0\":f2", "\"node4\":f1"],

// 13: "node0":f0 -> "node1":f1;
     @edge ["\"node0\":f0", "\"node1\":f1"],

// 14: "node1":f0 -> "node2":f1;
     @edge ["node1:f0", "node2:f1"],

// 15: "node1":f2 -> "node3":f1;
     @edge ["node1:f2", "node3:f1"],

// 16: "node2":f2 -> "node8":f1;
     @edge ["node2:f2", "node8:f1"],

// 17: "node2":f0 -> "node7":f1;
     @edge ["node2:f0", "node7:f1"],

// 18: "node4":f2 -> "node6":f1;
     @edge ["node4:f2", "node6:f1"],

// 19: "node4":f0 -> "node5":f1;
     @edge ["node4:f0", "node5:f1"],

  ]
 }
};

}>>

