<<ignore  -*- coding: utf-8 -*- >>

= 型表現のレイフィケーション

<<{
/** レイフィケーションされた型表現の型
 *
 */
module treif related reif; 

}>>


== 型

* 参照 [[>http://d.hatena.ne.jp/m-hiyama/20070922/1190444423|「Erlangの型システムを定式化してみる」]]
* 参照 [[>http://d.hatena.ne.jp/m-hiyama/20110430/1304128329|「Catyのカインド： やたらに簡単な高階の型」]]

=== reifでの定義の別名

<<{

type Doc = reif:Doc;

type QualifierMixin = reif:QualifierMixin;

type LocatedQualifierMixin = reif:LocatedQualifierMixin;

type Kind = reif:Kind;

}>>


===  共通の定義

<<{
/** 型のレイフィケーションデータの修飾情報 
 * スキーマ属性と再帰性のフラグが付く
 */
type TypeQualifierMixin = LocatedQualifierMixin & {
     /** スキーマ属性 */
    "attributes": object?,

    /** 型が名前空間（束縛セット、コンテキスト）内で名前に束縛されているとき、その名前が再帰的かどうか 
     */
    @[default(@Indef)]
    "recursive": tboolean?,

    *: any?  // open
};

}>>

=== 基本型と型参照

基本型（basic type）は、それ以上は分解できない型（＝単純型）、
または頻繁に使う包括的な型（anyとuniv）を表現する。次が基本型である。

# 予約された名前を持つ組み込み型（builtin type）
# 組み込み型にスキーマ属性（schema attribute）で制約を加えたもの（例：整数区間）
# シングルトン型（singleton type）

* 参照 [[>http://return0.info/note/caty_type_hierarchy.html|Catyの型階層]]

構文的には、object、arrayも予約


<<{
/** スカラー型の名前 */
type scalarTypeName = (
  "null"
| "boolean"
| "number"
| "string"   
| "binary"   
);

/** 組み込み型の名前 -- これらの名前は予約されている 
 * 組み込み型をすべて排他的にはできないので、
 * void, intgerも入れておく。
 * void = null, integer⊂number
 * 組み込み型（名前が予約語）は、全体として順序構造を作る。
 *
 * 包含の基本関係式は以下のとおり（*は全てを表す）：
 * # integer ⊂ number
 * # void = null
 * # (undefined, foreign, univ以外) ⊆ any
 * # * ⊆ univ
 * # never ⊆ *
 *
 * さらに、スキーマ属性による絞込み条件を使い、集合が内包的に定義される。
 */
type builtinTypeName = (
  "undefined"
| scalarTypeName
/* 
|  "null"
| "boolean"
| "number"
| "string"   
| "binary"   
*/

| "integer" // numberの部分型
| "void"    // データ型としてはnullと同じ

// XJSONデータ以外
| "foreign"  

// 以下は、便宜的・一般的な型
| "any"   // 包括的な型
| "univ"  // より包括的な型、型階層の最上位
| "never" // 空集合、データは一切なし
);

}>>

{{http://static.return0.info/images/caty_type_hierarchy.png|type_hieracchy}}

<<{

kind STRING_ENUM_TYPE = lower string /* and finite */;

/** 組み込み型の型関数 */
type BuiltinTypeOf<TypeNameType in STRING_ENUM_TYPE> = @builtin (QualifierMixin & {
  "typeName" : TypeNameType,
   *: any? // open
});

/** 組み込み型 
 * スキーマ属性があるため、
 * 内包的に定義された部分集合かもしれない点に注意。
 */
type BuiltinType = BuiltinTypeOf<builtinTypeName>;


/* objectは構文上の予約語だが、レイフィケーションでは次の型にpredefineされている */
/** 事前定義された object 型 */
const PredefinedObjectType :: ObjectType = @object-of {
 "specified" : {},
 "additional" : @builtin {"typeName": "univ"}
};

/* arrayは構文上の予約語だが、レイフィケーションでは次の型にpredefineされている */
/** 事前定義された array 型 */
const PredefinedArrayType :: ArrayType = @array-of {
 "specified" : [],
 "additional" : @builtin {"typeName": "univ"}
};

/** ブーリアンシングルトン型  */
type BooleanSingletonType = @boolean-val (QualifierMixin & {
  "value" : boolean,

   *: any? // open
});

/** 数値シングルトン型  */
type NumberSingletonType  = @number-val  (QualifierMixin & {
  "value" : number,

   *: any? // open
});

/** 文字列シングルトン型  */
type StringSingletonType  = @string-val  (QualifierMixin & {
  "value" : string,

   *: any? // open
});

/** バイナリシングルトン型  */
type BinarySingletonType  = @binary-val  (QualifierMixin & {
  "value" : binary,

   *: any? // open
});

/** シングルトン型 */
type SingletonType = (
   BooleanSingletonType
 | NumberSingletonType
 | StringSingletonType
 | BinarySingletonType
);


/** 基本型 

基本型は、便宜的な包括的な型と単純型（simple type）とに分類される。次は包括的な型である。

# any
# univ

単純型の（意味である）集合は次の特徴を持つ。

# undefined, null, boolean, number, string, binary, foreign のいずれかの領域の部分集合である。
# それが空でない集合であるなら、undefined, null, boolean, number, string, binary, foreign のどれか1つに含まれる。
# スキーマ属性（絞込み条件）によっては空集合となることもある。例： integer(minimu=1, maximum=0)。
  ただし、空集合は事前に検出されるはずである。
# 概念的には無限集合も許す。例えば、integerは概念的には無限集合である。
# 概念上は、すべての単純型に確定した集合が付随しているべきだが、
  記述法の曖昧さ（例：remark）や処理系の能力により、集合への所属（∈）が判定できないことがある。

*/
type BasicType = (
  BuiltinType
| SingletonType
);

/** 参照（型名、型関数名）
 * 型変数とユーザー定義型の名前は区別する必要はない。
 * 同様に、型関数変数とユーザー定義型関数の名前は区別する必要はない。
 * 
 * ユーザーが使う「名前」を参照と呼ぶ。
 * 
 * 参照は束縛環境（コンテキスト）のなかで評価される。
 * 束縛環境のなかで対応する定義が見つからないとエラーとなる。
 *
 * TypeRefオブジェクトに含まれるnameは型名／型関数名では**ない**ので注意
 * 型名／型関数名は、refの値である。
 *
 */
type TypeRef = @type-ref (TypeQualifierMixin & {
  /** 参照先の名前
   * 束縛コンテキストのキーである。
   */
  "ref" : string,
  /** カインド */
  "kind" : Kind?,
  /** 名前が型関数であるときは、パラメータのカインドリスト
   *
   * paramKindsが未定義なら、参照先は型であり、
   * paramKindsが定義されているなら、参照先は型関数である。
   */
  "paramKinds" : [Kind*]?,

   *: any?
});
}>>

=== 型表現

型表現（type expression）は、次のように帰納的に構成される。

# 型定数（type constant）は型表現である。
# 型名＝型変数（type name, type variable）は型表現である。Catyでは、型名と型関数名をまとめて型参照と呼ぶ。
# 型表現を型パラメータ（type parameter）でラムダ抽象（lambda abstraction）した式は型関数（無名型関数）でもある。
# 型関数（type function）に型引数（type arguments）を渡した式（適用とも呼ぶ）は型表現である。

組み込み型関数（builtin type function）を、
その使用目的により、型構成子（type constructor）、型演算（type operator）とも呼ぶ。
ただし、型関数／型構成子／型演算の区別は習慣的なもので、分類の理論的な根拠はない。
例えば、タグ付き型の'@'は型演算記号とみなすこともできる。
したがって、型関数／型構成子／型演算の区別に**拘るのはナンセンス**である。


型構成子：

# 配列型構成子
# オブジェクト型構成子
# タグ付き型構成子

型演算：

# ユニオン型演算（演算記号 '|'）
# インターセクション型演算（演算記号 '&'）
# オプショナル型演算（演算記号 '?'）
# マージ型演算（演算記号 '++'）

ユーザーにより定義された型関数は名前を持つ。
ラムダ計算では、「変数と名前」は区別しない。文脈により、変数は束縛変数と自由変数に分類される。
あるスコープにおける自由変数が、それより外側の環境内で定義を持つとき、それを名前と呼ぶ。

参照（TypeRef）は、「型定数の名前」にも「型関数の名前」にも使える。
構文上は、「型定数の名前」と「型関数の名前」を区別しない。

<<{
/** 型定数（type constant）
 * 基本型のことである。
 * 引数が0個の型関数とみなしてもよい。
 * ただし、明示的に空引数を付けることはしない。
 */
type TypeConst = BasicType;

/** 型抽象（type abstraction）
 * 型パラメータ列によるラムダ抽象により得られた形式
 * nameがあれば名前付き型関数、
 * nameがなければ無名型関数を表現する。
 * 空なパラメータリストも認める（意味的には型定数となる）。
 */
type TypeAbst = @type (TypeQualifierMixin & { //@ 旧 TypeTerm
  /** 束縛に使う型パラメータリスト＝ラムダリスト */
  "params": [TypeParam*],
  /** 束縛され、ラムダ抽象される型表現 */
  "expr": TypeExpr, 

  *: any? // open
});


/** 型パラメータ（型関数の仮引数） 
 * 型パラメータは、型表現内の参照を束縛する
 * 束縛は、型パラメータのnameと参照のrefが文字列として一致するときに発生する。
 */
type TypeParam = @param {
    "document" : Doc?,
    "annotations" : object?,

    "name": string,
    "kind": Kind?,
    "default": TypeSpec?, // TypeSpecは暫定

};


/** 型関数
 * 組み込み型関数は型構成子、型演算として別に扱うので、
 * 型関数は型抽象かユーザー定義の型関数名を意味する。
 * パラメータ付き型、総称型などとも呼ばれる。
 */
type TypeFunc = (TypeAbst | TypeRef);

/** 適用
 * 型関数に型引数（type arguments）を渡した形を適用と呼ぶ。
 * 適用も型（型表現）の一種である。
 * 適用形式は、ベータ変換の対象となる。
 */
type AppliedType = @apply {
 "func" : TypeFunc,
 "args" : [TypeExpr*]
};

/** 型の名前、これだけは特別扱い 
 * 型の名前（文字列）を特別扱いしているが、これはたぶん避けられない
 */
type catyTypeName = string(remark="型の名前");

/** 型のテキスト表現
 * 暫定的に使う
 */
type catyTypeText = string(remark="型のテキスト表現");

/** 型の仕様（テキストを許す）
 */
type TypeSpec = catyTypeText|TypeExpr;


/** 型表現 - 各種型表現のユニオン
 */
type TypeExpr = (
  TypeConst // 組み込み型、シングルトン型
| TypeRef // 型変数＝型名、型関数名
| TypeAbst // 型のラムダ抽象
| AppliedType // 引数を渡された型

// 以下、型構成子により構成される型
| ObjectType
| ArrayType
| TaggedType

// 以下、型演算により構成される型
| UnionType // '|'演算
| OptionalType // '?'演算
| IntersectionType// '&'演算
| MergedType // '++'演算
| OpenType // 'open'演算
| CloseType // 'close'演算
| ExtractType // 'extract'演算

// 特殊な構成法で作られる型、PER（or settoid）として解釈する
| BagType

);
}>>

=== 複合的な型


<<{
// object, array, taggedは、直積型の3つのバリアントである。
// objectは名前付きタプル、arrayは名前なし（番号）タプルによる直積
// tagged型は、文字列（＝タグ名）との直積となる
}>>


=== 型関数

<<{
/** オブジェクト型を構成する型関数
 * オブジェクト型は名前付きタプルの型
 */
type ObjectTypeOf<PropType, AdditionalType> = @object-of (TypeQualifierMixin & {
  "pseudoTag": RPseudoTag?, //@ 塩漬け

  "specified": {*: PropType}, 
  "additional": AdditionalType,

  *: any? // open
});

/** 配列型を構成する型関数
 * 配列型は、名前なしタプルの型
 */
type ArrayTypeOf<ItemType, AdditionalType> = @array-of (TypeQualifierMixin & {

  "specified": [ItemType*], 
  "additional": AdditionalType,

  *: any? // open
});

/** タグの型 */
type Tag = string;

/** タグ付き型を構成する型関数 */
type TaggedTypeOf<ContentType> = @tagged (TypeQualifierMixin & {

  // プロパティ名は、仮想プロパティにあわせる。

  "tag": Tag,
  "content": ContentType,

  *: any? // open
});

/** undefined型
 * 型定数 
 */
type UndefinedType = BuiltinTypeOf<"undefined">;

/** 排他的ユニオン型を構成する型関数 */
type UnionTypeOf<ChoiceType, AdditionalType> = @union (TypeQualifierMixin & {

  "specified": [ChoiceType*], // 条件： 互いに排他的な型
  "additional": AdditionalType, // その他

   *: any? // open
});

/** 閉じたユニオン型の型関数 */
type ClosedUnionTypeOf<ChoiceType> = UnionTypeOf<ChoiceType, UndefinedType>;



}>>


<<{
/** オブジェクト型
 * 名前付きタプルの型
 */
type ObjectType = ObjectTypeOf<TypeExpr, TypeExpr>;


/*
@object-of (TypeQualifierMixin & {
  "pseudoTag": RPseudoTag?, //@ 塩漬け

  "specified": {*: TypeExpr}, 
  "additional": TypeExpr,

  *: any? // open
});
*/

/** 配列型
 * 具体的な型
 */
type ArrayType = ArrayTypeOf<TypeExpr, TypeExpr>;



/** タグ付き型 */
type TaggedType = @tagged (TypeQualifierMixin & {

  // プロパティ名は、仮想プロパティにあわせる。

  "tag": Tag,
  "content": TypeExpr,

  *: any? // open
});


// 型演算



/** 排他的ユニオン型 */
type UnionType = UnionTypeOf<TypeExpr, TypeExpr>;

/*
@union (TypeQualifierMixin & {

  "specified": [TypeExpr*], // 互いに排他的な型
  "additional": TypeExpr, // その他

   *: any? // open
});
*/


/** オプショナル型 */
type OptionalType = @optional (TypeQualifierMixin & {
  "operand": TypeExpr,

   *: any? // open
});

/** インターセクション型 */
type IntersectionType = @intersection (TypeQualifierMixin & {
  "operands": [TypeExpr*],

   *: any? // open
});

/** マージされた型 */
type MergedType = @merge (TypeQualifierMixin & {
  "operands": [TypeExpr*],

   *: any? // open
});


// bag型は特殊

/** バッグ型の項目（の型） */
type BagItem = @bag-item (TypeQualifierMixin & {
 "minOccurs" : integer,
 "maxOccurs" : (integer | "unbounded"),
 "type" : TypeExpr,
  *: any?
});

/** バッグ型 
 * バッグ型は集合としては配列型と同じであることに注意。
 */
type BagType = @bag (TypeQualifierMixin & {
  "items": [BagItem*],

   *: any? // open
});

/** open演算 */
type OpenType = @open {"operand": TypeExpr};

/** close演算 */
type CloseType = @close {"operand": TypeExpr};

/** extract演算 */
type ExtractType = @extract {"operands": {"path": string, "expr": TypeExpr}};


//@ 以下は塩漬け

type RPseudoTag = @_pseudoTag ([string, any] | [null, null]); //@ 塩漬け


// type ReifiedKind = deferred @kind object;  //@ 塩漬け
}>>

=== 型let式


<<{

/** 型let式 
 * let式とletrec式を区別せずに、どちらも一律にlet式と呼ぶ。
 */

type LetExpr = @type-let (TypeQualifierMixin & {

  "bindings": {*: (TypeExpr | LetExpr)?},
  "expr": TypeExpr,

  *: any?
});

}>>
