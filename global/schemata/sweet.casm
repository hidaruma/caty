/* -*- coding: utf-8 -*- */
/** Sweetな型表現の型
 *
 */
module sweet;

type Doc = treif:Doc;

type TypeQualifierPart = {"document": Doc?, "name": string?};
type TypeQualifierMixin = open TypeQualifierPart;

/** 入力に使用するUIの種類 */
type ui = (specialUi | textFieldUi | numberFieldUi | optionUi | groupUi );

type specialUi = (
 /** 検索ボックス */
   "search" |
 /** ファイルアップロード */
   "file" |
 /** 隠蔽 */
  "hidden" |
 /** リードオンリーフィールド */
  "readonly" |
);

/** テキスト入力 */
type textFieldUi = (
 /** 一般的な入力フィールド */
  "textfield" | 
 /** テキストエリア */
  "textarea" | 
);

/** 数値入力 */
type numberFieldUi = (
  "numberfield" | 
  "range" |
);

/** 一般的な入力フィールド */
type fieldUi = (textFieldUi | numberFieldUi);

type optionUi = (
 /** ラジオボタン */
  "radio" | 
 /** チェックボックス */
  "checkbox" | 
 /** メニューのオプション */
  "option" |
 /** グループからの継承 */
  "implied" |
);

type groupUi = (
 /** ラジオボタングループ */
  "radio-group" | 
 /** チェックボックスグループ */
  "checkbox-group" | 
 /** 選択メニュー */
  "select" |
);

type ScalarAttributes = treif:ScalarAttributes;
type ObjectAttributes = treif:ObjectAttributes;
type ArrayAttributes = treif:ArrayAttributes;

/** sweet型システム特有のスキーマ属性 
 */
@[system]
type SweetAttributes = {
 /** UI上で使うラベル文字列 */
 "label": string?,
 /** 入力コントロール（ウィジェット）の種類 */
 "ui" : ui?,
 /** HTML5のautofocus */
 "autofocus": boolean?,
 /** HTML5のplaceholder */
 "placeholder": string?,
 /** HTML5のdatalist（list属性） */
 "datalist": [(number|string)*]?,
 /** HTML5のautocomplete */
 @[default(false)]
 "autocomplete": boolean?,
};

@[system]
type SweetItemAttributes = {
 /** UI上で使うラベル文字列 */
 "label": string?,
 /** 入力コントロール（ウィジェット）の種類 */
 @[default("implied")]
 "ui" : optionUi?,

 @[default(false)]
 "selected": boolean?,
};

/** Sweetな組み込み型
 */
type sweetBuiltinTypeName = (
  "undefined" // データの不在を表す
| "null"
| "boolean" // やっぱり入れる
| "number"
| "string"   
| "binary" // fileアップロードで入力可能
| "integer" // numberの部分型

/* 構成と表現の都合で必要 */
| "any"
| "never"
);

/** Sweet組み込み型 
 */
type BuiltinType = treif:BuiltinTypeOf
<
  Attrs = (ScalarAttributes ++ SweetAttributes),
  Common = TypeQualifierPart,

  sweetBuiltinTypeName
>;

type NumberType = treif:BuiltinTypeOf
<
  Attrs = ScalarAttributes ++ SweetAttributes,
  Common = TypeQualifierPart,
 
  "number"
>;

type StringType = treif:BuiltinTypeOf
<
  Attrs = ScalarAttributes ++ SweetAttributes,
  Common = TypeQualifierPart,
 
  "string"
>;



/** 事前定義型 */
type PredefinedType = treif:PredefinedType;

/** シングルトン型 */
type SingletonType = treif:SingletonType; // 新シングルトンに変更する

/** 新 シングルトン型 */
type _SingletonType = (
   BooleanSingletonType
 | NumberSingletonType
 | StringSingletonType
 | BinarySingletonType
);

type BooleanSingletonType = treif:SingletonTypeOf
<
  Attrs=SweetItemAttributes, 
  Common=TypeQualifierMixin,
  boolean
>;

type NumberSingletonType = treif:SingletonTypeOf
<
  Attrs=SweetItemAttributes, 
  Common=TypeQualifierMixin,
  number
>;

type StringSingletonType = treif:SingletonTypeOf
<
  Attrs=SweetItemAttributes, 
  Common=TypeQualifierMixin,
  string
>;

type BinarySingletonType = treif:SingletonTypeOf
<
  Attrs=SweetItemAttributes, 
  Common=TypeQualifierMixin,
  binary
>;


/** Sweet基本型 
 */
type BasicType = (
  BuiltinType
| SingletonType
| PredefinedType
| EnumType
| MultiEnumType
);

/** オブジェクト型
 */
type ObjectType = treif:ObjectTypeOf
<
  Attrs = (ObjectAttributes ++ SweetAttributes),
  Common = TypeQualifierPart,

  TypeExpr, 
  TypeExpr,
>;

/** 配列型
 */
type ArrayType = treif:ArrayTypeOf
<
   Attrs = (ArrayAttributes ++ SweetAttributes),
   Common = TypeQualifierPart,

//  Attrs = SweetArrayAttributes, 
  TypeExpr,
  TypeExpr,
>;


type EnumTypeOf
<
 Attrs = AttrsType default SweetAttributes,
 Common = CommonComp default TypeQualifierMixin,
 TagType,
 ItemType,
>
= @(TagType) (close CommonComp ++ close AttrsType ++ {
 "items": [ItemType, ItemType, ItemType*]
});

type _EnumType = EnumTypeOf<"enum", EnumItem>;
type _MultiEnumType = EnumTypeOf<"multi-enum", MultiEnumItem>;

/** 列挙型 
 */
type EnumType = @enum [EnumItem, EnumItem, EnumItem*];

/** 列挙型の項目 */
type EnumItem = @item (open TypeQualifierPart & (open SweetAttributes) & {
  "value": (null | boolean | string | number),

  *: any?
});


/** 多値列挙型 
 */
type MultiEnumType = @multi-enum [MultiEnumItem, MultiEnumItem, MultiEnumItem*];

/** 多値列挙型の項目 */
type MultiEnumItem = @multi-item (open TypeQualifierPart & (open SweetAttributes) & {
  "value": (null | boolean | string | number),
  "minOccurs": integer(minimum=0),
  "maxOccurs": integer(minimum=1),

  *: any?
});

/** Sweetな型表現
 */
type TypeExpr = (BasicType | ObjectType | ArrayType);

command reify-type
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [string cdpath] :: void -> any/*TypeExpr //一時的にコメントアウト */
    refers python:sweet.ReifyType;

