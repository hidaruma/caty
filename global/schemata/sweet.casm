/* -*- coding: utf-8 -*- */
/** Sweetな型表現の型
 *
 */
module sweet;

type TypeQualifierMixin = (treif:TypeQualifierMixin & {"anno": undefined, *:any?});

/** 入力に使用するUIの種類 */
type ui = (
 /** 一般的な入力フィールド */
  "field" | 
 /** テキストエリア */
  "textarea" | 
 /** 検索ボックス */
   "search" |
 /** ファイルアップロード */
   "file" |
 /** ラジオボタングループ */
  "radio" | 
 /** チェックボックスグループ */
  "checkbox" | 
 /** 選択メニュー */
  "select" |
);

type ScalarAttributes = treif:ScalarAttributes;
type ObjectAttributes = treif:ObjectAttributes;
type ArrayAttributes = treif:ArrayAttributes;

/** sweet型システム特有のスキーマ属性 
 */
type SweetAttributes = {
 /** UI上で使うラベル文字列 */
 "label": string?,
 /** 入力コントロール（ウィジェット）の種類 */
 "ui" : ui?,
 /** HTML5のautofocus */
 "autofocus": boolean?,
 /** HTML5のplaceholder */
 "placeholder": string?,
 /** HTML5のdatalist（list属性） */
 "datalist": [scalar*]?,
};


/** Sweetな組み込み型
 */
type sweetBuiltinTypeName = (
  "undefined"
| "null"
| "boolean"
| "number"
| "string"   
| "binary"   
| "integer" // numberの部分型

/* 構成と表現の都合で必要 */
| "any"
| "never"
);

/** Sweet組み込み型 
 */
type BuiltinType = treif:BuiltinTypeOf<sweetBuiltinTypeName, ScalarAttributes ++ SweetAttributes>;

/** 事前定義型 */
type PredefinedType = treif:PredefinedType;

/** シングルトン型 */
type SingletonType = treif:SingletonType;


/** Sweet基本型 
 */
type BasicType = (
  BuiltinType
| SingletonType
| PredefinedType
| EnumType
| MultiEnumType
);

/** オブジェクト型
 */
type ObjectType = treif:ObjectTypeOf<TypeExpr, TypeExpr, /*ObjectAttributes ++ SweetAttributes */>;


/** 配列型を構成する型関数
 */
type ArrayTypeOf
<
// オプショナルパラメータ

 /** スキーマ属性の型 */ 
 Attrs = AttrsType default ArrayAttributes,

 /** 共通のミクシンの型 */
 Common = CommonMixin default TypeQualifierMixin,

// 必須パラメータ

 /** 配列項目の型 */
 ItemType, 

 /** 追加部分（ワイルドカード）の型 */
 AdditionalType,
> = 
@array-of (CommonMixin & open AttrsType & {

  "specified": [ItemType*], 
  "additional": AdditionalType,

  *: any?
});

type SweetArrayAttributes = (ArrayAttributes ++ SweetAttributes);


/** 配列型
 */
type ArrayType = ArrayTypeOf
<
//  Attrs = (ArrayAttributes ++ SweetAttributes), // @@@これはダメ
//  Attrs = SweetArrayAttributes, // @@@これもダメ
  TypeExpr,
  TypeExpr
>;

/** 列挙型 
 */
type EnumType = @enum [EnumItem, EnumItem, EnumItem*];

/** 列挙型の項目 */
type EnumItem = @item (TypeQualifierMixin & (open SweetAttributes) & {
  "value": (null | boolean | string | number),
//  "label": string?,

  "attributes": undefined, // 廃止予定
  *: any?
});


/** 多値列挙型 
 */
type MultiEnumType = @multi-enum [MultiEnumItem, MultiEnumItem, MultiEnumItem*];

/** 多値列挙型の項目 */
type MultiEnumItem = @multi-item (TypeQualifierMixin & (open SweetAttributes) & {
  "value": (null | boolean | string | number),
  "minOccurs": integer(minimum=0),
  "maxOccurs": integer(minimum=1),
//  "label": string?,

  "attributes": undefined, // 廃止予定
  *: any?
});

/** Sweetな型表現
 */
type TypeExpr = (BasicType | ObjectType | ArrayType);

command reify-type
  {
    /** 指定されたシステム要素が存在しないときはundefinedを返すか */
    @[default(false)]
    "safe": boolean?,
  }
  [string cdpath] :: void -> TypeExpr
    refers python:sweet.ReifyType;

