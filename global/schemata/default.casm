@[register-public]
module default; // -*- coding: utf-8 -*-

/** アプリケーションの名前一覧 */
command app-names :: void -> void {
  // print app names
  apps | each { pv name} | list:sort | each{ cout } | void
};


/** 環境変数の名前一覧 */
command env-names :: void -> void {
  env | properties | list:sort | each { cout } | void
};

/** 実行環境をダンプする */
command dump-closure {* : any?} [any* args] 
:: any -> {"opts":object, "arg0":any, "args":array, "input": any?, "env": object}
{
 {
   "opts" : %_OPTS,
   "arg0"  : %_ARGV | item 0,
   "args"  : %_ARGV | list:slice 1,
   "input"  : pass, 
   "env" : env,
 }
};


/** パラメータをダンプする */
command params {* : univ?} [univ* args] :: void -> {"Opts (_OPTS)":object, "Argv (_ARGV)":array, "Arg0":any, "Args":array}
{
 {
   "Opts (_OPTS)" : %_OPTS,
   "Argv (_ARGV)" : %_ARGV,
   "Arg0"  : %_ARGV | item 0,
   "Args"  : %_ARGV | list:slice 1,
 }
};

/** 入力にタグを加えて出力とする */
command add-tag [string tag] :: any -> @* any {
  [%1 , pass] | tagged
};


/** 画面をクリア */
command cls :: void -> void
    refers python:cls.Clear;


/** 画面をクリア */
// command cls :: void -> void {x:cmd cls | void}; // win32clsが壊れたので一時的にOSコマンドを使う */

/** モジュールの描画表示 */
command showmo [string moduleName] :: void -> void {
  viva:draw --font="MS UI Gothic" %1 | ct:show-image | void
};

/** モジュール状態の描画表示 */
command showst [string moduleName] :: void -> void {
  viva:draw --node=state --font="MS UI Gothic" %1 | ct:show-image | void
};

/** モジュールアクションの描画表示 */
command showac [string moduleName ] :: void -> void {
  viva:draw --node=action --font="MS UI Gothic" %1 | ct:show-image | void
};

/** モジュールユーザーロールの描画表示 */
command showur [string moduleName] :: void -> void {
  viva:draw --node=userrole --font="MS UI Gothic" %1 | ct:show-image | void
};

/** アクションの描画表示 */
command show-action [string actionName] :: void -> void {
  viva:draw-action --font="MS UI Gothic" %1 | ct:show-image | void
};

command gv-view :: gv:Digraph -> void {
  gv:draw --font="MS UI Gothic" | ct:show-image | void
};

/** Application name with group */
command apg :: void -> string {
 app | dump --prefix="app" > app;
 [ %app | $.group, "/" , %app | $.name ] | dump --prefix="arr" | text:concat | dump --prefix="text"
};

/** アプリケーションのグルーピングと依存関係をグラフにする */
command app-graph :: void -> gv:Digraph
{
 "g:" > GROUP_PREFIX;

 apps | each {[pv group, pv name]} | xlist:group > groups |
 each {
  pass > group-name | [%GROUP_PREFIX, pass] | text:concat > group-id;
  %groups | pv %group-name |
  each {
    item 1 > app-name;
    [
      gv:node --style="filled" --fillcolor=limegreen %app-name,
      // global以外のアプリケーションには、
      // globalへのusesエッジを加える
      [%app-name, null] | tagged |
      when {
       global => undefined,
       *      => gv:edge --color=blue --label=uses %app-name global,
      }
    ]
  } | xlist:flatten | gv:cluster --style="filled, rounded" --fillcolor=khaki /*--label=%group-name*/ %group-id
 } | gv:graph --label=applications --bgcolor=gainsboro --rankdir=BT
};


/** grepコマンド：文字列リストから正規表現マッチした項目を抜き出す */
command grep 
 {
   /** 行番号を付けるか */
   @[default(false)]
   "line-no" : boolean?,
 }
 [string pattern] 
:: [string*] -> [string*]
{
 pass > in;

 %line-no? | 
 case {
  (undefined|false) => 
    %in | take {text:regmatch %1}
    ,
  true =>
   %in |
   each {
    text:regmatch %1 |
    when {
     OK => [%_key | to-string, " :", pv src] | text:concat,
     NG => undefined,
    }
   } | list:tighten
   ,
 }
};

/** ファイルをgrepする */
command file-grep 
 {
   /** 行番号を付けるか */
   @[default(false)]
   "line-no" : boolean?,
 }
 [string pattern, string filename] 
:: void -> [string*]
{
  file:read %2 | text:split "\n" | grep %--line-no? %1
};

/** 拡張子からメディア型を求める */
command ext-content-type [string ext] :: void -> (null | string)
{
  %1 > ext;

  filetype | pv --safe %ext |
  when {
   undefined => null,
   object    => pv contentType,
  }
};

/** クラスモニカー
 * 今（2012-05-254）こんなんを考えている
 */
type ClassMoniker<Cls default string, Instance default foreign> = @__classMoniker {
  "$class" : Cls,
  "$instance" : Instance
};


/** クラスモニカーを作る 
 */
command class-moniker [string clsName] :: foreign -> ClassMoniker<string, foreign> {
  @__classMoniker {
    "$class" : %1,
    "$instance" : pass
  }
};

/** メソッドを呼び出す、ただしパラメータを渡せない */
command call-method [string cls, foreign instance, string name] :: univ -> univ {
 pass > in; // 標準入力を保存
 %1 > cls;
 %2 > instance;
 %3 > name;

 [%cls, ".", %name] | text:concat > fullname;
 %in | call %fullname %instance
};

/** モニカーを使ってメソッドを呼び出す、ただしパラメータを渡せない */
command call-moniker [ClassMoniker moniker, string name] :: univ -> univ {
 pass > in; // 標準入力を保存
 %1 | pv "$class"    > cls;
 %1 | pv "$instance" > instance;
 

 [%cls, ".", %name] | text:concat > fullname;
 %in | call %fullname %instance
};

/** アプリケーションのモジュールをリストする */
command mods [string? app] :: void -> [reif:ModuleSummary*] {
  sreif:list-modules %1?
};

/** アプリケーションのcaraモジュールをリストする */
command caras [string? app] :: void -> [inspect:Module*] {
  mods | take {[pv syntax, "cara"] | eq}
};

/** オブジェクトのリストがあるとき、そのオブジェクト達の名前のリストを出力する */
command names :: [(@* object)*] -> [string*] {
 each {$.name}
};

command which [string cmdName] :: void -> string {
 inspect:where-is %1
};

command narrow [string* args] :: object -> object
 refers python:util.Narrow;

/** select-actionの別名 */
command lookup-action
    {
        "fullpath": boolean?,
        "exception": boolean?,
        "verb": string?,
        "check": boolean?,
        "method": ("GET" | "POST" | "PUT" | "DELETE" | "HEAD")?,
        *: never?
    }
    [string path] 
:: void ->  (string | false) 
{
  select-action %--fullpath %--exception %--verb %--check %--method %1
};


/** sreif:show-resource の別名 */
command res [string res] :: void -> reif:ResourceSummary? {
  sreif:show-resource --safe %1
};

/** sreif:list-resources の別名 */
command ress [string mod] :: void -> [reif:ResourceSummary*]? {
  sreif:list-resources --safe %1
};

/** sreif:show-state の別名 */
command stt [string stt] :: void -> reif:StateSummary? {
  sreif:show-state --safe %1
};

/** sreif:list-states の別名 */
command stts [string mod] :: void -> [reif:StateSummary*]? {
  sreif:list-states --safe %1
};

/** sreif:show-action の別名 */
command act [string act] :: void -> reif:ActionSummary? {
  sreif:show-action --safe %1
};

/** sreif:list-actions の別名 */
command acts [string mod] :: void -> [reif:ActionSummary*]? {
  sreif:list-actions --safe %1
};

