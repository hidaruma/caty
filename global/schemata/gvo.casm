// -*- coding: utf-8 -*-
/** Graphviz interface for Olog */
module gvo;

/** 背景色 */
const BGCOLOR :: string = "white";

/** olog */
command olog [string name, string? text] :: (null | gv:Node | gv:Edge | gv:Cluster| array) -> gv:Digraph
{
  pass > in;
  [
    %1 > name,
    %2?="" > text,
  ];
  [%text, " (", %name, ")"] | text:concat > label;
  %in | gv:graph --label=%label %name
};

/** ologのタイプを表すボックスノード（圏の対象） */
command t-box [string id, string? text] :: void -> gv:Node 
{
  [
    %1 > id,
    %2?="" > text,
  ];
  [%text, " (", %id, ")"] | text:concat > label;
  gv:node --shape=box --label=%label %id
};

/** ologのアスペクトを表すアロー（圏の射） */
command a-arrow 
{
   @[default(false), without("incl")]
   "total": boolean?,

   @[default(false), without("incl")]
   "inj": boolean?,

   @[default(false)]
   "surj": boolean?,

   @[default(false), without("incl")]
   "multi": boolean?,

   @[default(false), without("multi"), without("inj"), without("total")]
   "incl": boolean?,

   @[default(false)]
   "induced": boolean?,

 }
 [string name, string from, string to, string? text] :: void -> gv:Edge
{
  %incl  | case {true=>"obox",  false=>""} > tail0;
  %total | case {true=>"tee",  false=>""} > tail1;
  %inj   | case {true=>"inv",  false=>""} > tail2;
  %surj  | case {true=>"tee",  false=>""} > head1;
  %multi | case {true=>"crow", false=>"normal"} > head2;
  [%tail0, %tail1, %tail2] | text:concat | cond{""=>"none", *=>pass} > tail;
  [%head1, %head2] | text:concat > head;

  [
    %1 > name,
    %2 > from,
    %3 > to,
    %4?="" > text,
  ];

  %induced | case {true=>"dashed", false=>undefined} > style;

  [%text, " (", %name, ")"] | text:concat > label;

  gv:edge --style=%style? --dir=both --arrowtail=%tail --arrowhead=%head --label=%label %from %to
};

/** ologの制約 */
command constr :: (null | gv:Node | gv:Edge | gv:Cluster| array) -> gv:Cluster 
{
  gv:cluster --color=gray --style=rounded
};

/** ologのパス同値等式 */
command p-eq [string id, string left, string right] :: void -> gv:Node
{
  [
    %1 > id,
    %2 > left,
    %3 > right,
  ];
  BGCOLOR > bgcolor;
  [%left, " = ", %right, " (", %id, ")"] | text:concat > label;
  gv:node --shape=box --label=%label --color=%bgcolor %id
};

// End of Module
