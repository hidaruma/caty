// -*- coding: utf-8 -*-

/**
 * 
 * HTTPのリダイレクトとエラー 
 *
 */
module ht;

/** 例外： HTTPエラー 
 */
exception HttpError = {
  "status": integer(minimum=400, maximum=599),
  "pathInfo": string?,
  "appPath": string?,
  "method": httpMethod?,

  *: any?
};

/** HTTPリダイレクトを指示するシグナルデータ 
 */
@[register-public]
type HttpRedirect = @& {
 "status": integer(minimum=300, maximum=399),
 "location": uri,
 *: any?
};

/** HTTPリダイレクトのステータスコード（番号または名前）
 */
type httpRedirectStatus = (
 /** 301 Moved Permanently */
 301 | "moved-permanently" |

 /** 302 Found */
 302 | "found" |

 /** 303 See Other */
 303 | "see-other" |

 /** 307 Temporary Redirect */
 307 | "temporary-redirect" |
);

/** HTTPエラーのステータスコード（番号または名前）
 */
type httpErrorStatus = (
 /** 400 Bad Request */
 400 | "bad-request" |

 /* 403 Forbidden */
 403 | "forbidden" |

 /** 405 Method Not Allowed */
 405 | "method-not-allowed" |

 /** 404 Not Found */
 404 | "not-found" |
);

/** HTTPリダイレクトをシグナルで伝える
 */
@[register-public]
command http-redirect 
 {
   "status": httpRedirectStatus?,
 }
 [string target] 
 :: void -> never signals HttpRedirect
{
 %1 > target;
 %target | text:regmatch "/" |
 when {
   OK => pv src,
   NG => pass | action-name-to-url
 } > url;
 
 %status? |
 when {
   undefined => 302,
   number    => pass,
   string    => status-name-to-number
 } > sts;
 
 {"status": %sts, "location": %url} | signal
 
};

/** HTTPエラーを例外で伝える
 */
@[register-public]
command http-error
 {
   "status": httpErrorStatus?,
 }
 [string? msg]
 :: void -> never throws HttpError
{
 %status? |
 when {
   undefined => 500,
   number    => pass,
   string    => status-name-to-number
 } > sts;

 %1? |
 when {
   undefined => %sts | status-number-to-name,
   string  => pass,
 } > msg;

 @HttpError {
  "status": %sts,
  "pathInfo": %PATH_INFO,
  "appPath": %APP_PATH,
  "method": %REQUEST_METHOD?,
  "message": %msg,
 } | throw
};

/** アクション名をURLに変換する
*
* いずれ、ポートにも対応する必要が生じる。
* ポートの場合は、バインディング先の情報をAPIで取得する必要がある。
*/
command action-name-to-url :: string -> uri {
 pass > act;
 sreif:show-action %act | $.pathPattern  > patts;
 [%patts | list:length, 1] | eq |
 when {
   False => make-exception BadInput "pathPattern too long" | throw,
   True => %patts | nth 1 > patt,
 };
 %patt | text:regmatch "\\*" |
 when {
   OK => make-exception BadInput "pathPattern has a wildcard" | throw,
   NG => void,
 };
 
 [%HOST_URL, %APP_PATH, %patt] | text:concat
};

/** ステータス名からステータス番号への対応表
 */
const _status-name-to-number = {
    "ok": 200,
    "created": 201,
    "moved-permanently": 301,
    "found": 302,
    "see-other": 303,
    "temporary-redirect": 307,
    "bad-request": 400,
    "forbidden": 403,
    "not-found": 404,
    "method-not-allowed": 405,
    "internal-server-error": 500,
    "not-implemented": 501,
    "service-unavailable": 503,
};


/** ステータス番号からステータス名への対応表
 */
const _status-number-to-name = [
  /* 0 */
  [],

  /* 100 */
  [],

  /* 200 */
  [
    /* 200 OK */
    "ok",
    /* 201 Created */
    "created",
  ],

  /* 300 */
  [
    /* 301 Moved Permanently */
    "moved-permanently",
    /* 302 Found */
    "found",
    /* 303 See Other */
    "see-other",
    /* 304 */
    ,
    /* 305 */
    ,
    /* 306 */
    ,
    /* 307 Temporary Redirect */
    "temporary-redirect",
  ],

  /* 400 */
  [
    /* 400 Bad Request */
    "bad-request",
    /* 401 */
    ,
    /* 402 */
    ,
    /* 403 Forbidden */
    "forbidden",
    /* 404 Not Found */
    "not-found",
    /* 405 Method Not Allowed */
    "method-not-allowed",

  ],

  /* 500 */
  [
    /* 500 Internal Server Error */
    "internal-server-error",
    /* 501 Not Implemented */
    "not-implemented",
    /* 502 */
    ,
    /* 503 Service Unavailable */
    "service-unavailable",
  ],
];

/** ステータス番号からステータス名へ変換する
 */
command status-number-to-name :: integer(minimum=0, maximum=599) -> string? 
{
 [pass, 100] | [num:div --integer > x, num:mod > y];

 _status-number-to-name | item %x | item --safe %y
};

/** ステータス名からステータス番号へ変換する
 */
command status-name-to-number :: string -> integer(minimum=0, maximum=599)?
{
  pass > nm;

  _status-name-to-number | pv --safe %nm
};

// End of Module
