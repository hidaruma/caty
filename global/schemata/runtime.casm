// -*- coding: utf-8 -*-

/**
 * ランタイムの情報を取得するためのAPI
 * Catyシステムコアとアプリケーションの内部データにアクセスする。
 */
module runtime; 

/** クラスモニカー
 * 今（2012-05-254）こんなんを考えている
 */
type ClassMoniker<Cls default string, Instance default foreign> = @__classMoniker {
  "$class" : Cls,
  "$instance" : Instance
};

/** クラスモニカーを作る 
 */
command class-moniker [string clsName] :: foreign -> ClassMoniker<string, foreign> {
  @__classMoniker {
    "$class" : %1,
    "$instance" : pass
  }
};


/* == 定数 == */

/** SysInstanceクラス名の文字列 */
const SysInstanceCLASS :: string = "runtime:SysInstance";

/** AppInstanceクラス名の文字列 */
const AppInstanceCLASS :: string = "runtime:AppInstance";


/* == システム == */

/** 生のシステムインスタンス */
type _SysInstance = foreign;

/** システムインスタンスのモニカー */
type SysInstance = ClassMoniker<SysInstanceCLASS, _SysInstance>;


/** 
 * Catyのランタイムシステムを表現するシングルトンオブジェクト 
 */
@[class-spec-for("python:caty.core.system.SystemWrapper")]
class SysInstance (_SysInstance) {

 /** プロジェクトが配置されたディレクトリのOSパス
  * locationコマンドで得られる情報と同じ
  */
 @[reader]
 command location :: void -> string
 ;

 /** プロジェクトの名前
  * projコマンドで得られる情報と同じ
  */
 @[reader]
 command name :: void -> string
 ;

 /** アプリケーションの列挙
  * appsコマンドで得られる情報と同じ
  */
 @[reader]
 command list-apps :: void -> [AppInfo*]
 ;

 /** アプリケーション名の列挙
  * 
  */
 @[reader]
 command list-app-names :: void -> [string*]
 ;

 /** 指定した名前のアプリケーションオブジェクトを得る
  * その名前のアプリケーションがないときは null を返す。
  */
 @[reader]
 command gett-app [string name] :: void -> _AppInstance | null
 ;



};


/* == アプリケーション == */


/** 生のアプリケーションインスタンス */
type _AppInstance = foreign;

/** アプリケーションインスタンスのモニカー */
type AppInstance = ClassMoniker<AppInstanceCLASS, _AppInstance>;


/**
 * Catyのアプリケーションを表現するオブジェクト
 */
@[class-spec-for("python:caty.core.application.ApplicationWrapper")]
class AppInstance (_AppInstance) {

 /** 親のアプリケーションを取得する 
  * ルートアプリケーションの場合は親がないので null が返る。
  */
 @[reader]
 command parent :: void -> _AppInstance | null
 ;

 /** システムインスタンスを取得する */
 @[reader]
 command system :: void -> _SysInstance
 ;

 /** プリケーションが配置されたディレクトリのOSパス
  */
 @[reader]
 command location :: void -> string
 ;

 /** アプリケーションの情報オブジェクトを返す
  * appコマンドの出力と同じ
  */
 @[reader]
 command info :: void -> AppInfo
 ;

 /** プレースの割り当てオブジェクトを返す
  */
 @[reader]
 command assign :: void -> {*: string?}
 ;

};

/* == コマンド == */


/** 生のシステムインスタンスを返す
 */
command _sys-instance :: void -> _SysInstance
    refers python:runtime.SysInstance;


/** システムインスタンスのモニカーを返す
 */
command sys-instance :: void -> SysInstance {
 SysInstanceCLASS > cls;

 _sys-instance | class-moniker %cls
};

/** 生のアプリケーションインスタンスを返す
 * 引数が指定されなかったときは、カレントのアプリケーションが指定されたとみなす。
 */
command _app-instance [string? name] :: void -> _AppInstance
    refers python:runtime.AppInstance;

/** アプリケーションインスタンスのモニカーを返す
 * 引数が指定されなかったときは、カレントのアプリケーションが指定されたとみなす。
 */
command app-instance [string? name] :: void -> AppInstance {
 AppInstanceCLASS > cls;

 _app-instance %1? | class-moniker %cls
};

/** 実行可能なコマンドクロージャ
 */ 
type Executable = {

/* 実行すべきコマンドの指定 */

  /** アプリケーション名 
   * コマンドは、このアプリケーションのアンビエントで実行される。
   */
  @[default("this")]
  "app" : string?,

  /** パッケージ修飾とクラス修飾を許すコマンド名、またはファイルパス
   * ファイルパスが指定された場合は、そのファイル内容をボディとする無名コマンドとして
   * 実行する。
   */
  "callable" : string,

  /** 型引数リスト 
   * callableがコマンド名であり、それが総称コマンドの場合、
   * 型具体化に使う型引数を指定する。
   */
  "typeArgs" : [treif:TypeExpr*]?,

/* 環境変数の制御 */

  /** デフォルトの環境変数をどこから取るか 
   * 現在のフレームから取る（"frame"）か、
   * または、アプリケーションのトップレベル環境から取る（"app"）か。
   */
  @[default("frame")]
  "defaultEnv" : ("frame" | "app")?,

  /** デフォルト環境変数をクリアするか */
  @[default(false)]
  "clearEnv" : boolean?,

  /** セットする環境変数と値 */
  @[default({})]
  "setEnv" : object?,

  /** アンセットする環境変数 */
  @[default([])]
  "unsetEnv" : [string*]?,

/* 起動時に渡すデータ */

  /** 入力 */
  @[default(null)]
  "input" : any?,

  /** オプションパラメータ */
  @[default({})]
  "opts" : object?,

  /** arg0パラメータ */
  @[default(null)]
  "arg0" : univ?,

  /** 引数パラメータ */
  @[default([])]
  "args" : array?,

};



// End of Module
