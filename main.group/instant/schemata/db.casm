// -*- coding: utf-8 -*- 

module db;

class WebUtilMix<Rec> = 
   web-util:MagicGetMix< Rec > 
 & web-util:IndexMix
 & web-util:GenMix< Rec > 
;

/** コレクション参照型（実験的） 
 */
type reference<C> = @__r {
 "a": [integer],
 "t": typeName<C>, // targetName<C> が望ましいだろう。
};

/** モジュールのエミッター */
command emit-normal {"ft": string?} :: any -> WebOutput {
  pass > in;
  %ft?="json" | text:split "-" | =[pass > format, pass> pf];
  %format |
  cond {
    "json" => %in | xjson:to-json | json:response,

    "html" => %pf?="plain" | dump --prefix=pf |
              cond {
                 "plain" => %in | wrap-lib:to-plain-html %UUSERVER_URL | response --ext=html,
                 "jqm"   => %in | wrap-lib:to-jqm-html   %UUSERVER_URL | response --ext=html,
                  *      => "output format error" | json:response,
              }
              ,

    *      => "output format error" | json:response,
  }
};

class home = {
 command get [(null|number|string) id, string?] :: void -> any {
  {
    "title": "home",
    "content": "hello",
  }
 };
};

command home :: void -> Reference {
 make-ref db:home null
};

command collections :: void -> [string*] {
    sreif:list-classes db | take {$.anno | $.__collection? } | each {$.name}
};

/* 
 * == 参照の書き換え
 */

command rewrite-reference [string from, string to] :: any -> any {
 when {
  /* スカラー */
  null    => pass,
  boolean => pass,
  indef   => pass,
  number  => pass,
  string  => pass,
  binary  => pass,

  /* 複合型 */
  object  => each --obj {rewrite-reference %1 %2 },

  array   => each {rewrite-reference %1 %2},

  __r     => rr-reference %1 %2,

  /* その他のタグ付き */
  * ==> [tag, content | rewrite-reference %1 %2] | tagged
 }
};

command rr-reference  [string form, string to] :: object -> Reference {
  pass > in |
  [$.t, %1] | eq |
  when {
   True  => @__r (%in | ={"t": %2, *:pass}),
   False => @__r %in,
  }
};


/* 
 * == コレクションの定義 == 
 */


/**
 * ランチのコレクション
 *
 */
collection lunch of {
 "id": integer, // とりあえず、gen:sampleが空にしないように必須にしておく
 "dateTime": ex:datetime,
 "author": {
      "name": ex:personName,
      "link": reference<person>,
  },
 "next" : reference<lunch>?,
 "prev" : reference<lunch>?,
 "content": {
    "写真": [ex:photo, ex:photo*]?,
    "コメント" : ex:sentence?,
  },
  "detail": {
    "お店の地図": ex:photo,
    "詳しい感想": ex:parag?,
    "似たランチ一覧": [reference<lunch>, reference<lunch>*]?,
  }
};
class lunch &= WebUtilMix< recordType<lunch> >;


/**
 * 会社のコレクション
 *
 */
collection company of {
 "id": integer, // とりあえず、gen:sampleが空にしないように必須にしておく
 "会社名": string,
 "代表": reference<person>,
};
class company &= 
   web-util:MagicGetMix< recordType<company> >  
 & web-util:IndexMix
 & web-util:GenMix< recordType<company> > 
;

/**
 * 人物のコレクション
 *
 */
collection person of {
 "ID" : integer,  // とりあえず、gen:sampleが空にしないように必須にしておく
 "ハンドル": ex:something,
 "名前": {
     "名": ex:givenName,
     "性": ex:familyName,
  },
 "年齢": integer(minimum=20, maximum=30),
 "知り合い達": [reference<person>*], //(maxItems=5), // gen:sampleが見ない
 "会社":  reference<company>?,
 "ランチレポート": [reference<lunch>, reference<lunch>*]?,

} identified ID;
class person &= 
   web-util:MagicGetMix< recordType<person> > 
 & web-util:IndexMix
 & web-util:GenMix< recordType<person> > 
;

/*
 *==  fetchを使った事例 ==
 */

/** fetchを使った事例
 */
class personAlt = {

 command GET [integer id, string? path] :: void -> any {
   %1 > id;

   make-ref db:person %id | dump --prefix="reference:" |
   fetch --deref-depth=2 @=Flink {
     "ID": _,
     "名前":_,
     "知り合い達": [Flink*]?,
   } | rewrite-reference db:person db:personAlt
 };

};

/**
 * ランチのサマリー
 *
 */
class lunchSummary = {

 command GET [integer id, string? path] :: void -> any {
   make-ref db:lunch %1 %2? | dump --prefix="reference:" |
   fetch --deref-depth=1
   {
     "id": _,
     "author": _,
     "content": _,
     "detail": &?,
   }
 };

};

@[predefined]
type email = string(format="email");
@[predefined]
type tel = string(format="tel");
@[predefined]
type url = string(format="url");

type Form = {
  "name": string,
  "mail": email,
  "tel": tel?,
  "webPage": url?
};

