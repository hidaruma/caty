// -*- coding: utf-8 -*-

module hatena;



/*== はてなXML形式の定義 ==*/

type diaryElement = @diary {
 "": [ (string | dayElement)* ]
};

type dayElement = @day {
  "date": string?,
  "title": string?,

  "": [ (string|bodyElement|commentsElement)* ]
};
type dayContent = extract $.'' dayElement;

type bodyElement = @body {
  "": [ string* ]
};

type commentsElement = @comments {
  "": [ (string | commentElement)* ]
};
type commentsContent = extract $.'' commentsElement;

type commentElement = @comment {
  "": [ (string | bodyElement|usernameElement|timestampElement)* ]
};

type usernameElement = @username {
  "": [string*]
};

type timestampElement = @timestamp {
  "": [string*]
};

/*== JSON形式の定義 ==*/

type diary = [day*];

type dayMain = {
 "body": string,
 "comments": [comment, comment*]?,
};

type day = dayMain ++ {
 "id": integer?,
 "date": common:date,
 "title": string,
 "uri": string?,
 "sysTags": [string*]?,
};

type comment = {
 "commentBody": string,
 "username": string,
 "timestamp": string
};

/*== 処理コマンド ==*/

command process :: [ diaryElement ] -> diary {
 $.0 | process-diary
};

command process-diary :: diaryElement -> [day*] {
 $.'' > con;
 // %con : [ (string | dayElement)* ]

 %con |
 each {
  when {
    string => undefined,
    day ==> process-day,
  }
 } | list:tighten // 余分なテキストノードがあるので
};

command process-day :: dayElement -> day {
 [
   $.date?=""  > date,
   $.title?="" > title,
   $.'' |  process-day-content > con,
 ];
 %date | text:split - | text:concat > uri-d;
 ["http://d.hatena.ne.jp/m-hiyama/", %uri-d] | text:concat > uri;

 [
   {
    "date": %date,
    "title": %title,
    "uri": %uri,
   },
   %con
 ] | xjson:merge
};

command process-day-content :: dayContent -> dayMain {
 // [ (string|bodyElement|commentsElement)* ]
 each {
  when {
   string => undefined,
   body => ["body", $.''| text:concat],
   comments ==> ["comments", process-comments],
  }
 } | array-to-object 
};

command process-comments :: commentsElement -> [comment*] { 
 $.'' > con;
 // %con :  [ (string | commentElement)* ]

 %con |
 each {
  when {
    string => undefined,
    comment ==> process-comment
  } 
 } | list:tighten // 余分なテキストノードがあるので
};

command process-comment :: commentElement -> comment { 
 $.'' > con;
 // %con : [ (string | bodyElement|usernameElement|timestampElement)* ]

 %con |
 each {
  when {
    string => undefined,
    body => ["commentBody", $.''| text:concat],
    username => ["username", $.''| text:concat],
    timestamp => ["timestamp", $.''| text:concat],
  } 
 } | array-to-object
};


collection d of day identified id;
collection e of entry ;
collection tmp of day ;
collection t of {"id": integer?, *:any}; // 作業用
collection map of mapItem; // 実験用


/** XMLファイルからコレクションにデータをロードする */
command load /*[string file]*/ :: void -> void {
 d.delete-all;
 e.delete-all;
 //%1 > file;
 file:read /m-hiyama-memo.xml /*%file*/ | xjx:parse | process |
 each {
   d.insert %_key
 }
};

/** IDのリストで与えられたレコード群をtmpコレクションにコピーする */
command send {@[default(false)] "clear": boolean?}:: [integer*] -> void {
 pass > in;
 %clear |
 case {
  true  => tmp.delete-all,
  false => void,
 };
 %in |
 each {
   pass > k;
   d.get %k | tmp.put %k
 }
};

/** 一日のなかに含まれるエントリーのヘッドラインをリストする */
command ent-headlines :: day -> [string*] {
   $.body|text:split "\n" | 
   each {
     text:regmatch "^\\*[0-9]+\\*" |
     when {
       OK => $.src,
       NG => undefined,
     }
   } | list:tighten
};


/*

「はてな」は：

  * XML的にイリーガルな文字があっても検出しない。バイト列扱いなのだろう。

  * commentBodyに <br> はタグとして含まれる。
   しかし、< のHTMLエスケープがしてないときがある。
   &はどうなるかわからない。


*/

/*== エントリーの定義 ==*/

/** エントリー
 */
type entry = {
 /** dayのtitleをそのままコピー */
 "dayTitle": string,

 /** dayのdateをそのままコピー */
 "dayDate": string,

 /** エントリーのWeb上のURI */
 "uri": string?,

/*{{{
 /** dayレコードへの参照
  * 今は使わない。
  */
 "day": reference<d>?,

 /** このエントリーから参照している他の関連エントリー達 */
 @[can-generate]
 "refersTo": multiref<d>,

 /** このエントリーが参照されている他の関連エントリー達 */
 @[can-generate]
 "referedFrom": multiref<d>,

 /** このエントリーで使用している内部画像 */
 @[can-generate]
 "inImg": multiref<img>,

 /** このエントリーで使用している外部画像 */
 @[can-generate]
 "exImg": [Anchor*],

 /** キーワード */
 "keywords": [string*],

}}}*/

 /** エントリーのID、整数値
  * ヘッドラインに埋め込まれている時刻を使う。
  */
 "id": integer,

 /** 作成された時刻
  * エントリーIDとまったく同じ値、だが解釈は異なる。
  * IDを連番などに切り替える可能性があるので独立に持つ。
  */
 "created": integer,

 /** 分類タグ
  * ヘッドライン（大見出し）から抽出する 
  */
 "tags": [string*],

 /** システムが使う分類タグ
  */
 "sysTags": [string*]?,

 /** エントリータイトル
  * ヘッドライン（大見出し）のテキストのみ 
  */
 "title": string,

 /** 記事本文テキスト */
 "content": string,

};

/*== エントリーのテキスト構文 ==*/

syntax EOL = "\n" ;
syntax 空行 = EOL ;

syntax headline ::= lexcial '*' timestamp '*' tag* title EOL;
syntax timestamp = string(pattern = "[0-9p]+");
syntax tag = string(pattern = "\\[.+\\]");

syntax entryText ::= lexical headline 空行 内容 ;
syntax 内容 = string(remark="次のヘッドラインまたはストリーム終端までのテキスト") ;

syntax leadingText = string(remark="headlineにマッチしないテキスト行達");
syntax dayBody ::= lexical leadingText? entryText* ;


/*== コマンド ==*/

/** 一日分のデータに含まれるエントリーを抜き出す 
 */
command entries-from-day :: day -> [entry*]
    refers python:hatena.EntriesFromDay
;


/** 日（day）のデータからエントリー群を作り出す 
 */
command make-entries 
 {
  /** 先頭からスキップするレコードの個数 */
   @[default(0)]
  "skip": integer(minimum=0)?,
  /** リストするレコードの最大個数 */
  @[default("unbounded")]
  "max": (integer(minimum=0) | "unbounded")?,
 }
 :: void -> void
{
  d.list %--skip %--max | 
  each {
     pass > d | $.date > dt;
     %d |
     try --wall=superhard {
       hatena:entries-from-day | each {e.put}
     } | 
     catch {
      normal => void,
      except => ["Oops ", (%_key | to-string), " ", %dt, "\n\n", $.message ] | text:concat | cout; break
     }
  };
  "End" | cout
};

/*
 * == 実験用のゴチャゴチャ == 
 *
 */

command modify-entries 
 {
  /** 先頭からスキップするレコードの個数 */
   @[default(0)]
  "skip": integer(minimum=0)?,
  /** リストするレコードの最大個数 */
  @[default("unbounded")]
  "max": (integer(minimum=0) | "unbounded")?,
 }
 :: void -> void
{
 t.delete-all;
 e.list %--skip %--max |
 each {
  pass > in |
  [
     $.dayDate | text:split "-" | text:concat > date,
     $.id | to-string > ts,
  ];
  %in |
  ={
     "tags": text:join "|", 
     "uri": ["http://d.hatena.ne.jp/m-hiyama/", %date, "/", %ts] | text:concat,
     * : pass
   } | t.insert
 };

};

/** JavaScriptをタイトルに含むエントリーを集める */

command tt :: void -> void {
{"title": "JavaS"} | hatena:t.grep | hatena:t.mget | 
each {
  [
    $.dayDate | text:split "-" | text:concat > d,
    $.id | to-string > i,
    $.title  > title,
    $.uri > uri,
    $.content > content,
  ];

  [
    "++++++++\n", 
    ["+ Name: ", %d, "-", %i, "\n"] | text:concat,
    ["+ Title: ", %title, "\n"  ]   | text:concat,
    "\n",
    "(Original Article: ", %uri, ")\n",
    %content, 
    "\n\n"
  ] | text:concat
} 
| text:concat 
| file:write /tt.txt
};


command to-int :: string -> integer
 //refers python:misc.ToInt
 ;

/** 日付でエントリーをソートする */
command sort-by-date :: [integer*] -> [integer*] {
  hatena:e.mget | 
  each {
     [$.dayDate, "!", $.id|to-string] |text:concat
  } | list:sort | 
  each {
    text:split "!" | $.1 | to-int
  }
};


command make-proxy [integer id] ::void -> void;
command confirm-proxy [integer id] ::void -> void;

command make-proxies :: [integer*] -> void;

command make-group [integer grp-id] :: [integer*] -> integer {
 pass > in;
 %1 > grp-id;

 {
   "id": %grp-id,
   "group": true,
   "children": %in,
 } | map.insert;

 %grp-id
};

type mapItem = @_nmi {
  "id": integer,
  "group": true?,
 
  @[without("group")]
  "ref": {"t":string, "a": integer}?,

  "parent": integer?,
  "children": [integer*]?,
//   *: any?
};
