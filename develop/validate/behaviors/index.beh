= 妥当性検証 はじめに

このテストベッド・アプリケーションでは、スキーマ妥当性検証のテストをする。

== CatyFITに関する所感とか要望

* 抜群に書きやすい。ケース（エクスペクテーション）の網羅とか境界値を付くのは手間だが、それはどうにもならない手間。
その他のオーバヘッドが極端に少ない。
* beh内に文書をたくさん書くと、文書の二重管理の問題が起きるか？
* とはいえ、これは文書と実装の一致を保証する最高の手段でもある。
* ただし、シェル、エディタ、ブラウザの三者を操作するのは辛い。ブラウザから当該ビヘイビアの再実行ができたほうがいい。
* POSTで fit-run.cgi?beh=the-app:this-beh.beh  とかを叩き、結果HTMLへのリダイレクトを返してもらえばいいのでは。
* タイトル見出し（イコール1つ）の前に任意のテキストを許して欲しい。そこは無視してもいい。
* エクスペクテーションとは無関係のテーブルカラムで、マクロ展開はすべきか？
* 箇条書きのWikiマーカーの前に行頭空白を許して欲しい。
* 対話的にrunできる限度はビヘイビア記述が10個くらいか。個別ファイル、個別ディレクトリを指定しないと待ちきれない。

== validateコマンドの出力

validateコマンドは、将来的に次のようなエラー情報を出力することを想定している。

{{{
type ValidationResult = @OK any | @NG ValidationErrorReport;

type ValidationErrorReport = {
  "path" : string, // エラーが検出された場所へのJSONパス。このパスにより抽出される値のなかに必ずエラーがある。
  "reason" : string, // エラー理由コード
  "type" : ("integer"|"number"|"string"|"boolean"|"null"|"array"|"object"|"binary"|"tagged"),
           // 当該文脈で期待されている正しい型
  "hint" : any?, // エラーのヒントとなる値、スキーマ属性値、配列インデックス、オブジェクト・プロパティ名など

  "message" : string, // 人間可読なメッセージ
  * : any
};
}}}

messageは標準的なメッセージ、他の情報を使ってユーザー側で自由に文言を制御できるようにする。\\
例：「まことに残念ながら、ご指定のプロパティ %%s がございません。」
「型がチゲーよ： ここは %%s だろ」［値が最大値 %%d を超えているのはマズイんです。（場所は	%%s）」

reason, type, hint は次のようになるだろう。typeとhintには必ず「期待される正しい型／値」が入る。

* BAD_TYPE, //type//
* VIOLATE_//ATTRIBUTE_NAME//, //type//, //attribute_value//
* MISSING_ITEM, array, //index//
* UNEXPECTED_ITEM, array, //index//
* MISSING_PROPERTY, object, //name//
* UNEXPECTED_PROPERTY, object, //name//

最初のエラーを見つけて停止する場合は、ValidationErrorReportを出力すれば十分だが、
エラーが検出された項目／プロパティを無視して、さらに検査をする場合は、
配列 [ValidationErrorReport*] またはパスをキーとするオブジェクトを出力する必要がある。

