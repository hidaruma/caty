Coding -*- coding: utf-8 -*-

= XJSONパス

**XJSONパス** は、[[XJSONTree.wiki|XJSONツリー]]データモデルに基づき、XJSONツリーの任意の場所にアクセスするパス式を定義する。

関連する文書：

* [[XJSONTree.wiki|XJSONTree ]]
* [[XJSONValidate.wiki|XJSONValidate ]]


== 構文構成素

XJSONパスは、次の構文構成素を持つ。

# ルート記号
# タグマッチャー
# 項目アクセッサ
# プロパティ・アクセッサ

項目アクセッサ／プロパティアクセッサには、ブラケット記法とドット記法の2種類がある。
ブラケット記法とドット記法はまったく同値だが、プログラミング言語との親和性からは、
項目アクセッサにはブラケット記法、プロパティ・アクセッサにはドット記法が使われることが多い。

== 構文定義

ルート記号からはじまる絶対パスだけを定義する。

{{{
名前 ::= [_a-zA-Z][-_a-zA-Z0-9]* /* ハイフンを許す */
番号 ::= 非負整数表現
文字列 ::= JSON文字列 /* 二重引用符で囲む */


絶対パス  ::= '$' アクセッサ*
アクセッサ ::= タグマッチャー | 項目アクセッサ | プロパティ・アクセッサ

タグマッチャー ::= '@' タグ名
タグ名 ::= '*' | 名前 | 番号 | 文字列

項目アクセッサ ::= インデックス項目アクセッサ | ドット項目アクセッサ
インデックス項目アクセッサ ::= '[' 番号 ']'
ドット項目アクセッサ ::= '.' 番号

プロパティ・アクセッサ ::= インデックス・プロパティ・クセッサ | ドット・プロパティ・アクセッサ
インデックス・プロパティ・クセッサ ::= '[' 文字列 ']'
ドット・プロパティ・アクセッサ ::= '.' (名前 | 文字列)
}}}

絶対パスの例：

# $
# $[3]
# $.3
# $["x"]
# $.x
# $@person
# $@person.age
# $@person.hobbies[1]
# $@person["email"]@mail

== タグマッチャーの区切り記号

タグマッチャー（アクセッサの一種）を導入する区切り記号としてアットマークを使った。
これは、XJSONのリテラル構文との類似からは自然な記号であるが、
XPath, [[>http://goessner.net/articles/JsonPath/|JSONPath]]（[[>http://code.google.com/p/jsonpath/|コード]]） とはまったく互換性がなくなってしまう。

アットマークは、XPathでは属性アクセス（attribute access）に、
JSONPathではカレントオブジェクト（the current object/element）として使われている。
将来、JSONPathにおける $..book[(@.length-1)]、$..book[?(@.price<10)] などをサポーしようとすると、
アットマークの使用が問題になる。
アットマークの代替として使える記号の第一候補はサーカムフレックス記号（ハット）'^' である。

'^'を使った例

# $^person
# $^person.age
# $^person.hobbies[1]
# $^person["email"]^mail

'^'は、インスタンスリテラル構文との連想が効かなくなるが、視認性は良い。

== パス式とXJSONツリーAPIとの関係

* タグマッチャー @* は、引数なしの untagged に対応する。
* タグマッチャー @name は、引数を name とした untagged に対応する。
* 項目アクセッサ [n]（nは番号）は、引数を n とした item に対応する。
* プロパティ・アクセッサ .name は、引数を name とした pv に対応する。
* アクセッサの左から右への連接は、パイプラインに対応する。

|= パス式   |= コマンド |
| $         | data  |
| $[2]      | data ｜ item 2 |
| $.x       | data ｜ pv x |
| $@*       | data ｜ untagged |
| $@person  | data ｜ untagged person |
| $@person.hobbies[1] | data ｜ untagged person ｜ pv hobbies ｜ item 1 |

（チルダで縦棒がエスケープできない。全角使った。）

== パス式による値

与えられたデータにXJSONパス式を適用すると、データの一部分である値を取り出すことができる。
得られる値は次のように定義される。

# データが @name x のとき、タグマッチャー @* による値は x となる。
# データが @name x のとき、タグマッチャー @name による値は x となる。
# データが @name x のとき、タグマッチャー @notName による値の取得は失敗する。
# データが [... x, ...] （xはn番目）のとき、項目アクセッサ [n] による値は x となる。
# データが長さnの配列のとき、項目アクセッサ [m]（n <= m）による値の取得は失敗する。
# データが {... "name":x, ...} のとき、プロパティ・アクセッサ .name による値は x となる。
# データが notNameプロパティを含まないオブジェクトのとき、プロパティ・アクセッサ .notName による値の取得は失敗する。

== 値取得の失敗

タグ名の不一致、存在しない項目番号、存在しないプロパティ名によるアクセスは失敗する。
このとき通常は例外を発生させる。
例外の種別については、[[XJSONTree.wiki|XJSONツリー]]のアクセスAPIを参照。

特殊な用途では未定義値を値として返してもよい。
未定義値とは、型 never? の唯一の値のことで、JSONリテラル表現は持たない。
JavaScriptでは、undefinedとして未定義値を参照できる。

