<<ignore  -*- coding: utf-8 -*- >>

= リソース＆アクション記述におけるプロファイル

アクションのプロファイルは、コマンドのプロファイルに比べて特殊な事情があり複雑になる。

== 外部プロファイルと内部プロファイル

**外部プロファイル**とは、Webからアクションに入るデータ型と、アクションがWebに吐き出すデータ型の組で、
コマンドのプロファイルとまったく同じように表記する。

* プロファイル ::= 型 '->' 型

しかし、アクションが受け取る入力の型はWebRequest型（または、若干それを加工したWebInput型）のサブタイプであり、
出力の型はWebResponse型のサブタイプに決まっている。
プロファイルを明示しても、その情報はさしたる意義がない。

一方で、translateが成功した後の型とprintに渡す直前の型は、アクションの本来の処理にとって重要であり、
有意義な情報となる。この「アクションの本来の処理」の入力型／出力型の記述を**内部プロファイル**と呼ぶ。

== プロファイル構文とラショネール

{{{

プロファイル ::= 外部プロファイル | 内部プロファイル付きプロファイル

外部プロファイル ::= 型 '->' 型

内部プロファイル付きプロファイル ::= 型? '-(' '*'? 内部プロファイル ')' ('->' 型)? 

}}}

*  外部プロファイルは、コマンド宣言と互換の構文である。
* 内部プロファイルを書く場合は、外部プロファイルの域または余域、あるいは両方を省略できる。
これは、外部プロファイルの情報は容易に推測できるからである。
* 省略なしにプロファイルを書くと、S -(A -> B)-> T のような形になる。これは、
  意味から言って比較的自然な形状だと思われる。
* 型名にハイフンが許されるので、S-> T や S -(A-> B)-> T が構文エラーになるのはうれしくない。
* オプショナルな'*'があると、内部プロファイルはコメント扱いになる。'(*', '*)' をコメントにする
  言語もある。括弧の両側にアスタを付けるのは面倒なので開始アスタのみとした。
* アスタがないときは、内部プロファイルはスクリプトの解釈に影響を与える（後述）

== 内部プロファイルとスクリプトの解釈

内部プロファイルが有効（アスタが付いてない）のとき、記述されたスクリプ
トは内部プロファイルを入出力とする処理だと解釈される。

{{{

action process-lunch-order ("/POST") :: -(LunchOrder -> LunchOrderAccept) {
  lunch:accept-order
};

}}}

このアクションprocess-lunch-orderは、実際には例えば次のように展開される。

{{{

action process-lunch-order ("/POST") :: -(* LunchOrder -> LunchOrderAccept) {
  translate LunchOrder |
  when {
   OK => lunch:accept-order | print-accept.caty ,
   NG => report-error.caty
  }
};

}}}

この展開のとき使われる print-accept.caty と report-error.caty をどのよ
うに指定するか、またリクエスト処理スクリプトの全体構造を規定するスクリ
プトテンプレートをどのように扱うか（当面はハードコードだろう）などはま
だ未定。


