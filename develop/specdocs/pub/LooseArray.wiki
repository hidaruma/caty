<<ignore  -*- coding: utf-8 -*- >>

= ルーズ配列

かつて「歯抜け配列」と呼ばれ、禁止されていたデータ構造。**許可します。**

== 構文

{{{

配列 ::= '[' 項目並び ']'

項目並び ::= 項目 (',' 項目)*

項目 ::= 空 | 非空項目

非空項目 ::= 任意のXJSONデータ

}}}

空な項目を許すようにした。次のようにも書ける。

{{{

項目並び ::= 非空項目? (',' 非空項目?)*

}}}

例：[1,,2,3,,], [,,1,2,,,3], [,]

== 配列の長さと正規形

配列には、形式的な長さと実際の長さがある。

* 形式的な長さ : (出現するカンマの数) + 1
* 実際の長さ : 非空項目がないときは0、それ以外は (最後に出現した非空項目の位置) + 1

最後に出現した非空項目より後に出現するカンマは後続カンマと呼ぶ。また、
非空項目がないときはすべてのカンマを後続カンマと呼ぶ。

後続カンマをすべて取り去っても実際の長さには影響がない。
後続カンマをすべて取り去った形を（配列の）正規形と呼ぶ。

== データ構造

構文的に空項目を許す配列（ルーズ配列）は、
データ構造（意味論）としては、項目に未定義値 #'undefined を許すデータである。

最後の非空項目（つまり、#'undefined以外のデータ）から後の項目もすべて#'undefinedであるが、
後続の#'undefinedはデータ構造としての同一性に影響をもたない。正規形で比較すれば、それが
データ構造としての等しさを与える。

配列の印字の際は、必ず正規化した上で、#'undefineではなく空項目を使って表現する。
#'undefinedを印字出力すると、その出力テキストは再入力（パーズ）出来なくなる。

