<<ignore  -*- coding: utf-8 -*- >>

= Smarty Minimum but Extended

== 概要

現状の**Smarty Minimum**に、次の4つの構文要素が追加される。

# テンプレート関数定義： インラインで（同じファイル内で）テンプレート関数定義を行う。{function ...}...{/function} という形。
# グループ： いくつかのテンプレート関数定義をまとめる。{group ...}...{/group} という形。
# 呼び出し： 名前によりテンプレート関数を呼び出す。{call ...} という形。
# マッチング呼び出し： パターンマッチによりテンプレート関数を選んで呼び出す。{match_call ...} という形。


Smarty-3では、function, call が導入されたので、**できるだけこの仕様に従う**ことにする。

* [[http://www.smarty.net/docs/ja/language.function.function.tpl]]
* [[http://www.smarty.net/docs/ja/language.function.call.tpl]]

ただし、Smarty3とは異なり、テンプレート関数への引数渡しは必ずコンテキストを使う。
テンプレート関数にはコンテキストの型（Catyの型システムで規定される）を指定できるので、
**型安全なテンプレート**が実現できる。


== テンプレート関数定義 function

インラインで（同じファイル内で）サブテンプレート定義を行う。

{{{
{function name=NAME match=PATT context_type=TYPE}

  TEMPLATE_TEXT

{/function}
}}}

=== name=NAME

テンプレート関数の名前を指定する。

{{{
NAME = Smartyの名前 ::= [a-zA-Z_][a-zA-Z0-9_]*
}}}

値を引用符で囲んで文字列形式にしてもよい。

この属性は省略可能だが、nameとmatchの両方を省略することはできない。

=== match=PATT

テンプレートを適用可能なコンテキストパターンを指定する。PATTは、
**CatyScript**のwhen分岐（タグ分岐）の構文がそのまま使える。
（将来的に疑似タグ構文もサポートする予定。）

# Catyの名前 （例：match=chapter）
# Catyの文字列 （例：match="user name"）
# '*' （例：match="*"）
# '*!' （例：match="*!"）
# '&' -- '&' はnameの値に展開される。nameが指定されてないときはエラー。 （例：match="&"）

number, object などは型の判定として使える。
値を引用符で囲んで文字列形式にしてもよい。
パターンに空白や特殊文字が含まれる場合は、必ず引用符で囲んで文字列形式にする。

この属性は省略可能だが、nameとmatchの両方を省略することはできない。

=== context_type=TYPE

テンプレートのコンテキストとして許される型を指定する。
TYPEの値は、Catyの型名である。
値を引用符で囲んで文字列形式にしてもよい。
型名に特殊文字が含まれる場合は、必ず引用符で囲んで文字列形式にする。

この属性は省略可能で、デフォルト値は any 。

===   TEMPLATE_TEXT

テンプレート構文に従ったテキストが入る。

テンプレート関数定義の入れ子は許されないので、
TEMPLATE_TEXT内で {function}と{group}は使えない。
他には、テンプレート関数定義特有のことは特に無い。

=== 制約

# 名前の一意性：nameが、同じスコープある他のテンプレート関数／グループと衝突してはいけない。
# パターンの排他性：同一グループ内では、パターンは排他的でなくてはならない。whenの場合と同じ。


== グループ group

いくつかのテンプレート関数定義をまとめる。

{{{
{group name=NAME}

 (FUNCTION_DEF | GROUP)*

{/group}
}}}

グループはまた、テンプレート関数名の名前空間を提供する。グループ内に含まれるテンプレート関数の名前は修飾名となる。

=== name=NAME

グループに名前を与える。

{{{
NAME = Smartyの名前 ::= [a-zA-Z_][a-zA-Z0-9_]*
}}}

値を引用符で囲んで文字列形式にしてもよい。

name属性は必須である。

===  FUNCTION_DEF

グループに含まれるテンプレート関数定義。

=== GROUP

グループに含まれるサブグループ。

=== 制約

# グループ内には、テンプレート関数定義、サブグループ、空白類以外のテキストを含めることはできない。
# 名前の一意性：nameが、同じスコープにある他のテンプレート関数グループと衝突してはいけない。


== 呼び出し call

名前でテンプレート関数を呼び出す。

{{{

{call name=QNAME context=EXPR}

}}}

=== name=QNAME 

呼び出すテンプレート関数の名前。グループに含まれるテンプレート関数は修飾名を持つ。

{{{
修飾名 ::= Smartyの名前 ('.' Smartyの名前)*
}}}

値を引用符で囲んで文字列形式にしてもよい。

この属性は必須である。

=== context=EXPR

呼び出すテンプレート関数に渡すコンテキスト。EXPRはSmartyの式。

この属性は省略可能で、デフォルト値は $_CONTEXT 。

=== 動作

# 名前で指定されたテンプレート関数がないならエラー。
# コンテキストの計算（context=EXPRの評価）が失敗すればエラー。
# コンテキストの型が存在しない（未定義の型）ならエラー。
# コンテキストの型が一致しないならエラー（**型エラー**）。
# 指定されたテンプレート関数を、指定されたコンテキストで評価展開する。
# 評価展開が失敗すればエラー。
# 成功すれば、結果テキストをその場所に埋め込む。

context_typeを指定すると、**テンプレートの型安全性**を高めることができる。

== マッチング呼び出し match_call

パターンマッチによりテンプレート関数を呼び出す。

{{{

{match_call group=QNAME context=EXPR}

}}}

=== group=QNAME 

呼び出すテンプレート関数を選ぶときに使うグループ。入れ子のグループは修飾名を持つ。

値を引用符で囲んで文字列形式にしてもよい。

この属性は省略可能である。省略されたときは、無名のトップレベルグループが使われる。

=== context=EXPR

呼び出すテンプレート関数を選ぶ基準となる、また選んだテンプレート関数に渡すコンテキスト。EXPRはSmartyの式。

この属性は省略可能で、デフォルト値は $_CONTEXT 。

=== 動作

「コンテキスト→入力、テンプレートのmatchパターン→whenの条件パターン」と置き換えると、whenの処理と同じである。

# 指定されたグループがないならエラー。
# コンテキストの計算（context=EXPRの評価）が失敗すればエラー。
# 指定されたグループのなかで、matchが指定されているテンプレート関数を列挙する。
  このとき、サブグループは無視する。
# コンテキストとテンプレート関数のmatchをパターンマッチする。（whenのときと同じ方式。）
# パターンマッチがすべて失敗すればエラー。（whenのときと同じ。）
# マッチしたテンプレート関数があれば、callと同じ方法で呼び出す。

== 従来のSmarty Minimumとの関係

=== caty-meta PIによる宣言

<?caty-meta template="smarty-mx" ?> と宣言しないと、新しい構文は使えない。


=== 新しい構文要素の出現可能位置

Smarty Minimumは次の制御構造を持っている。

* if
* foreach
* include

これらの内側にfunctionとgroupを書くことはできない。literalの内部に書いてもそれは単なるテキストとみなされる。
したがって、if, foreach, include, literalの外にfunction, groupを書く。call, match_callは任意の位置に出現できる。

=== テンプレート定義のスコープ

インラインのテンプレート定義は、それが書かれたファイル内でしか使えない。
将来的には、テンプレート定義のライブラリ化（共通定義の再利用）やメモリキャッシュをサポートする可能性はある。


== 振る舞いの同値性

* function定義の内容（定義体）を別なテンプレートファイルにしてincludeで呼び出した場合、
  出力は同じでなくてはならない。つまり、callとincludeは相互に交換でき、
  出力からはどちらを使ったかを区別できない。
* match_callによる呼び出しと、コンテキストを自前で判定してcallで呼び出すこと（if文を使う）は同値である。

== 構文のまとめ

|=ディレクティブ名 |=属性名 |=属性値型 |= 出現性 |= 備考 |
|function          |        |          |         |       |
|-                 |name    | NAME     |?        |matchがないときは必須|
|-                 |match   | PATT     |?        |nameがないときは必須|
|-                 |context_type| TYPE |?        | |
|group             |        |          |         |       |
|-                 |name    | NAME     |1        | |
|call              |        |          |         |       |
|-                 |name    | NAME     |1        | |
|-                 |context | EXPR     |?        | |
|match_call        |        |          |         |       |
|-                 |group   | NAME     |?        | |
|-                 |context | EXPR     |?        | |

== Smarty-3との非互換性

# 使える構文要素は小さなサブセットである。
# 式の構文はSmartyと似ているだけで、異なる式言語を使っている。
# データの受け渡しはコンテキストだけを使う。
  Smartyでは許される「勝手な属性を使ってデータを受け渡すこと」はできない。
  属性名は前もって規定されているものだけが使える。
# group, match_callはSmartyには存在しない。
# match属性、context_type属性はSmartyには存在しない。

