<<ignore  -*- coding: utf-8 -*- >>

= リソース＆アクション記述の構文 その2

現状の _filetypes.xjson とほとんど同じ形式と、将来拡張するであろうバインディング構文について述べる。

* [[ResAct-syntax.wiki|その1]]

== 変更を最小限に抑える

_filetypes.xjson と同じ情報を持ち、次の拡張をした構文を定義する。

# リソースクラスとアクションに名前を持たせる。
# 適切な位置に文書コメントを書ける。
# オプション宣言（クエリパラメータ宣言）を書ける。

以下はサポートしない機能である。

# アノテーションは書けない。
# プロファイルは書けない。
# refers節は書けない。
# URIパターン文字列とインボーカー文字列は現状と同じ。変更拡張はない。

{{{

リソースクラス宣言 ::= クラス宣言Doc? 'resource' リソースクラス名 URIパターン指定 '{' リソースクラス定義体 '}' ';'

リソースクラス名 ::= 名前

URIパターン指定 ::= '(' パターン文字列 ')'

リソースクラス定義体 ::= アクション宣言*

アクション宣言 ::= アクション宣言Doc? 'action' アクション名 インボーカー指定 オプション指定? '::' 
                   アクション定義体 ';'

アクション名 ::= 名前

インボーカー指定 ::= '(' インボーカー文字列 ')'

オプション指定 ::= {オブジェクト型の型表現（コマンド宣言の場合と同じ）}

アクション定義体 ::= '{' スクリプトコード '}'

スクリプトコード ::= {CatyScriptのコード}

}}}

== HTTPバインディング構文

リソースクラスにURIパターンを、アクションにインボーカーを指定することを**HTTPバインディング**と呼ぶ。

既に述べた構文ではHTTPバインディングはインライン（その場）で行われる。
アウトオブライン方式のバインディング構文を以下に述べる。

{{{

リソースクラスバインド宣言 ::= バインド宣言Doc? 'bind' 'resource' リソースクラス名 URIパターン指定 バインドブロック? ';'

バインドブロック ::= '{' ブロック内アクションバインド宣言* '}' 

ブロック内アクションバインド宣言 ::= バインド宣言Doc? 'action' アクション名 インボーカー指定 ';'

アクションバインド宣言 ::= 'bind' 'action' アクションフルネーム インボーカー指定 ';'

/* 以下はトークン定義 */

アクションフルネーム ::= リソースクラス名 '.' アクション名 // ':' を '.' に変更

}}}

トップレベルに出現するアクションを認める場合は、
トップレベルのアクションバインド宣言が追加されるだろう。

=== バインディングの実例

{{{
/** サイトルート */
bind resource Root("/");

/** 
 * AtomエントリーのHTTPバインディング
 */
bind resource AtomEntry(".ent|.grp") {
  action get-entry("/GET");
  action edit-entry("edit/GET");
  action get-meta("get-meta/GET");
  action delete-entry("/DELETE");
  action put-entry("/PUT#exists-parent");
};

/** ゴミ箱 */
bind resource Trash("trash.grp");

/** ゴミ箱全消去 */
bind action Trash.cleanup("cleanup/POST");

}}}

== 意味的な制約

HTTPバインディングは、インライン／アウトオブラインのどちらで行ってもよい。
ただし、同じリソースクラスまたはアクションに対して複数のURIパターンまたはインボーカーを
割り当てることはできない。多重指定は直ちにエラーとなる。

バインディングされてない（未束縛な）リソースクラスとアクションは認める。
未束縛アクションはWebから起動することができないだけである。

未束縛な記述は、純粋にインターフェースを記述しているのであって、そのイ
ンターフェースとバインディングを分離するのはむしろ好ましい。


