<<ignore  -*- coding: utf-8 -*- >>

= リダイレクトの宣言

== 例外とシグナル

例外とシグナルは、どちらも脱出制御で、現在の実行を中断して、REPLのトップレベルに戻る。
例外とシグナルは、ほとんど同じメカニズムで次の違いがあるだけである。

# 例外は異常事態報告、シグナルは正常処理の終了に使われる。
# 例外は例外型しか送出できない。シグナルで送るデータに制限はない。

例外もシグナルも、それが発生するとREPL（インタプリタ）のトップレベルに制御が移るが、
例外シグナル・マッパーにより、受け取った例外／シグナルに応じた処理（ハンドリング）が行われる。

== リダイレクト処理

リダイレクト要求は、通常、例外やシグナルで行われる。
例えば、HTTP301という名前の例外型をthrowしてもいいだろう。
異常ではなくて正常処理という解釈ならシグナルがふさわしい。
例外シグナル・マッパーが適切なHTTPレスポンスに変換する。

しかし、具体的な実装方式が露出するのは好ましくないので、redirectというコマンドでラップして、
宣言もthrowsやsignalsを使わず、redirectsという専用の宣言節を用いる。

== redirects節

リダイレクトは、ウェブ処理でしか意味が無いので、アクションに対してだけ使える。
一般のコマンドでは使えない。

アクションの任意のプロファイルに対して、redirects節を添えることができる。
プロファイルは外部プロファイルでも内部プロファイルでもよい。

{{{

redirects節 ::= 'redirects' (アクション名 | '[' アクション名並び ']')

アクション名並び ::=  空 ｜ アクション名 ('.' アクション名)* 余分なカンマ?

余分なカンマ ::= ','

}}}

注意：今回から、「並び」に「余分なカンマ」を入れてみた。

== redirects節の意味

redirects節は、throws節と類似なので、X -> Y redirects Res.act と書かれると、
Yが出力されるか Res.act へのリダイレクトが起きるかのどちらかとなる。
必ずリダイレクトが起きることを明示するには、X -> never redirects Res.act とする。

リダイレクト先はURLではなくて、アクションを指定する。複数のリダイレクト先があれば、
それらのどれかに（そしてどれにでも）リダイレクトされる可能性がある。

redirects節は、throws, signals と類似だが干渉はしない。producesとは直交している。
したがって、他の節の存在を気にせずに追加削除ができる。

実際にリダイレクトが正しく行われるかどうかのチェックはハイパーバリデータが行う。

== redirects節の図示

リダイレクト処理はクライアントにより行われるが、
クライアントとの往復を図示すると煩雑になるだけなので、
リダイレクト辺はアクションとアクションをつなぐ辺として描画する。

レスポンス辺、リクエスト辺と区別できるように描くほうがよい。
