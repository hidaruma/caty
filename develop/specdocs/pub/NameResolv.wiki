<<ignore  -*- coding: utf-8 -*- >>

= 名前の解決方法

==  名前の種類

Catyで使う名前の種類とは、名前空間のソートであり、
次のソートがある。

# applications
# facilities
# packages
# modules
# types
# commands
# classes
# states
# userroles

exceptions, resources, actions などは独立した名前空間ではなくて、他の名前空間の部分名前空間（sub-namespace）である。

スキーマ／スクリプト内で問題となる名前は：

# types in module
# commands in module
# classes in module
# types in class （現在は使ってない）
# commands in class

結局、**型名**と**コマンド名**を、**モジュールスコープ**と**クラススコープ**内で考えることになる。
**カインド名**は便宜上の理由で（理論的にはあまり望ましくないが）型名と同じ扱いとする。

== 実モジュールと仮想モジュール

**実モジュール**は、モジュールファイルに対応するモジュール、
**仮想モジュール**は、対応するファイルが存在しないモジュールである。

現在、仮想モジュールは1つだけ、public。それ以外はすべて実モジュールである。
今後、仮想モジュールが増える可能性を否定はできないが、
あまりないと思う（とりあえず、その予定はない）。

== 名前の解決手順

名前は、あるスコープ内で出現する。スコープにはクラススコープとモジュールスコープがある。
また、名前は構文的に**修飾名**と**無修飾名**（裸の名前）がある。

スコープと修飾に応じて名前を解決するが、**予約語**だけは例外で、
処理系が最初から知っている名前なので解決の必要はない。
予約語をユーザーが定義することはできないので、予約語の意味は常に一定である。

=== モジュールスコープにおける解決

==== 無修飾名

予約語でない無修飾名は、同一モジュール内で定義された名前とみなす。
同一モジュール内に定義が見つからない場合は、public:で修飾して外部名とみなす。

==== ドット修飾名

ドットで修飾された名前 x.y は、同一モジュール内で定義されたクラスx内で
定義された名前yとみなす。

同一モジュール内の所定クラス内で名前の定義が見つからない場合は、public:で修飾して外部名とみなす。


==== コロン修飾名

コロンで修飾された名前 x:y または x:y.z は、モジュールx内で定義された名前 y または y.z とみなす。

xが自分自身のモジュール名であれば内部、そうでなければ外部名とみなす。

=== クラススコープにおける解決

==== 無修飾名

予約語でない無修飾名は、同一クラス内で定義された名前とみなす。
同一クラス内に定義が見つからない場合は、所属するモジュール内で定義された名前とみなす。
所属モジュール内に定義が見つからない場合は、public:で修飾して外部名とみなす。

==== ドット修飾名

ドットで修飾された名前 x.y は、同一モジュール内で定義されたクラスx内で
定義された名前yとみなす。
xが自分自身のクラス名であってもよい。

同一モジュール内の所定クラス内で名前の定義が見つからない場合は、public:で修飾して外部名とみなす。


==== コロン修飾名

コロンで修飾された名前 x:y または x:y.z は、モジュールx内で定義された名前 y または y.z とみなす。

xが自分自身のモジュール名であれば内部、そうでなければ外部名とみなす。


== 外部名の解決手順

上記の手順で、各モジュールごとに外部名（他のモジュールへの参照）が確定する。
すべてのモジュールが揃った後で、外部名の参照先実体があるかどうかをチェックする。
参照先がなければ参照エラーとなる。

