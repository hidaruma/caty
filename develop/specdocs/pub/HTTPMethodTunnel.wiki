Coding -*- coding: utf-8 -*-

= HTTPメソッドトンネリング

== 概要

* 使用するクエリパラメータ： _method
* 値は ("PUT" | "DELETE" | "GET"  | "POST")。
  大文字小文字無視したほうが使いやすいかもしれないが、まずは case-sensitive で。
* POST within POST も含めてすべてのメソッドをPOSTにカプセル化可能とする。

目的は、HTMLのPOSTフォームからすべてのメソッドを発行可能とする。
ブラウザによるテストと確認のときに役立つ。

== フォームフィールドの使い方

* body という名前のフォームフィールドの値は、HTTPリクエストのエンティティボディとして扱われる。
  これは、POST within POST のときも同様である。
* header.* という名前のフォームフィールドは、「*」部分の名前と値の組をHTTPヘッダとして扱う。
  例：<input type="hidden" name="header.X-User-Handle" value="hiyama" />
* body, header.* という名前以外のフィールドの値は全て捨てられる。


|= 偽装メソッド |= body  |= header.* |
| PUT           | PUTのリクエストボディとする | PUTのヘッダーとする |
| DELETE        | 無視する | DELETEのヘッダーとする |
| GET           | 無視する | GETのヘッダーとする |
| POST          | POSTのリクエストボディとする | POSTのヘッダーとする |

== ヘッダ操作

偽装メソッドがなんであっても、header.* フィールドはヘッダとして扱われる。
ヘッダ操作は次のルールに従う。かなり制限があるが、
現状はこれで十分である。

# もともとあったヘッダ（例：User-Agent）は手を加えずそのまま残す。
# 偽装メソッドがPUT, POSTのときに header.content-type フィールドがあれば、もともとのContent-Typeヘッダを**上書き**する。
# 偽装メソッドがGET, DELETEのときは、header.content-type フィールドがあっても無視する（何もしないで捨てる）。
# header.x-* （大文字小文字を無視して'x-'から始まる）フィールドは、HTTPヘッダとして追加する。
# それ以外の名前のフィールドは無視する（typoである可能性が高く、事故を防ぐため）。

== その他

HTTPメソッドトンネリングは、テストと確認の目的で使われるだけなので、
本番運用では取り外すべきである。

グローバル設定ファイル _global.xjson で次の設定項目がある。

{{{

 "enableHTTPMethodTunneling": true, // true にすると HTTP メソッドトンネリングが有効になる

}}}








