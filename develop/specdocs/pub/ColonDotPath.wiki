<<ignore  -*- coding: utf-8 -*- >>

= ColonDotパス

**ColonDotパス**とは、コロン（':'）とドット（'.'）を区切り記号とするパス式である。
Catyでは、アプリケーション、パッケージ、モジュール、クラス、型、コマンドをColonDotパスで示す。
ただし、ColonDotパスは文脈情報がないと曖昧である。
以下に、文脈ごとのColonDotパスの使用法を示す。
ワイルドカード（'*', '*~*'）が入る場合も言及する。

なお、「単純名」とはコロンもドットも含まない[[NameSyntax.wiki|Catyの名前]]である。

== アプリケーション／パッケージ名

ColonDotパスがアプリケーション名またはパッケージ名を示す文脈では：

# 単純名はアプリケーションを示す。
# 単純名の直後にコロンが付いた形（例：foo:）もアプリケーションを示す。
# 単純名の直後にコロン、さらにドット区切りパスはパッケージを示す。
# '*' は任意のアプリケーションを示す。
# '*:' も任意のアプリケーションを示す。
# 'foo:*' はfooアプリケーションの直下にある任意のモジュールを示す。
# 'foo:*~*' はfooアプリケーションに属する任意のモジュールを示す。
# '*:*~*' は任意のモジュールを示す。

{{{
syntax アプリケーション名 ::= lexical (単純名 | '*') ':'? ;
syntax パッケージ名 ::= lexical アプリケーション部 パッケージ部 ;
syntax アプリケーション部 ::= lexical (単純名 | '*') ':' ;
syntax パッケージ部 ::= '**' | (単純名 | '*') ('.' (単純名 | '*'))* ;
}}}

== モジュール／クラス名

ColonDotパスがモジュール名またはクラス名を示す文脈では：

# 単純名はモジュールを示す。
# ドット区切りのパスは、パッケージ修飾されたモジュールを示す。
# 単純名またはドット区切りパスの直後にコロンが付いた形（例：foo.bar:）もモジュールを示す。
# 単純名またはドット区切りパスの直後にコロン、さらにドット区切りで名前が続けばクラスを示す。
# コロンが2つ含まれれば、最初のコロンの左をアプリケーション名とみなす。
# ワイルドカード'*' は任意のモジュールを示す。
# その他のワイルドカードの使用法はアプリケーション／パッケージ名と同様。
'*:*:' はアプリケーション直下にある任意のモジュール、
'*:*' は任意のクラス、
'*:*~*.*:' は、パッケージ配下に置かれた任意のモジュール、
'*:*~*.*:*' は、パッケージ配下に置かれた任意のモジュールの任意のクラスである。

{{{
syntax アプリケーション修飾 ::= lexical (単純名 | '*') ':' ;
syntax パッケージ修飾 ::= アプリケーション修飾? ('**' | (単純名 | '*') ('.' (単純名 | '*'))* ) '.' ;
syntax モジュール名 ::= lexical パッケージ修飾? (単純名 | '*') ':'? ;
syntax クラス名 ::= lexical モジュール部 クラス部 ;
syntax モジュール部 ::= lexical パッケージ修飾? (単純名 | '*') ':' ;
syntax クラス部 ::= (単純名 | '*') ;
}}}

== 型名

ColonDotパスが型名を示す文脈では：

# 単純名はpublicモジュールの型を示す。
# コロンを1つ含む場合は、コロンの左をモジュール名と解釈する。
# コロンを2つ含む場合は、右側のコロンの左をアプリケーション名で修飾されたモジュール名
  と解釈する。
# '*' はpublicモジュールの任意の型を示す。
# 'foo:*' はfooモジュールの下にある任意の型を示す。
# その他のワイルドカードの使用法はモジュール／クラス名と同様。

{{{
syntax アプリケーション修飾 ::= lexical (単純名 | '*') ':' ;
syntax パッケージ修飾 ::= アプリケーション修飾? ('**' | (単純名 | '*') ('.' (単純名 | '*'))* ) '.' ;
syntax モジュール修飾 ::= lexical パッケージ修飾? (単純名 | '*') ':' ;
syntax 型名 ::= lexical モジュール修飾? クラス修飾? (単純名 | '*') ;
syntax クラス修飾 ::= (単純名 | '*') '.';
}}}

== コマンド名

ColonDotパスがコマンド名を示す文脈では：

# 単純名はpublicモジュールのコマンドを示す。
# コロンを1つ含む場合は、コロンの左をモジュール名と解釈する。
# コロンを2つ含む場合は、右側のコロンの左をアプリケーション名で修飾されたモジュール名
  と解釈する。
# '*' はpublicモジュールの任意のコマンドを示す。
# 'foo:*' はfooモジュールの下にある任意のコマンドを示す。
# その他のワイルドカードの使用法はモジュール／クラス名と同様。

{{{
syntax アプリケーション修飾 ::= lexical (単純名 | '*') ':' ;
syntax パッケージ修飾 ::= アプリケーション修飾? ('**' | (単純名 | '*') ('.' (単純名 | '*'))* ) '.' ;
syntax モジュール修飾 ::= lexical パッケージ修飾? (単純名 | '*') ':' ;
syntax コマンド名 ::= lexical モジュール修飾? クラス修飾? (単純名 | '*') ;
syntax クラス修飾 ::= (単純名 | '*') '.';
}}}

== 文脈ごとのフルネームと省略可能性

ColonDotパスは、パスを見ただけではその実体が何であるかを判断できない。
解釈には文脈が必要である。その文脈（解釈のためのヒント）は次の4種である。

# 名前は、アプリケーションまたはパッケージを指す。
# 名前は、モジュールまたはクラスを指す。
# 名前は、型を指す。
# 名前は、コマンドを指す。


===  アプリケーションまたはパッケージ

{{{
syntax パッケージフルネーム ::= アプリケーション名 ':' パッケージ名 ('.' パッケージ名)* ;

/** コロンで終わるアプリケーション名またはパッケージ名 */
syntax APフルネーム ::= アプリケーション名 ':' (パッケージ名 ('.' パッケージ名)*)? ;
}}}

=== モジュールまたはクラス

{{{
syntax モジュールフルネーム ::= (アプリケーション名 ':' | パッケージフルネーム '.')  モジュール名
syntax クラスフルネーム ::= (アプリケーション名 ':' | パッケージフルネーム '.')  モジュール名 ':' クラス名

/** コロンで終わるモジュール名またはクラス名 */
syntax MCフルネーム ::= (アプリケーション名 ':' | パッケージフルネーム '.')  モジュール名 ':' クラス名?
}}}

=== 型

{{{
syntax 型フルネーム ::= (モジュールフルネーム ':' 型名 | クラスフルネーム '.' 型名)
}}}


=== コマンド

{{{
syntax コマンドフルネーム ::= (モジュールフルネーム ':' コマンド名 | クラスフルネーム '.' コマンド名)
}}}

=== 省略可能性

パッケージ名、モジュール名、クラス名、型名、コマンド名のすべてにおいて、
アプリケーション修飾は省略できる。省略時のアプリケーション名はthis、
または実際の現アプリケーション名となる。
