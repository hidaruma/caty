Coding -*- coding: utf-8 -*-

= Catyスクリプトの変数 (新)


//まだ途中 //

パーセント（'%'）から始まる変数参照は、束縛チェーンのもとで評価される。
束縛チェーンの親方向を「奥側」、子供方向を「手前側」と表現する。

== 束縛チェーンの構築

実際の束縛チェーンを作る際に、一番奥に環境変数を置く。
これにより、環境変数を名前だけで参照できる。

|= 参照構文   |= 値の例 |
| %SYSTEM_ECODING | "cp932" |
| %APP_ECODING| "utf-8" |
| %HOST_URL   | "http://localhost:8000"  |

環境変数は大文字始まりなので、ユーザー変数は大文字始まりを使わないことが望ましい。


== 変数の出現可能性

変数は、定数値を書けるところならどこにでも書ける。次の場所には書けない（構文エラー）。

# タグ名に変数を使う： @%tag 
# オブジェクトのプロパティ名に変数を使う： {%name : "hello"}
# オプション名に変数を使う： cmpd --%optname=1

コマンド名に変数を使うことはできないが、トップレベルに変数は許される。
したがって、束縛 {"cmd" : "version" } のもとで %cmd を評価すると、
文字列データ "vesion" となる。versionコマンドが実行されることは決して無い。

変数が書けるところは：

# トップレベルに書いてよい。%data
# 配列の項目に書いてよい。[%first, %second]
# オブジェクトのプロパティ値に書いてよい。{"a":%a, "b":%b}
# コマンドのオプション値に書いてよい。cmd -opt=%val
# コマンドの引数値に書いてよい。cmd %foo %bar

== 特別なルール

%--* と、%0: のようなスライスは特別な評価方法が用いられる。

# コマンドのパラメータ部に、%--* が出現すると、
  カレント束縛に対するオプション形式が指定されたように振舞い、
  コマンドにはオプション群として渡される。

# コマンドのパラメータ部に、%0: のようなスライスが出現すると、
  カレント束縛に対する引数形式が指定されたように振舞い、
  コマンドには引数群として渡される。

コマンドのパラメータ文脈以外で %--* , %0: などが出現したときは
このルールが適用されない。単にオブジェクト、配列として評価される。


{{{
 %--* | pv pred // %pred = --predオプションの値

 %0:  | item 1  // %1 = %_ARGV[1] と同じ
}}}

カレント束縛の通常変数が、オプションとして渡されたのか、
その他の方法（例えば代入文）で束縛されたのかは区別できない。

アンダスコアから始まる変数も含めて、
カレント束縛や束縛チェーン全体を参照するには、システムコマンドに頼ることになる。
例えば、dump-vars --all とか。

コマンドのパラメータ部であっても上記の展開ルールを抑制する方法が必要かもしれない。

== コマンドに関する変更

コマンドのオプション（名前付きパラメータ）と引数（位置パラメータ）は、
任意のXJSONデータを渡せる。スカラーに制限することは単なるコンベンションとなる。

{{{
// 第一引数に配列、第二引数にオブジェクト

cmd [1, 2, 3] {"a":"foo", "b":3}

}}}


