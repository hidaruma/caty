Coding -*- coding: utf-8 -*-

= ハッシュ記法

一部（おそらく大部分）のLispでは、#<...> というハッシュ記法（hash notation）が使われる。

Googleで「Lisp "hash notation"」で引いて最初に出たのがこれ：

* [[>http://www.delorie.com/gnu/docs/elisp-manual-21/elisp_17.html]]

printはできるが、readはできないオブジェクトの表現として使われる。

この文書は、Catyにもハッシュ記法を導入する案。


== ハッシュ記法の構文

'<', '>' ではなくて丸括弧を使う。

{{{

空白類 ::= (SP|TAB|NL)+

ハッシュ参照 ::= '#(' 名前 (空白類 データ)? 空白類? ')'

データ ::= {任意のXJSONリテラル}

}}}

== 使用例

実装言語のオブジェクトではあるが、XJSONやCatyスクリプトでは表現できないもの。

{{{

#(null-pointer)

#(file "/home/hiyama/.bashrc")

#(python-tuple [2, 3])

#(function-by-str "lambda x, y: x + y")

#(function @lambda {"args" : ["x", "y"], "body": "x + y"})

#(memory-block {"addr": 3044902, "size" : 128})

}}}

現在必要とされているのは：

# #(undefined) -- 内部的な値。評価すると例外を引き起こし表面には出ない。
# #(mild-undefined) -- オブジェクトのプロパティ値、配列の項目に出現したら、「なにもない」として評価される。

== 扱い方

# 処理系の書き出し機能は、必要に応じてハッシュ記法でオブジェクトを表現してよい。
# 処理系の読み込み機能は、ハッシュ記法を理解するが、発見したら例外を投げる。
# ハッシュ記法は主に、人間に対する情報提供用に使われる。
例外を引き起こすコメントのようなもの。**データとして扱うことはない。**



