<<ignore  -*- coding: utf-8 -*- >>

= パラメータ処理

構文から独立したパラメータ処理の方式を述べる。

参考：

* [[BindingAndRef.wiki]]
* [[Variables.wiki]]

== 概要

生パラメータデータは次の3段階で処理される。

# 簡約： 複数のオプションオブジェクト、複数の引数リストにまとめ、undefined値を取り除く。
# トランスレート： スキーマを参照しながら、適切なデータ型に変換する。
# 束縛： 適切な変数束縛環境を作る。

== 記法

* 現在のCatyではサポートされてない正規表現型を、/[ ... ]/ の形で使用する。
* 変数束縛環境をオブジェクトデータで示す。プロパティ名が変数名である。

== 型定義

{{{
module param;

/** パラメータ値に許されるスカラー型 */
type ParamScalar = null | boolean | number | string ;

/** ユーザーが使ってよい変数名 -- アンダースコアではじまらない名前 */
type UserVar = string(format="user-var");

/** オプションオブジェクト */
type Opts = {
  * : ParamScalar?
}(propNameFormat = "user-var");

/** 引数リスト arg0 は含まない */
type Args = [ParamScalar?*];
 
/** 引数リスト arg0 を含む */
type Argv = [any, ParamScalar*];
 
/** 加工してない生のパラメータデータ */
type RawParamData = /[Opts+, Args+]/;

/** 処理済みのパラメータデータ */
type CookedParamData = [Opts, Argv];

/** パラメータから作られた変数束縛 */
type ParamBindings = {
 "_OPTS" : Opts,
 "_ARGV" : Argv,
 * : ParamScalar?
}(propNameFormat = "user-var");
}}}


== 生パラメータデータ

**生パラメータデータ**は、コマンドの呼び出し元から渡される元データである。
生パラメータデータを、コマンド宣言のパラメータスキーマを参照しながら処理することが**パラメータ処理**である。

== 縮約

生パラメータデータには、1つ以上のオプションオブジェクト、1つ以上の引数リストが含まれるので、
これらをまとめて1つのオプションオブジェクト、1つの引数リストにする。

# 複数のオプションオブジェクトがあれば、それらをマージする。プロパティ名の重複があれば、縮約は失敗する（例外発生）。
# 複数の引数リストがあれば、それらを連接（concatenate）する。そのとき、undefined値は取り除く。
  引数リストの縮約は失敗しない。

== トランスレート

コマンド宣言のパラメータスキーマと渡された値を比較して、必要があれば変換する。

* string型 → null型："null" を null に変換する。
* string型 → boolean型： "true", "false" を true, false に変換する。
* string型 → number型： JSON数値構文に合致していれば、対応する数値に変換する。

JSON構文を厳密に守る。「""をnullに」「"0"をfalseに」のような変換は//しない// -- 
このような便宜的な変換は結果が予測しにくいのでやらない。
変換できないときは、トランスレートが失敗する。

上記のルールに1つだけ例外がある。**booleanオプションの変換のときに限って**、空文字列""をtrueに変換する。
これは、オプション値を省略したオプション指定 {{{--flag}}} のパラメータデータを {"flag" : ""} とするためである。
（オプションが指定されなければ、オプション値は undefined となる。）

== 束縛

# 縮約とトランスレートにより得られたオプションオブジェクトを _OPTS という名前の変数に束縛する。
# 縮約とトランスレートにより得られた引数リストの先頭にarg0を追加し、_ARGV という名前の変数に束縛する。
  arg0 が何であるかは環境に依存する。
# _OPTS に含まれるプロパティを、変数として束縛する。

$embedを使うと、変数束縛は次のように書ける。

{{{
{
  "_OPTS" : Opts,
  "_ARGV" : Argv,
  "$embed" : Opts
}
}}}

次の式は同じ値（undefinedかもしれない）を持つことが保証される。

* %_OPTS | pv foo と %foo
* %_ARGV | item 0  と %0
* %_ARGV | item 1  と %1

束縛が完了すると、与えられたパラメータデータは変数としてアクセス可能となる。

_OPTS と _ARGV は、%_OPTS | properties 、%_ARGV | each { ... } のような形で使える。


