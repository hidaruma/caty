<<ignore  -*- coding: utf-8 -*- >>

= 新FIT仕様 (1)

現状のCatyFITにはいくつかの問題点があるが、作り直すのではなくて、
少しずつ修正することにより、スキーマ記述、ドキュメンテーション、テストの融合を図る。


== 背景の確認

* [[>http://d.hatena.ne.jp/m-hiyama/20100219/1266546166]]
* [[>http://d.hatena.ne.jp/m-hiyama/20100308/1268011444]]
* [[>http://d.hatena.ne.jp/m-hiyama/20100308/1268014888]]
* [[>http://d.hatena.ne.jp/m-hiyama/20111213/1323764143]]
* [[>http://www.dcs.gla.ac.uk/~simon/publications/banff.pdf]]
* [[>http://www.cs.cornell.edu/~kozen/papers/Hoare.pdf]]

== fit:runコマンド

* 引数によりbehファイルまたはディレクトリを指定できる。ディレクトリを指定するには最後にスラッシュを付ける。
* ディレクトリが指定されると、そのディレクトリの下のビヘイビアファイルを処理対象にする。
* --extオプションにより、ディレクトリ内で検索するファイルの拡張子を指定できる。デフォルトは .beh 。
* --extオプション値では、最初のドットの省略が許される（ドットは付けても付けなくてもよい）。
* --recオプションが付くと、ディレクトリを再帰的に検索する。引数がファイルのときは --rec は無視される（効果がない）。
* --out または --outdir オプションで処理結果の出力先を指定できる。--outは単一ファイルの処理結果、--outdir はディレクトリの処理結果。引数と出力先オプション指定が矛盾していればエラーとする。
* 引数／オプションに指定するファイルもディレクトリも、プレースで修飾できる。
  data@this:/behs/foo.beh, pub@myapp:/test/ なども使える。プレース修飾が省略された場合は、behaviors@this: となる。
* 出力先が指定されなかった場合は、runコマンドが出力先を決める。
** **互換性要求**から、behaviors配下に存在するビヘイビアファイルの処理結果はfit-viewに出力される。
** その他のファイルは、ビヘイビアファイルと同じディレクトリ内に、同じベースネームで拡張子が .fit のファイルが出力される。
（この方式はあまり有用ではないかもしれないので、変更の可能性がある。）

{{{
type mafsPath = string("プレース修飾を許すパス名、末尾がスラッシュならディレクトリ");

type behExt = (
  ".beh"|".wiki"|".lit" |
  "beh" |"wiki" |"lit" |
);


command run
 {
   @[default(false)]
   "debug": boolean?,
   @[default(false)]
   "force": boolean?,
   @[default(false)]
   "verbose": boolean?,
   @[default(false)]
   "no-dry-run": boolean?,
   /** 検索するファイルの拡張子 */
   @[default(".beh")]
   "ext" : behExt?,
   /** ファイルの検索を再帰的に行うかどうか */
   @[default(false)]
   "rec" : boolean?
   /** 処理結果の出力ファイル */
   @[without("outdir")]
   "out" : mafsPath?,
   /** 処理結果の出力ディレクトリ */
   @[without("out")]
   "outdir" : mafsPath?,

   /** すべてのアプリケーションを対象にする
    * このオプションを指定するときは、
    * 引数と、ext/rec/out/outdirオプションは指定できない。
    */
   @[default(false)]
    "all-apps": boolean?,
 }
 [mafsPath? path] :: void -> void;

}}}

== ビヘイビアファイル

拡張子が.behであるファイルは、常にビヘイビアファイルとして扱われる。

拡張子が.wiki、.litであるファイルは、次の条件を満たすときだけビヘイビアファイルとして扱われる。

# ブラグイン記法による <<beh>> がファイルの“冒頭”に現れる。冒頭の意味は以下を参照。
# <<beh>> の前には空白文字、または他のプラグイン（例：<<ignore>>）しか許されない。
# <<beh>> の検索はテキスト行で先頭10行までしか行われない。11行以降に書いても認識されない。
# '<<beh' の後に空白文字は許すが、現状では非空白文字は許さない。将来、パラメータやデータを追加する可能性がある。
# 上記の条件を満たさないファイルが指定されてもエラーとはせず、単にスキップする。

コマンドラインの例：

{{{
fit:run --ext=.lit --rec --outdir=pub@this:/litdoc/ schemata@this:/
}}}


schemataプレースに存在する *.litファイルを再帰的に検索して、処理結果を pubの/litdoc/ の下に書き出す。
schemata@this:/pkg/foo.casm.lit の処理結果は、pub@this:/litdoc/pkg/foo.casm.fit となる。

== 当面の課題

FITディレクティブが混じったWikiファイルやLitファイルに対して、
その処理結果を書き出す形式がハッキリしてない。

FITを「どこでも」使えるようにするには、FIT機能を一種のWikiプラグインのように扱えるべきだろう。

== 今後の予定

* CatyFITシステムを、粒度の細かいコマンドに分解し、他のツールと柔軟に併用可能とする。
* 特に、FIT処理コア部分は標準入出力だけを使うコマンドにする。
* behの構文を見直す。
* behをCatyScriptにコンパイルすることを目標にする。
* CatyFITのテスト＝仕様記述を、**CatyFIT自身で**行えるようにする。
* 仕様記述方式の一環として位置づける。
* また、セルフテスティングの一環としても位置づける。

