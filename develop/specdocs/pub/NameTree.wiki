<<ignore  -*- coding: utf-8 -*- >>

= 名前ツリー

名前構造のように、一見簡単そう（それゆえに先入観や誤解が非常に多い）だが実際には複雑な構造は、
言語的な説明が難しい。
まず描画法を説明し、その描画法で描かれた//絵を見せて「こんなもの」//と説明するのが手っ取り早い。

== 名前ツリーの概要

**名前ツリー**とは、
Caty内の様々な名前付き実体（named entities）をツリーに編成したデータ構造とその可視化図形こことである。
[[SysSpecs/ig.casm.lit|情報グラフ（IG）]]の簡易版である。
IGのディビジョンノードは、名前ツリーの名前空間ノードとなるが、その逆は成立しない（コンテナ直下だけがディビジョンノード）。
また、「ノード型」の意味がIGとは若干異なっている（//統合しなくてはならない//）。
その他、IGとの関係はこの文書の最後で触れる。

名前ツリーはその名のとおりツリー状有向グラフであり次の特徴を持つ。

# ノードの種類は三種
# ノードラベルはノードの型。型はかなりの数がある。
# 辺ラベルは名前

ツリーを有向グラフとみなす方法は、有向辺の方向付けに応じて top down と bottom up の2種があるが、
どっちを取るかはどうでもよい（無向グラフでもよい）。
ここでは、top down -- 親から子の方向を採用する。

== ノードの種類

**ノードの種類**は次の三種。

# c **コンテナ** -- いくつかの名前空間を入れる容器
# ns **名前空間** -- 名前とそれが指示するノードへの参照を持つ
# i **項目** -- 値やデータ

種類は色 an/or 形状で識別する。ここでは、//説明のために仮に//次の形状を使う。

# コンテナ -- 四角
# 名前空間 -- 丸
# 項目 -- 三角

ノードの種類とツリー構造の関係は次の構造制約グラフ（一種のスキーマ）で表現できる。

{{nametree-constr.gif|nametree-constr}}


制約を具体的に列挙すれば：

# ツリーのルートはコンテナまたは名前空間である。（枠が二重のノードがルートになり得る。）
# コンテナの子は名前空間である。
# 名前空間の子は、名前空間、コンテナ、項目のどれでもよい。
# 項目には子がない。

== ノードの型

**ノードの型**は、ノードの種類（接頭辞 c:, ns:, i:）で修飾された名前であり、
ノードラベルに使われる。
ノードの種類が色・形状で識別できるなら、接頭辞（c:, ns:, i:）は不要かもしれないが、ここでは接頭辞も付けることにする。

# システム c:sys
# アプリケーション全体 ns:apps
# アプリケーション c:app
# パッケージ ns:pkg
# モジュール c:mod
# 型 ns:type
# コマンド ns:cmd
# リソース全体 ns:reses
# リソース ns:res
# プレース ns:place
# ディレクトリ ns:dir
# ストレージ全体 ns:strgs
# ストレージ  ns:strg

項目の型にも、type, cmdがあることに注意。

# 型 i:type
# コマンド i:cmd
# アクション i:act
# ファイル i:file
# コレクション i:coll

ノードの型を固定することは難しく、用途や状況によって同じ実体のノード型は変化するかもしれない。

== 名前

**名前**は辺ラベルとして使われる文字列で、構文はIGパスで使える名前に制限しておく。

{{{

IGパスで使える名前 ::= [a-zA-Z]([-_a-zA-Z0-9]*[a-zA-Z0-9])?

}}}

辺には必ず名前が付く。1つのノードから出る複数の辺で名前の重複は許されない。空の名前 "" も許される。
空の名前は描画時には省略される。

1つのノードから出る複数の辺のなかの1本を**デフォルト**として指定してよい（指定しなくてもよい）。
空の名前 "" がある場合は、自動的に空の名前がデフォルトになる（強制される）。

IGでは次の制限を付けている。

# コンテナノードではデフォルトが必須。
# その他のノードではデフォルトを設定しない。

== 辺

辺にはラベル（名前）が付くが、それ以上の個性はない。
視認性の観点から、//コンテナノードと名前空間ノードを結ぶ辺は色や太さを変える。//

== 名前空間名

コンテナノードから名前空間ノードに向かう辺に付けられるラベルを**名前空間名**（namespace name）と呼ぶ。
名前空間名は、できるだけ短い名前とする。
これは、名前ツリーのパスをテキスト表現するときのタイピング量を減らすためである。

== ツリー構造のテキスト表現（説明用）

辺を表すために、仮に次の記法を使う。（コマンド宣言と同じ。）

{{{

名前 :: 親のノード型 -> 子のノード型 ;

}}}

コンテナノードから名前空間ノードに向かう辺は、強調のために => を使う。
その辺がデフォルト辺であるときは、名前を丸括弧で囲む。特に空な名前は () と表す。

== 実例

以下の図では、辺のラベル（名前）はすべて省略している。すぐ後にテキスト表現により名前を補足する。
点々の部分は省略を表す。名前空間ノードどうしを結ぶ波線（名前空間の共有関係）の辺については後述する。

{{nametree-examp.gif|nametree-examp}}


{{{

(a) :: c:sys => ns:apps;
 s  :: c:sys => ns:strgs;

appA :: ns:apps -> c:app;
appB :: ns:apps -> c:app;

p     :: c:app => ns:place;
(pub) :: ns:place -> ns:dir
data  :: ns:place -> ns:dir

(pk) :: c:app => ns:pkg;
pkgA :: ns:pkg -> ns:pkg;
pkgB :: ns:pkg -> c:mod;

(t) :: c:mod => ns:type;
c   :: c:mod => ns:cmd;
r   :: c:mod => ns:reses;

typeA :: ns:type -> i:type;
cmdA ::  ns:cmd -> i:cmd;
resA :: ns:reses -> ns:res
resB :: ns:reses -> ns:res
actA :: ns:res -> i:act

}}}

== 名前空間のあいだの関係

2つの名前空間のあいだに次の関係があり得る。

* **共有**： 名前空間ノードとしては異なっていても、名前の集合を共有している。したがって、
  共有がある2つの名前空間に同じ名前の登録はできない。
  モジュールコンテナのコマンド名の名前空間とリソース名の名前空間は共有されている。
  つまり、同一モジュール内に同名のコマンドとリソースを書けない。
* **部分空間**：AがBの部分名前空間のとき、Aの名前の集合はBの名前の集合の一部になる。
  例外型の名前空間は、public型の名前空間の部分空間になっている。

描画の際は、共有関係にある2つの名前空間ノードを無向辺（矢印を描かない有向辺でよい）で結ぶ。
部分空間とその親の名前空間も辺で結ぶ。これらの辺は、名前ツリーの通常の辺とは区別して描く。

共有関係も部分空間関係もない2つの名前空間は**独立**（無関係）である。
独立な複数の名前空間に同じ名前を登録しても問題ない。

== データ構造としての名前ツリー

ノードと有向辺（top down方向）を持つグラフであり、次の情報と制約を持つ。

# ノードは三種の種類のいずれかである。
# ノードは、ラベルとしてノード型を持つ。
# 項目ノード以外は子を持てるので、子への参照（辺のターゲット）を持つ。
# 辺は、ラベルとして名前を持つ。空な名前も認める。兄弟の辺では名前の重複が許されない。
# 兄弟の辺のなかの1本がデフォルトとしてマークされていてもよい（デフォルトは必須ではない）。
# 空な名前の辺は常にデフォルトとなる。


== IGとの関係

# 名前ツリーはIGの前段階として実装する。
# 名前ツリーの経験によりIGの仕様を洗練させる。
# 名前ツリーのノードはメタデータを持たない。
# IGはメタデータに含まれるコマンドにより子を取得するが、名前ツリーは内部でツリー全体を作ってしまう。
# 名前ツリーは（可能なら）1枚の絵に描画することを主目的としている。一方IGは、
「ヘルプ、ドキュメンテーション、システム状態」などへの統一的なアクセス方法と、
  Webアプリケーション「IGエクスプローラー」の基盤提供を主目的としている。
# IGのノードはXJSON表現を必ず持つ。名前ツリーのノードは描画のための中間データなので、表現を必須とはしない。
  将来的には、名前ツリーのノードに対するXJSON表現も定義すべき。

