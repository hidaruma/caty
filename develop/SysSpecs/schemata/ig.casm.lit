<<ignore // -*- coding: utf-8 -*- >>

= 情報グラフ (Information Graph; IG)


<<{
/** 情報グラフ (Information Graph; IG)
 */
module ig;

}>>

== 概要

情報グラフ (Information Graph; 以下 **IG** と略記)は、Catyの実行環境内にただ1つ存在する
「基点（起点）付き有向グラフ構造」を持った情報データベースである。
だが、IGのデータがストレージに実在するわけではない -- 
IGは//体系的に編成されたコマンド群//により実現される仮想的なグラフである。

IGはツリーではなく、サイクルやループ（自己サイクル）を含むかもしれない一般的な有向グラフである。
ノードに入る辺／出る辺の本数に制限はない（後述のディビジョンノードだけは例外的に制限を持つ）。
したがって、ツリーに関するアルゴリズム（例：深さ優先再帰的トラバース）は適用できない。

IGはツリーではないが、便宜上、基点を**ルート**、ノードから出る辺を経由して隣接しているノードを**子ノード**と呼ぶ。IGの辺は双方向リンクではないので、親ノードの概念はないが、
ノードに入る辺で隣接したノードの1つを**親ノード**として特定することはある。
特に、後述のディビジョンノードには親ノードを要求する。

IGは読み取り専用（readonly）であり、IGに対するAPIによりIGを変更することはできない。
しかし、IGの元になるデータが変更されることによって、IGノードの情報が変わることはある。

IGは（多くの場合は巨大な）グラフだが、その全体がメモリーやディスク内に存在する//わけではない//。
必要に応じてノードが作られて不要なら破棄される。IGへのアクセスは局所的であることを前提しており、
IGに含まれるノード全体をスキャンして検索するような大域的アクセスには向いてない。
検索には別なメカニズムが必要となる。

IGへのアクセスAPIで取得できるデータは単なるXJSONデータであり、得られたデータを変更しても
IG自体には何の影響もない。IGノード自体への参照を得る方法はない。
利用者には、常に情報表現のコピーが渡される。
つまり、IGの実装と実体は隠蔽されている。

== IGの用途

IGは、
「ヘルプ、ドキュメンテーション、システム状態」などへの統一的なアクセス方法を提供する。
これらの情報リソースに対して、IGパス（後述）により名前を付けることができる。

IGパスは、別名や循環参照を許す命名方式である。
別名や循環は取り扱いにくい面もあるが、その一方で柔軟な編成が可能となる。

Caty内の情報リソース群にブラウザからアクセスできるWebアプリケーション
「IGエクスプローラー」の基盤提供が、IGの主たる目的のひとつである。
「IGエクスプローラー」により、ドキュメントのブラウジングや
システム状態のモニタリングが、すべてブラウザから可能となる。

IGの有向グラフ構造は、
URLとハイパーリンクによる有向グラフ構造に自然にマップできることを念頭に置いて設計されている。
ひとつのIGノードは、原則的に一枚のWebページでレンダリングされる。
レンダリング方法はテンプレートとスタイルのセットで指定される。

IGは、Catyの内部Webで、IGパスがURIに相当するとみなせる。Webアプリケーション「IGエクスプローラー」は、
内部Web／内部URIを、実際のWeb／URIの部分空間にマップして情報を公開する仕組みである。

== IGパス

IG上のノードを指し示すために、**IGパス**と呼ばれるパス式を使う。
IGはツリーではないので、ノードに対してルートからのパスが一意的に定まることは保証できない。
1つのノードに複数（無限かもしれない）のパスがあり得る。

パスとは別なUID（一意識別子）を利用すればノードの同一性を判定できるが、
UIDが常に利用できる保証はない。
したがって、同一性（イコール）が部分的にしか定義されてない無限構造と捉える必要がある。

=== IGパスで使える名前

IGパスで使える名前は強く制限されている。

{{{

IGパスで使える名前 ::= [a-zA-Z]([-_a-zA-Z0-9]*[a-zA-Z0-9])?

}}}

使える文字は英数字とハイフン、アンダースコアのみであり、
先頭文字は英字のみ、末尾文字にハイフンとアンダースコアは使えない。

先頭が数字から始まる場合は番号とみなす。
先頭または末尾のハイフン／アンダースコアは、システムが使用する。
英字を国際化することは可能である（必要ならする）。

=== 構文

IGパスでは次の区切り記号を使う。

# '{' と '}' （ブレイス）
# ':' （コロン）
# '.' （ドット）


'.' と同じ意味で '/' も使う。
ただし、'.'と'/'が常に交換可能なわけではない。
ドットの代替としてブラケット'[', ']' も使える。
ドットとブラケットは完全に交換可能である。ここではブラケットを使う記法には触れない。
原則はXJSONパスと同じである。

{{{

名前 ::= {IGパスで使える名前}

基本パス ::=  ディビジョン付き基本パス | ディビジョンなし基本パス

ディビジョン付き基本パス  ::= ディビジョン (':' 基本相対パス)?

ディビジョンなし基本パス  ::= ':' 基本相対パス

ディビジョン ::= '{' 名前? '}' // {} でもよい。

基本相対パス ::= トップレベルセグメント セグメント*

トップレベルセグメント ::= (名前 | 番号)

セグメント ::= '.' (名前 | 番号 )

相対パス ::= 基本相対パス? 基本パス*

絶対パス ::= '$' 基本パス*

}}}

<<ignore ※注意：この構文は若干使いにくい点があるので、修正するかも。 >>


=== 意味の概略

IGパスの意味については後でも述べるが、概略は次のとおり：

# 基本パスは、//コンテナーノードから//可達なノードまでの、中間ディビジョンノードを経由しない//非空な//道を表す。
# 基本相対パスは、//ディビジョンノード//から可達なノードまでの、他のディビジョンノードを経由しない//非空な//道を表す。
# 相対パスは、任意のノードから可達な任意のノードまでの任意の道を表す。//空なパスも含む。//
# 絶対パスは、ルートコンテナーノードから可達な任意のノードまでの任意の道を表す。


== 環境変数 IG_CURRENT, IG_STACK

環境変数IG_CURRENTは、文字列を値すとする変数で、その値は絶対IGパスとなっている。
IG_CURRENTの初期値は "$" であり、
igモジュールのナビゲーションコマンドの実行により、IG_CURRENTの値は変化する。
通常のコマンドは環境変数の変更をできないので、IGナビゲーションコマンドは
システムレベルで実装することになる。

同様に、環境変数IG_STACKもIGナビゲーションコマンドにより書き換えられる。


Webからのアクセスの場合は、これらの環境変数はそのままではうまく使えない。
使うならセッションに保存して管理する必要がある。

== 一般的なデータ型

<<{
/** 型名文字列 */
type typeName = deferred string; // 組み込み型になる予定

/** ノード名として使える名前文字列 */
type name = deferred string;

/** ノードのパス文字列 */
type path = deferred string;

/** コマンドライン文字列 */
type commandline = string(remark="コマンドライン");

/** IGシステム内の一意識別子 */
type uid = @uid (string | number);

}>>


== ノード型

ノードはXJSONオブジェクトで表現される。
オブジェクトのプロパティは、次の2種に分類される。

# システムプロパティ -- IGシステムが使用するの管理情報が入る。
プロパティ名がドル記号からはじまる。
# 情報プロパティ -- 実際の情報項目。
 プロパティ名はCatyの単純名（IGの名前である必要はない）。

=== 標準的な情報項目

IGノードには、何らかのメタデータが蓄えられる。
IGノードの型に制約はないが、推奨される項目（情報プロパティ）は次のとおり。

<<{
/** 標準的な情報項目
 */
type StdInfoPropsMixin = {
 /** ノードリスト内で自身を識別する名前 
  * このプロパティがないときは、番号を使って識別する。
  */
 "name" : name?, // この値はIGの名前である必要がある

 /** UI向けの人間可読文字列 */
 "title" : string?,

 /** 簡単な説明 */
 "description" : string?,

 * : any?
};

}>>

ノードのサマリーとノードの情報（実質は同じデータ型）：

<<{
/** ノードのサマリー */
type Summary = StdInfoPropsMixin & {
 * : any?
}(propNameFormat="simple-name");

/** ノードの情報プロパティを抽出したオブジェクト */
type Info = StdInfoPropsMixin & {
 * : any?
}(propNameFormat="simple-name");

}>>


=== システムプロパティ


<<{
/** システムプロパティ 
 */
type SysPropsMixin = {
 /** このノードのIGパス */
 "$path" : path,
 /** ノード空間内でユニークな識別子 */
 "$uid" : uid?,
 /** ノードの型（Caty型システムにおける型名）*/
 "$nodeType" : typeName?,
 /** 詳細情報 
  * 通常は表示しない
  */
 "$detail" : (SysSpecial | object)?,
 /** システムが使う情報 
  * ノードのキャッシュ情報など
  */
 "$sys" : object?,
 /** 親ノード 
  * ディビジョンノードでは必須。その他ではなくてもよい。
  */
 "$parent" : (SysSpecial | path | uid)?,
 /** デフォルトの子ノード名または番号 
  * コンテンツノードにみ必須。その他では出現しない。
  */
 "$default" : (SysSpecial | string | integer(minimum=0))?,
 /** 子ノードサマリーのリスト */
 @[with("$getChild")]
 "$children" : (SysSpecial | list<Summary>)?,
 /** 子ノードのゲッター */
 @[with("$children")]
 "$getChild" : ChildGetter?,

 // 以下、内容データを持つ場合
 /** 内容データを読み出すゲッター */
 "$readContent" : ContentReader?,
 /** 内容データの型（Caty型システムにおける型名） */
 @[with("$readContent")]
 "$contentType" : typeName?,
 /** 内容データのMIMEメディアタイプ */
 @[with("$readContent")]
 "$contentMediaType" : common:mediaType?,

 // ナビゲーション
 "$next" : (SysSpecial | path | uid)?,
 "$prev" : (SysSpecial | path | uid)?,

  * : any?
};
}>>

=== 特殊プロパティ値

システムプロパティには、「他のデータへの参照」、または
「データを生成するコマンド」を入れることができる。

<<{
/** 参照 
 */
type Reference = @ref {
 /** 参照方式 */
 @[default("uri")]
 "kind" : string?,

 /** 参照先を識別するID文字列 */
 "id" : string
};

/** ゲッターコマンド */
type Getter = @getter commandline;

type ChildGetter = Getter;
type ContentReader = Getter;

/** システムプロパティにだけ使える特殊な指定 */
type SysSpecial = Reference | Getter;

}>>

=== ナビゲーション情報

ノードのナビゲーション情報は、ノードのプロパティと環境変数IG_CURRENTから取れる。

ノードのプロパティから：

# child -- 子ノード（名前か番号で指定する）
# next -- 次のノード
# prev -- 前のノード

環境変数IG_CURRENTから：

# up -- カレントパスの1つ上のノード
# div -- カレントパスが所属するディビジョン

ルートノードには、'$' という決まった名前でアクセスできる。

=== ゲッターコマンド

Getter型データには、ゲッターコマンドを呼び出すコマンドラインを指定できる。

ChildGetterコマンドは、次のプロファイルを持つコマンドである。

{{{
 {
  /** 引数をインデックス番号と解釈する */
  @[default(false)]
  "index" : boolean?,
 }
 [/** 子ノードの名前または番号 */ string name-or-index]
 :: Node -> Node throws NodeNotFound;
}}}

ContentReaderコマンドは、次のプロファイルを持つコマンドである。

{{{
 :: Node -> any;
}}}

当面、次のようにコマンドラインを実行する。（あまりいい方法ではないが。）

* ChildGetterコマンドを、名前の引数で呼び出すとき： name引数を文字列appendする 
* ChildGetterコマンドを、番号の引数で呼び出すとき：--indexオプションとname引数を文字列appendする 
ContentReaderコマンドは呼び出すとき： そのまま


=== ノード型の定義


* ディビジョンノード -- ディビジョンは名前空間を提供する。
 ある名前空間のルートに相当する。ディビジョン配下のパスは ':' に続けて書く。
 ディビジョンノードは唯一の親を持ち、その親はコンテナーノードでなくてはならない。
* コンテナーノード -- 起点となるノード。
 概念的には、コンテナーはそのコンテナー内で一意な名前を持つディビジョンの集まりを表す。
 コンテナーノードの子はディビジョンノードでなくてはならない。
 （ディビジョン以外の子ノードを持つことはできない。）
  必ず1つのディビジョンがデフォルトディビジョンとして特定されている。ディビジョンは、{ディビジョン名}    により選択される。
 ルートノードはコンテナーノードである。
* 一般ノード -- コンテナーでもディビジョンでもないノード。

<<{
/** ノード型 */
type Node = (ContainerNode | DivisionNode | GeneralNode);

/** コンテナーノード型 */
type ContainerNode = @container (StdInfoPropsMixin & SysPropsMixin & {
 // デフォルトが必須
 "$default" : (SysSpecial | string | integer(minimum=0)),
 * : any?
});

/** ディビジョンノード型 */
type DivisionNode = @division (StdInfoPropsMixin & SysPropsMixin & {
 // 親が必須
 "$parent" : (SysSpecial | path | uid),
 // デフォルトは持たない
 "$default" : undefined,
  * : any?
});

/** 一般ノード型 */
type GeneralNode = (StdInfoPropsMixin & SysPropsMixin & {
 // デフォルトは持たない
 "$default" : undefined,
  * : any?
});

}>>

=== 仮想プロパティのコマンド

Node型には次の仮想プロパティが使える。
これらは、単独のコマンドとしても使える。

<<{
command nodeType :: Node -> (typeName | undefined);
command default :: Node -> (string | undefined);

// 内容データ
command hasContent :: Node -> boolean;
command contentType :: Node -> (typeName | undefined);
command contentMediaType :: Node -> (string | undefined);
command content :: Node -> (any | undefined);

// 子ノードリスト
command hasChildren :: Node -> boolean;
command children :: Node -> (list<Summary> | undefined);

}>>

== 同一性の判定

IGのノードは、システム内に存在する何らかの**情報リソース**を表現している。
よって、ノードの同一性とはノードが表現する情報リソースの同一性となる。

# パスが同じノードは同一である（自明な同一性）
# システムプロパティ$uidが存在する場合、$uidが同じノードは、パスが異なっても同一とみなせる。
# それ以外の場合は、ノードの同一性を判断できない。

== 例外の定義


<<{
/** ノードが存在しない */
exception NodeNotFound = deferred;

/** 子ノードが存在しない */
exception NoChildren = deferred;

/** ノードの内容データが存在しない */
exception NoContent = deferred;

}>>

== 問い合わせコマンド

<<{
/** 指定されたノードを出力する 
 * 引数を省略するとカレントノードが対象。
 */
command get 
 {
   /** ノードがないときはエラーではなくてundefinedを出力する */
   @[default(false)]
   "safe":boolean?,
 }
 [path? ig-path] 
 :: void -> (Node | undefined) 
 throws NodeNotFound;

/** 子ノード（サマリー）のリストを出力する 
 * 引数を省略するとカレントノードが対象。
 */
command list 
 {
   /** 子を持たないときはエラーではなくてundefinedを出力する */
   @[default(false)]
   "safe":boolean?,
 } 
 [path? ig-path] 
 :: void -> (list<Summary> | undefined) 
 throws [NodeNotFound, NoChildren];

/** 指定されたノードの情報を出力する 
 * 引数を省略するとカレントノードが対象。
 */
command show
 {
   /** trueのときは詳細情報をマージする */
   @[default(false)]
   "detail" : boolean?
 }
 [path? ig-path]
  :: void -> Node
  throws NodeNotFound ;

/** 指定されたノードの内容データを読んで出力する 
 * 引数を省略するとカレントノードが対象。
 */
command read [path? ig-path]  :: void -> any
                              throws [NodeNotFound, NoContent];

}>>

== ナビゲーションコマンド

ナビゲーションコマンドは、環境変数 IG_CURRENT, IG_STACK を操作する。

<<{
/** カレントノードのパスを出力する */
command curr :: void -> path;

/** ルートノードに移動 */
command root :: void -> void ;

/** カレントノードが所属するディビジョンに移動 */
command div :: void -> void ;

/** 引数で指定されたノードに移動 */
command ch [path ig-path] :: void -> void throws NodeNotFound;

/** カレントパスにおける1つ上位のノードに移動 */
command up [integer(minimum=1)] :: void -> void ;

/** カレントノードの次のノードに移動 */
command next :: void -> void throws NodeNotFound;

/** カレントノードの前のノードに移動 */
command prev :: void -> void throws NodeNotFound;

// 以下、スタック操作

/** IGスタックを出力する */
command stack :: void -> [path*];

/** スタックにカレントパスをプッシュして、指定されたパスに移動する 
 * 引数が指定されてないなら、移動はしない。
 */
command push [path? ig-path] :: void -> void;

/** スタックトップのパスに移動する
 * スタックが空なら何もしない。
 * スタックトップは取り出され捨てられる。
 */
command pop :: void -> void;

/** スタックをすべてクリアーする 
 * それ以外は何もしない。
 */
command clear :: void -> void;

/** スタックトップを破棄する
 * それ以外は何もしない。
 * 引数が指定されていれば、その個数だけの
 * スタック項目を破棄する。
 * スタックが空になればそれ以上は何もしない。
 */
command drop [integer(minimum=1) num] :: void -> void;

}>>



<<ignore

/* ========================================================== */
/* ========================================================== */
/* ========================================================== */
/* ========================================================== */


/** コマンド実行のための構造体 
 */
type Exec = {

 /** コマンドを参照する文字列  */
 "command" : commandRefString,

 /** コマンドに渡すオプションパラメータ */
 @[default({})]
 "opts" : {*: any?}?,

 /** コマンドに渡す _ARGV[0] */
 @[default("")]
 "arg0" : string?,

 /** コマンドに渡す _ARGV[1] 以降 */
 @[default([])]
 "args" : [any*]?,

 /** コマンドの環境に追加（マージ）するオブジェクト */
 @[default({})]
 "additionalEnv" : object?,

};

/* === */


type Meta = @Meta MetaObj;


/** シンボリックリンクのオブジェクト
 */
type SymLink = @SymLink (MetaObj ++ {

 /** リンクターゲットを指すパス名 */
 "target" : path,

});

/** 一般的なノード
 */
type Node = @Node (MetaObj ++ {

 "info" : any?,

 /** 一般パスを特定構文のパスに変換するコマンド
  * * 入力 -- 一般パス文字列
  * * 出力 -- 特定パス文字列またはnull
  */
 "convertToSpecific" : Exec?,

 /** 一般パスを特定構文のパスに変換するコマンド
  * * 入力 -- 特定パス文字列
  * * 出力 -- 一般パス文字列またはnull
  */
 "convertToGeneral" : Exec?,

 @[with("next")]
 "defaultRel" : string?,

 @[with("defaultRel")]
 "next" : {
   * : (List | DynList)?
  }?,
});

/** 動的ノード
 */
type DynNode = @DynNode (MetaObj ++ {

 /** ノードの実体を得るために実行すべきコマンド */
 "exec" : Exec,

});

/** ノードリスト
 */
type List = [
 (Node|DynNode|SymLink)*
];

type DynList = @DynList Exec;


/* ============ */
/*== コマンド ==*/
/* ============ */


/** ルートノードを取得する */
command root 
:: void -> Node;



/** 次のノードを取得する
 * 次のノードが見つからなかった場合はnullを出力する
 * 入力ノードにシンボリックリンクと動的ノードは許されない。
 * シンボリックリンクと動的ノードは前もってresolveしておく。
 */
command next 
{
  /** 次リンクの関連名 
   * これが省略された場合は defaultRel が使われる。
   */
  "rel":string?,

  /** 解決をしない
   * true の場合は、シンボリックリンクと動的ノードの解決をしない。
   */
  "raw": boolean?,
} 
[
  /** 次ノードの参照名 */
  name
] 
:: Node -> (Node|DnyNode|SymLink|null) ;


/** シンボリックリンクと動的ノードを解決する
 * Nodeには何もしない。
 * 解決が失敗した場合はnullを出力する。
 */
command reslove
:: (Node|DynNode|SymLink) -> (Node|null) ;

>>


<<ignore
/*{{{

/** ノードのメタ情報を抜き出す
 * 入力ノードにシンボリックリンクと動的ノードは許されない。
 * シンボリックリンクと動的ノードは前もってresolveしておく。
 */
command meta 
:: Node -> Meta
refers;

/*

command specific gRelPath
:: Node -> string

command general sPath
:: Node -> string



command node {"raw": boolean?} [path] 
:: void -> Node
refers;



command list {"raw": boolean?, "rel":string?} [path] 
:: void -> List
refers;

*/



// End of Module


}}}*/
>>
