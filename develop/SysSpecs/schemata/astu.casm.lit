<<ignore -*- coding: utf-8 -*- >>

= ASymmetric Type Unification 


<<{
/** ASymmetric Type Unification 
 * 型解析の基本アルゴリズムの実験
 */
module astu; 

}>>

型表現（type expression）をXJSONデータにレイフィケーションして、
型表現の代理であるXJSONデータの操作により型単一化を行う。
ここで扱う型単一化は非対称（不等式的）であり、単一化の結果は、
型（＝集合）の包含関係の真偽または成立条件となる。

別な言い方をすると、非対称単一化により、
型（＝集合）の連立不等式系の可解性が判断できる。
（包含関係⊆を不等号とみなす。）

実行例：

{{{
caty:SysSpecs> [@_var "x", @_boolean true] | astu:do
$x ⊆ true
caty:SysSpecs> [@_string "hello" , @_var "y"] | astu:do
"hello" ⊆ $y
caty:SysSpecs> [@_array [@_string "hello", @_var "x"] , @_array [@_var "y", @_var "z"]] | astu:do
"hello" ⊆ $y
$x ⊆ $z
caty:SysSpecs> [@_array [@_string "hello", @_var "x"] , @_array [@_var "y"]] | astu:do
**CAN NOT**
caty:SysSpecs>
}}}

== 制限と前提

# インターセクション（&）とマージ（++）は前もって計算されているとする。
# ユーザー定義型は考えない。前もって展開されているとする。
# オプション型 A? は (A | undefined) と展開して表現する。ただし、any? は特別にアトミックな型と考える。
  （any?は順序構造のトップ。anyはトップではなく余アトミックな要素。）
# タグ付き型のタグは明示的タグだとする。暗黙タグの正規化（消去）は済んでいるとする。
# スキーマ属性は考えない。
# integer型は、numberにスキーマ属性が付いたものと解釈するので、考えない。
# 配列のクリーネスター、オブジェクトのプロパティ名ワイルドカードは考えない。
# アノテーションと文書コメントは考えない。
# タグ名ワイルドカードは考えない（リテラルタグのみ）。
# 再帰的に定義された型は考えない（サイクルの処理が必要）。
# バッグ型は考えない（等号が異なる）。
# 型変数は許すが、ユニオン型の選択肢には出現できない。
# 型変数の意図せぬ捕捉（本来違う変数が偶発的に同じ名前になること）が起きないようにリネームは済んでいるとする。
# 型変数は、視認性から接頭辞'$'を付けて表示する。


----

クリーネスター／ワイルドカード（星印付き型）と再帰は無限構造を導入するが、
実用上は無限構造を避けては通れない。
無限構造、特に再帰をを扱うときには、ここで述べるようなやり方（構文駆動方式）が向いているとは限らない。

スキーマ属性を導入すると、
「台集合＋論理式」からなる制限型（restricted type）／部分集合型（subset type）が現れる。
台の操作と論理計算を組み合わせる必要が出てくる。


<<{

/** 型を表現するデータ */
type TypeExpr = (
 SpecialType |
 BasicType   |
 ProductType |
 UnionType   |
 TypeVar     |
 // 再帰的な型のためにRefを追加
 // これはユーザー定義型とは無関係
 Ref         |

);

}>>

== 基本型 

undefined型、null型、boolean型、nunmber型、string型、binary型と、すべてのスカラーシングルトン型（リテラル）が基本型。
nullは型名とリテラル表記が同じなので、型名として処理して、シングルトン型からは除く。
undefined型は（後述の）特殊な型に分類するのが適切かもしれない。

基本型は、次のデータで表現される。

# "undefined"
# "null"
# "boolean"
# "number"
# "string"
# "binary"
# @_boolean true, @_boolean false
# @_number n （nは任意の数）
# @_string s （sは任意の文字列）

スカラー基本型を表す名前以外の名前（の文字列）はユーザー定義データ型の名前とみなすが、
ここでは扱わない。

<<{
type BuiltinType = (
 "undefined"|
 "null"     |
 "boolean"  |
 "number"   |
 "string"   |
 "binary"   |
);

type BooleanSingletonType = @_boolean boolean;
type NumberSingletonType  = @_number  number;
type StringSingletonType  = @_string  string;

type BasicType = (
  BuiltinType | 
  BooleanSingletonType |
  NumberSingletonType  |
  StringSingletonType  |
);

}>>

== 積・複合型 

集合の直積（の変種）により構成された型を積・複合型と呼ぶ。
配列型、オブジェクト型、タグ付き型がある。

積・複合型は、次のデータで表現される。

<<{
/** 配列型 */
type ArrayType = @_array [TypeExpr*];

/** オブジェクト型 */
type ObjectType = @_object {* : TypeExpr?};

/** タグ付き型 */
type TaggedType = @_tagged (@*! TypeExpr);

/** 直積ベースの型 */
type ProductType = (
 ArrayType  |
 ObjectType |
 TaggedType |
);

/** ユニオンを構成する要素的な型 */
type ChoosableType = (
  BasicType   |
  ProductType |
  // 再帰で追加
  Ref         |
);


/** ユニオンではない型 */
type ElementalType = (
  TypeVar     |
  BasicType   |
  ProductType |
  Ref         |
);


}>>

== 和・複合型 

集合の直和により構成された型を和・複合型と呼ぶ。排他的ユニオン型ともいう。

和・複合型は、次のデータで表現される。

<<{

/** ユニオン型 */
type UnionType = @_union {
  "specified" : [ChoosableType, /*ChoosableType, */ChoosableType*],

  @[default("never")]
  "other" : ("never" | TypeVar | @other TypeExpr)?,
};

}>>

== 特殊な型

any? を独立の型のように扱うことにする。

<<{

/** 特殊な型 */
type SpecialType = (
  "never" |
  "any"   |
  "any?"  |
);

}>>

== 型変数

<<{
type TypeVar = @_var string;

}>>

== インスタンスの型への埋め込み

<<{

command to-type :: any? -> TypeExpr
{
 when {
 /* 基本型 */
  undefined => "undefined",
  null      => "null",
  boolean   => @_boolean pass,
  number    => @_number pass,
  string    => @_string pass,
 /* 積・複合型 */
  array     => each { call astu:to-type } | @_array pass,
  object    => each --obj { call astu:to-type } | @_object pass,

 /* その他はタグ付き型 */
  *         ==> [tag, (untagged | call astu:to-type)] | tagged | @_tagged pass,
 }
};

}>>

== 文字列化

<<{

/** 型表現を文字列化する */
command print :: (TypeExpr|RecTypeExpr) -> string
{
 case {
  // 基本型と特殊な型
  string            => pass,
  @_boolean boolean => untagged | to-string,
  @_number number   => untagged | to-string,
  @_string string   => untagged | json:pretty, // カンマ忘れてエラーにならない ^^;

  // 積・複合型
  @_array  array    => untagged | each {call astu:print} | text:join ", " | ["[", pass, "]"] | text:concat,
  @_object object   => untagged | call astu:print-object, // 下請けに回す
  @_tagged any      => untagged | ["@", tag, " ", untagged | call astu:print] | text:concat,

  // 和・複合型
  @_union object    => untagged | pv specified 
                      | each {call astu:print} | text:join " | " | ["(", pass, ")"] | text:concat,

  // 型変数
  @_var string      => ["$", untagged] | text:concat,

  RecTypeExpr       => "TBD",

 }
};

/** オブジェクト型を文字列化する */
command print-object :: {*:TypeExpr?} -> string
{
  each {[%_key, call astu:print]} |
  dump --prefix="print-object" |
  each {[nth 1 | json:pretty, ":", nth 2] | text:concat} |
  text:join ", " | ["{", pass, "}"] | text:concat
};

}>>

== 2つのオブジェクト型のプロパティ名セットをそろえる


<<{

command commonalize :: [{* : TypeExpr?} left, {* : TypeExpr?} right] ->  [{* : TypeExpr?} left, {* : TypeExpr?} right]
{
 [
   nth 1 > left  | properties > left-props, 
   nth 2 > right | properties > right-props
 ];

 [%right-props, %left-props ] | set:diff > left-diff ;
 [%left-props,  %right-props] | set:diff > right-diff;

 [
   [
     %left-diff | each {[pass, "undefined"]} | array-to-object,
     %left
   ] | json:merge,

   [
     %right-diff | each {[pass, "undefined"]} | array-to-object,
     %right
   ] | json:merge,
 ]
};

}>>

== 単一化

* unify
* unify-left-elemental
* unify-both-elemental

<<{

type TypePair = [TypeExpr, TypeExpr];

type Result = @True [TypePair*] | @False null | @Indef null | @Error any;


command unify :: [TypeExpr left, TypeExpr right] -> Result
{
 [nth 1 > left, nth 2 > right];

 %left |
 when {
  _var   => 
    @True [ [%left, %right] ],
  _union => 
    pv specified |
    each {
      [pass, %right] | dump --prefix="unify (union)" | call astu:unify-left-elemental
    }  | cpl:gather,

  * ==> [pass, %right] | dump --prefix="unify (other)" | call astu:unify-left-elemental,
 }
};

command unify-left-elemental :: [TypeExpr left, TypeExpr right] -> Result
{
 [nth 1 > left, nth 2 > right];

 %right |
 when {
  _var   => 
    @True [ [%left, %right] ],
  _union =>
    pv specified |
    each {
     [%left, pass] | call astu:unify-both-elemental
    } | dump --prefix="unify-left-elemental (union)" | cpl:choose,

  * ==> [%left, pass] | call astu:unify-both-elemental,
 }

};

command unify-both-elemental :: [TypeExpr left, TypeExpr right] -> Result
{
 [nth 1 > left, nth 2 > right];

 %left |
 when {
  _array  => pass > left-items;
     %right |
     when {
      _array => [%left-items, pass] | call astu:unify-array-items,
      * => @False null,
     },
  _object  => pass > left-properties;
     %right |
     when {
      _object => [%left-properties, pass] | call astu:unify-object-properties,
      * => @False null,
     },
   _tagged => pass > left-tagged;
     %right |
     when {
      _tagged => [%left-tagged, pass] | call astu:unify-tagged,
      * => @False null,
     },

   // 型変数または複合型以外の型
    *    ==> [pass, %right] | call astu:unify-simple
 }
};


}>>


== 積・複合型の単一化

* unify-array-items
* unify-object-properties
* unify-tagged

<<{

command unify-array-items :: [[TypeExpr*] left, [TypeExpr*] right] -> Result
{
 [nth 1 > left, nth 2 > right];

  // 最初に長さを調べる
  [%left | list:length, %right | list:length] | eq |
  when {
   Diff => @False null, // 失敗
   Same => [%left, %right] | list:zip |
           // 配列の項目ごとに単一化
           each { call astu:unify } | cpl:gather,
  }
};

command unify-object-properties :: [{* : TypeExpr?} left, {* : TypeExpr?} right] -> Result
{
 commonalize | [nth 1 > left, nth 2 > right]; // プロパティ名セットを最初に揃える

 [
   %left  | each {pass}, 
   %right | each {pass}
 ] | list:zip | dump --prefix="unify-object-properties" |
 // オブジェクトのプロパティごとに単一化
 each { call astu:unify } | cpl:gather
};


command unify-tagged :: [(@*! TypeExpr) left, (@*! TypeExpr) right] -> Result
{
 [nth 1 > left, nth 2 > right];

  // 最初にタグ名を調べる
  [%left | tag, %right | tag] | eq |
  when {
   Diff => @False null, // 失敗
   Same => // 次に内容（untagged部）を調べる 
           [%left | untagged,  %right | untagged] | call astu:unify
  }
};

}>>

== 基本的な型と特殊な型の単一化

* unify-simple

<<{
command unify-simple :: [TypeExpr left, TypeExpr right] -> Result
{
  dump --prefix="unify-simple" |
  cond {
   ["never",               any] => @True [],
   [any,                "any?"] => @True [],
   ["any",              "any" ] => @True [],
   
   ["undefined",   "undefined"] => @True [],
   ["null",        "null"]      => @True [],
   ["null",        "any" ]      => @True [],
   ["boolean",     "boolean"]   => @True [],
   ["boolean",     "any"    ]   => @True [],
   ["nummer",      "number" ]   => @True [],
   ["nummer",      "any"    ]   => @True [],
   ["string",      "string" ]   => @True [],
   ["string",      "any"    ]   => @True [],
   ["binary",      "binary" ]   => @True [],
   ["binary",      "any"    ]   => @True [],

   [@_boolean boolean, "boolean"] => @True [],
   [@_boolean boolean, "any"    ] => @True [],

   [@_number number, "number"]  => @True [],
   [@_number number, "any"   ]  => @True [],
   [@_number number, @_number number]  => compare-values,

   [@_string string, "string"]  => @True [],
   [@_string string, "any"   ]  => @True [],
   [@_string string, @_string string]  => compare-values,
  
   * => @False null,
 }
};

command compare-values :: [any, any] -> Result
{
  [untagged, untagged] | eq |
  when {
   Same => @Ture [],
   Diff => @False null,
  }
};

}>>

== 単一化の結果の表示

<<{

command print-result :: Result -> string
{
 when {
  True => dump --prefix="print-result" |
     each {
       [nth 1 | astu:print, " ⊆ ", nth 2 | astu:print] | text:concat
      } | text:join "\n",
  * => "**CAN NOT**"
 }
};

command do :: [TypeExpr left, TypeExpr right]  -> void
{
  unify | print-result | cout
};

}>>

== 単一化を利用したバリデーションと型等号

<<{

command validate :: [any, TypeExpr] -> Result
{
  [nth 1 | to-type , nth 2] | unify
};

command do-vali :: [any, TypeExpr]  -> void
{
  validate | print-result | cout
};

/** teq = type equals */
command teq :: [TypeExpr, TypeExpr] -> Result
{
  [nth 1 > left, nth 2 > right];
 
 [
   [%left,  %right] | unify, 
   [%right, %left ] | unify
 ] | cpl:gather
};

command do-teq :: [TypeExpr, TypeExpr]  -> void
{
  teq | print-result | cout
};

}>>

== 再帰的な型 -- はじめに

非再帰的（non-recursive）な型に関する単一化アルゴリズムを書いた。
これに加えて再帰的な型の単一化アルゴリズムを示すが、
一部は非再帰版を利用しなばら、コピー＆モディファイ方式で再帰版を書くので、
冗長コードが多い鬱陶しいものとなる。

非再帰／再帰をひとつにまとめる作業は次の機会として、
再帰的な型に対して//とりあえずは動く//アルゴリズムを記述することにする。

=== ツリーからグラフへ

非再帰的な型表現（type expression, type term）の構文データはツリーとなる。
それに対して、再帰的な型表現はサイクルを許す有向グラフとなる。（以下、グラフと言えばそれは有向グラフ。）

我々が対象とすべき有向グラフ全体の集合を Graph とする。

* G∈Graph  ⇔  Gは有向グラフである

グラフGに対して、Gに含まれる独立なサイクルの個数を β(G) とする。
β(G) （1次元のベッチ数）は、Gのトポロジーから決まる非負整数である。

* β(G) = 0 ⇔ Gはサイクルを持たない
* β(G) ≧ 1 ⇔ Gはサイクルを持つ

ACyclicGraph と CyclicGraph を次のように定義する。

* ACyclicGraph = {G∈Graph | β(G) = 0 }
* CyclicGraph = {G∈Graph | β(G) ≧ 1 }

定義より、Graph = ACyclicGraph + CyclicGraph となる。ここで、「+」は集合の直和である。

Graphに対応する型構文構造を**TypeGraph**（型グラフ）、
ACyclicGraphに対応する型構文構造を**NonrecTypeGraph**（非再帰的型グラフ）
CyclicGraphに対応する型構文構造を**RecTypeGraph**（再帰的型グラフ）と命名する。

型グラフは、名前が付いたツリーの集合（named forest）と参照ノードで表す。
このデータ構造は、型に関するletrec式に素直に対応する。
このデータ構造を採用するのは、
CatyScriptでも比較的容易に扱えるからであり、意味的に同値な他のデータ構造が色々ある。


== 再帰的な型

<<{
/** 再帰的な参照 
 * サイクルの戻り点（loop-back point）。
 * 再帰的な型の型表現内に出現する。
 * 非再帰的な型では出現しない。
 */
type Ref = @_ref string;

/** 再帰のルート
 * サイクルの基点。
 * unifyrecだけで内部的に使う。
 */
type Root = @_root {
  "name" : string,
  "type" : TypeExpr,
};

/** 再帰のルートを追加した型表現
 * unifyrecだけで内部的に使う
 */
type RootedTypeExpr = TypeExpr | Root;

/** 再帰的な型を表現するデータ */
type RecTypeExpr = @_rec {
 "$" : TypeExpr,
 * : TypeExpr?
};

}>>

=== 補足的な注意

RecTypeExprはRecTypeGraphと同じ意味である。
RecTypeExprには必ずサイクルがあると仮定する。

再帰と非再帰を一緒に扱うときは、次のようなデータを使うことになるだろう。

{{{
type TypeGraph = @_type {
 /** 再帰しているかどうかのフラグ */
 "rec" : boolean,

 "$" : TypeExpr,
  * : TypeExpr?
};
}}}

== 再帰的な型のサンプル

{{{
type t1 = t1;

type t2 = (number | t2);

type t3 = {"left": t3, "right":t3};

type t4 = {"val": number, "next":t4};
}}}

<<{
/** ループ */
command loop :: void -> RecTypeExpr
{
  @_rec {
   "$" : @_ref "$"
  }
};

/** ループして数値 */
command loopnum :: void -> RecTypeExpr
{
  @_rec {
   "$" : @_union{"specified":[@_ref "$", "number"]}
  }
};


/** ノード値を持つツリー */
command vtree :: void -> RecTypeExpr 
{
  @_rec {
   "$": @_object {
      "val" : @_union{"specified":["undefined"],"other":@_var "Val" },
      "left": @_union{"specified":[@_ref "$"],"other":@_var "Leaf"},
      "right": @_union{"specified":[@_ref "$"],"other":@_var "Leaf"},
    }
  }
};

/** 標準的なツリー構造 */
command tree :: void -> RecTypeExpr 
{
  @_rec {
   "$": @_object {
      "left": @_union [@_var "Leaf", @_ref "$"],
      "right": @_union [@_var "Leaf", @_ref "$"],
    }
  }
};

/** 左にだけ伸びるツリー構造 */
command ltree :: void -> RecTypeExpr 
{
  @_rec {
   "$": @_object {
      "left": @_union [@_var "Val", @_ref "$"],
      "right": @_var "Val",
    }
  }
};

/** 右にだけ伸びるツリー構造 */
command rtree :: void -> RecTypeExpr 
{
  @_rec {
   "$": @_object {
      "left": @_var "Val",
      "right": @_union [@_var "Val", @_ref "$"],
    }
  }
};

}>>

== 再帰的型の単一化

<<{

/** 再帰的型の単一化のエントリーポイント */
command unifyrec :: [RecTypeExpr, RecTypeExpr] -> Result
{
 [nth 1 > left, nth 2 > right];

 [
   %left,
   @_root {"name":"$", "type": %left | pv "$"},
   %right,
   @_root {"name":"$", "type": %right | pv "$"},
   {}
 ] | unifyrec0
};


command unifyrec0 :: [RecTypeExpr, RootedTypeExpr, RecTypeExpr, RootedTypeExpr, object] -> Result
{
  [nth 1 > left, nth 2 > lcurr, nth 3 > right, nth 4 > rcurr, nth 5 > visited];
// [%left, %lcurr, %right, %rcurr, %visited] | dump --force --prefix="Enter unifyrec0, arguments:";
  [%left, %lcurr, %right, %rcurr, %visited] | json:pretty | logging:debug --cout;


 [%lcurr, %rcurr] |
 cond {
 // 両方がルート
  [@_root any, @_root any] =>
      [nth 1 | pv name > left-name, nth 2 | pv name > right-name];
      // 過去の訪問記録を調べる
      [%visited, %right-name] | mvo:has-val %left-name |
      when {
       False => // 訪問してない、はじめて
          // 記録する
          [%visited, %right-name] | mvo:add-val %left-name > new-visited;
	  // 先に進む
          // ルートマーカーを外して再帰
          [%left, (%lcurr | pv type), %right, (%rcurr | pv type), %new-visited]
          | call astu:unifyrec0,
       True => // すでに訪問済み
          // それじゃオワリ
          @True [],
      },

 // 左だけがルート
  [@_root any, any] => 
      // ルートマーカーを外して再帰
      [%left, (%lcurr | pv type), %right, %rcurr, %visited]
      | call astu:unifyrec0,

 // 右だけがルート
  [any, @_root any] => 
      // ルートマーカーを外して再帰
      [%left, %lcurr, %right, (%rcurr | pv type), %visited]
      | call astu:unifyrec0,



 /* 注意： 参照が間違っているときは例外で終わる */

 // 両方が参照
 [@_ref string, @_ref string] =>
     [nth 1 | untagged > left-name,  nth 2 | untagged > right-name];
     %left  | pv %left-name  | @_root {"name":%left-name,  "type": pass} > new-lcurr;
     %right | pv %right-name | @_root {"name":%right-name, "type": pass} > new-rcurr;
     // 参照を解決して再帰
     [%left, %new-lcurr, %right, %new-rcurr, %visited]
     | call astu:unifyrec0,

 // 左だけが参照
 [@_ref string, any] =>
     [nth 1 | untagged > left-name,  nth 2 > new-rcurr];
     %left  | pv %left-name | @_root {"name":%left-name,  "type": pass} > new-lcurr;
     // 参照を解決して再帰
     [%left, %new-lcurr, %right, %new-rcurr, %visited]
     | call astu:unifyrec0,

 // 右だけが参照
 [any, @_ref string] =>
     [nth 1 > new-lcurr,  nth 2 | untagged > right-name];
     %right | pv %right-name | @_root {"name":%right-name, "type": pass} > new-rcurr;
     // 参照を解決して再帰
     [%left, %new-lcurr, %right, %new-rcurr, %visited]
     | call astu:unifyrec0,


  * =>
    [%left, %lcurr, %right, %rcurr, %visited] | dump --force --prefix="Exit unifyrec0, arguments:";
    @False null,

 }

};



}>>



~<<{

command unify1 :: [RecTypeExpr, RootedTypeExpr, RecTypeExpr, RootedTypeExpr, object] -> Result
{
  pass > in | [nth 1 > left, nth 2 > lcurr, nth 3 > right, nth 4 > rcurr, nth 5 > visited];

 %lcur |
 when {
  _var   => 
    @True [ [%lcurr, %rcurr] ],
  _union => 
    pv specified |
    each {
      [%left, pass, %right, %rcurr, %visited] | 
      dump --prefix="unify1 (union)" | call astu:unify-left-elemental1
    }  | cpl:gather,

   // other部の処理をサボっている

  * => %in | dump --prefix="unify1 (other)" | call astu:unify-left-elemental1,
 }
};

command unify-left-elemental1 :: [RecTypeExpr, RootedTypeExpr, RecTypeExpr, RootedTypeExpr, object] -> Result
{
  pass > in | [nth 1 > left, nth 2 > lcurr, nth 3 > right, nth 4 > rcurr, nth 5 > visited];

 %rcurr |
 when {
  _var   => 
    @True [ [%lcurr, %rcurr] ],
  _union =>
    pv specified |
    each {
     [%left, %lcurr, %right, pass, %visited] | 
     call astu:unify-both-elemental1
    } | dump --prefix="unify-left-elemental (union)" | cpl:choose,

   // other部の処理をサボっている

  * => %in | call astu:unify-both-elemental1,
 }

};

command unify-both-elemental1 :: [RecTypeExpr, RootedTypeExpr, RecTypeExpr, RootedTypeExpr, object] -> Result
{
  [nth 1 > left, nth 2 > lcurr, nth 3 > right, nth 4 > rcurr, nth 5 > visited];


 %lcurr |
 when {
  _array  => pass > left-items;
     %rcurr |
     when {
      _array => [%left-items, pass] | 
                call astu:unify-array-items,
      * => @False null,
     },
  _object  => pass > left-properties;
     %rcurr |
     when {
      _object => [%left-properties, pass] | 
                 call astu:unify-object-properties,
      * => @False null,
     },
   _tagged => pass > left-tagged;
     %rcurr |
     when {
      _tagged => [%left-tagged, pass] | 
                 call astu:unify-tagged,
      * => @False null,
     },

   // 型変数または複合型以外の型
    *    ==> [pass, %right] | call astu:unify-simple
 }
};


~}>>
