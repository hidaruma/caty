<<ignore  -*- coding: utf-8 -*- >>

= unclose構文


{{{
type UncloseInputObj = {
  /** 上書きでセットする変数と値 */
  @[default({})]
  "set": object?,

  /** アンセットする変数達 */
  @[default([])]
  "unset": [string*]?,

  /** 入力 */
  @[default(null)]
  "input": univ?,
};

type UncloseInputArr = [
  /** 上書きでセットする変数と値 */
  @[default({})]
  object? set,

  /** 入力 */
  @[default(null)]
  univ? input,

  /** アンセットする変数達 */
  @[default([])]
  [string*]? unset,

];
}}}


== !exec 配列を入力とする場合

|= !command                                           |= !output  |= コメント |
|[{}, "hello"] ~|unclose{pass}                        | "hello"   | 特に何も変化がない |
|[{}] ~|unclose{pass}                                 |  null     | 第二項目は省略可能 |
|[{"X":"foo"}] ~|unclose {env~|$.X}                         | "foo"     | 変数Xが追加される  |
|[{"X":"foo"}] ~|unclose {env~|$.APP_ENCODING}              | "utf-8"   | もとの変数はそのまま見える  |
|[{"APP_ENCODING":"utf-16"}] ~|unclose {env~|$.APP_ENCODING}| "utf-16"  | 上書きもできる  |


== !exec オブジェクトを入力とする場合

|= !command                                           |= !output  |= コメント |
|{"input":"hello"} ~|unclose{pass}                    | "hello"   | 特に何も変化がない |
|{} ~|unclose{pass}                                   |  null     | すべて省略可能 |
|{"set":{"X":"foo"}} ~|unclose {env~|$.X}         | "foo"     | 変数Xが追加される  |
|{"set":{"X":"foo"}} ~|unclose {env~|$.APP_ENCODING}| "utf-8"   | もとの変数はそのまま見える  |
|{"set":{"APP_ENCODING":"utf-16"}} ~|unclose {env~|$.APP_ENCODING}| "utf-16"  | 上書きもできる  |
|{"set":{"X":"foo"}} ~|unclose {env~|$.X}                   | "foo"     | 変数Xが追加される  |
|{"set":{"X":"foo"}} ~|unclose --clear {env~|$.APP_ENCODING?}       | undefined | もとの変数はなくなる |

== !exec 配列を入力とする場合 （変数参照使用）

|= !command                                           |= !output  |= コメント |
|[{}, "hello"] ~|unclose{pass}                        | "hello"   | 特に何も変化がない |
|[{}] ~|unclose{pass}                                 |  null     | 第二項目は省略可能 |
|[{"X":"foo"}] ~|unclose {%X}                         | "foo"     | 変数Xが追加される  |
|[{"X":"foo"}] ~|unclose {%APP_ENCODING}              | "utf-8"   | もとの変数はそのまま見える  |
|[{"APP_ENCODING":"utf-16"}] ~|unclose {%APP_ENCODING}| "utf-16"  | 上書きもできる  |
|[{},null,["APP_ENCODING"]] ~|unclose {%APP_ENCODING?}      | undefined | 存在する変数を選択して消せる  |

== !exec オブジェクトを入力とする場合（変数参照使用）

|= !command                                           |= !output  |= コメント |
|{"input":"hello"} ~|unclose{pass}                    | "hello"   | 特に何も変化がない |
|{} ~|unclose{pass}                                   |  null     | すべて省略可能 |
|{"set":{"X":"foo"}} ~|unclose {%X}         | "foo"     | 変数Xが追加される  |
|{"set":{"X":"foo"}} ~|unclose {%APP_ENCODING}| "utf-8"   | もとの変数はそのまま見える  |
|{"set":{"APP_ENCODING":"utf-16"}} ~|unclose {%APP_ENCODING}| "utf-16"  | 上書きもできる  |
|{"set":{"X":"foo"}} ~|unclose {%X}                   | "foo"     | 変数Xが追加される  |
|{"set":{"X":"foo"}} ~|unclose --clear {%APP_ENCODING?}      | undefined | もとの変数はなくなる |
|{"unset": ["APP_ENCODING"]} ~|unclose {%APP_ENCODING?}      | undefined | 存在する変数を選択して消せる |

== !exec ルーズ配列ならどうか？

配列を使うのは、手入力時のキー入力を節約したいからだから、
ルーズ配列は使いたい。

|= !command                                            |= !output  |= コメント |
|[{},null,["APP_ENCODING"]] ~|unclose {%APP_ENCODING?} | undefined | 存在する変数を選択して消せる  |
|[{},null,["APP_ENCODING"],] ~|unclose {%APP_ENCODING?}| undefined | 存在する変数を選択して消せる  |
|[,null,["APP_ENCODING"]] ~|unclose {%APP_ENCODING?}   | undefined | 存在する変数を選択して消せる  |
|[{},,["APP_ENCODING"]] ~|unclose {%APP_ENCODING?}     | undefined | 存在する変数を選択して消せる  |
|[,,["APP_ENCODING"]] ~|unclose {%APP_ENCODING?}       | undefined | 存在する変数を選択して消せる  |


