<<ignore // -*- coding: utf-8 -*- >>

= 共有住所録

[[>http://www.xmldb.jp/dev/tutorial_webapplication_1.php]]を参照。

ただし、

# ユーザー画面（水色）だけを扱う
# ログイン画面を同一モジュールに追加

型定義は、addrbook-data.casm で定義し、register-public している。
トリガーはすべて追加トリガー（ページデザイナが責任を持つ）とする。

<<{
/** 共有住所録 */
module addrbook-j in cara;

}>>

== ユーザーロール


== スタート

<<{

@[abstract]
state スタート :: void links {
 + login --> ログイン.get;
};

}>>

== 住所一覧画面

<<{
resource 住所一覧 ("/all-items") {
 action get("/GET")
 :: @[in, out] #1 void -> void produces 住所一覧画面;

 action next("next/GET")
 :: @[in, out] #1 void -> void produces 住所一覧画面;

 action prev("prev/GET")
 :: @[in, out] #1 void -> void produces 住所一覧画面;

};

state 住所一覧画面 :: Items links {
 + view --> 住所項目表示.get;
 + edit --> 住所項目編集.get;
 + next --> 住所一覧.next;
 + prev --> 住所一覧.prev;

 + logout --> ログアウト処理.do;
};

}>>

== 住所項目表示

<<{
resource 住所項目表示("/view-item") {
 action get("/GET") {"itemId": integer}
 :: @[in, out]#1 void -> void produces 住所項目表示画面;

};


state 住所項目表示画面 :: any links {
 + all-items --> 住所一覧.get;
 + edit      --> 住所項目編集.get;
 + delete    --> 削除の確認.do;

 + logout --> ログアウト処理.do;
};

resource 住所項目編集 ("/edit") {
 action get("/GET") {"itemId" : integer}
 :: @[in, out]#1 void -> any produces 住所項目編集画面;
};

}>>


== 住所項目編集

<<{
state 住所項目編集画面 :: any links {
 + confirm-save --> 保存の確認.do;

 + cancel       --> 住所一覧.get;
};

resource 保存の確認 ("/confirm-save") {
 action do ("/POST")
 :: @[in, out]#1 _ -> _ produces 保存の確認画面;

};

resource 削除の確認 ("/confirm-delete") {
 action do ("/POST")
 :: @[in, out]#1 _ -> _ produces 削除の確認画面;

};

state 保存の確認画面 :: any links {
  + save --> 住所項目の保存.do ;
  + cancel --> 住所一覧.get ;
};

state 削除の確認画面 :: any links {
  + delete --> 住所項目の削除.do ;
  + cancel --> 住所一覧.get ;
};

resource 住所項目の保存("/save-item") {
 action do ("/POST")
 :: @[in, out]#1 _ -> _ redirects 住所一覧.get; // 
};

resource 住所項目の削除("/delete-item") {
 action do ("/POST")
 :: @[in, out]#1 _ -> never redirects 住所一覧.get;
};

}>>

== ログイン／ログアウト


<<{
resource ログイン ("/loginpage.html") {
 action get("/GET")
 :: @[in, out]#1 void -> void produces ログイン画面 ;
};

state ログイン画面 :: any links {
 + do-login --> ログイン処理.do;

};

resource ログイン処理 ("/login.cgi") {

 action do ("/POST") 
 :: @[in]#in any -> _ relays [ok, ng],
    @[out]#ok _ /*LoginInfo*/ -> never redirects 住所一覧.get,
    @[out]#ng _  -> never redirects ログイン.get ;

};

resource ログアウト処理 ("/logout.cgi") {
 action do ("/POST") 
 :: @[in, out]#1 void -> void produces ログアウト後画面;

};

state ログアウト後画面 :: void ;

}>>

