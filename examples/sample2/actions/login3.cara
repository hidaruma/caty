// -*- coding: utf-8  -*-

/** 動的ポートを使った（つもりの）ログインモジュール 
*/
module login3 in cara;

/* == ポート == */

/** ログイン取りやめ時のリクエスト先 */
@[dynamic]
port dyn-cancel;

/** ログイン成功時のリダイレクト先 */
@[dynamic]
port dyn-success;

/** 新規ユーザー登録先 （これは起動時に確定） */
port new-user;

type ReturnInfo = deferred object;

/* == 状態 == */

@[abstract]
state enter :: any links {
  - enter --> Login.get;
}; 

/** ログイン画面 */
state login :: ReturnInfo links {
  /* IDとパスワードを入れてサブミット */
  - submit --> DoLogin.do;
  new-user --> new-user; 

  /* ログインは取りやめ 
   * cancel時ターゲットのURLなどはプログラムが実行時に教える必要がある。
   * 束縛が済まないと、
   * リクエスト（またはリダイレクト）先のアクションが確定しない。
   */
  cancel   --> dyn-cancel;
};

/** ログイン失敗画面 */
state login-failed :: ReturnInfo links {
  - resubmit --> DoLogin.do;
  new-user --> new-user; 
  cancel   --> dyn-cancel;
};

/* == アクション == */

/** ログイン画面の生成 */
resource Login("/login.html") {
  action get("/GET")
  {
     "returns" : uri
  }
  :: @[in, out] #io void -> ReturnInfo produces login ;
  
};

/** ログイン処理 */
resource DoLogin("/do-login.cgi") {
  action do("/POST")
  :: @[in]  #0 object -> _      relays [1, 2],
     @[out] #1 _      -> object redirects dyn-success,
     @[out] #2 _      -> _      produces login-failed
  ;
};
