Coding -*- coding: utf-8 -*-

= XJSONツリー =

XJSONに対して、「XMLにおけるDOMツリー」と同様なデータモデルを提供するデータ構造を
**XJSONツリー** と呼ぶ。
この文書では、XJSONツリーを定義する。

関連する文書：

* [[XJSONPath.wiki|XJSONPath ]]
* [[XJSONValidate.wiki|XJSONValidate ]]

== 事例

次のXJSONインスタンスを考える。

{{{
@person {
 "name" : "檜山",
 "age" : 54,
 "email" : @email "hiyama@chimaira.org",
 "hobbies" : ["盆栽", "釣り"],
}
}}}

このインスタンスは次のようなXJSONツリーとして図示される。

{{xjson-tree.jpg|XJSONツリー}}

== ノードの種類

XJSONツリーのノードは次のように分類される。

|= 大分類      |= 分類 |= 説明 |
|スカラーノード|       | スカラー値を保持するノード、常に末端ノード|
|構造ノード    | タグノード |タグ付き値を示すノード、子ノードを1つ持つ |
|              | 配列ノード |配列を示すノード、空配列でなければ子ノードを持つ |
|              | オブジェクトノード |オブジェクトを示すノード、空オブジェクトでなければ子ノードを持つ |


* スカラーノード -- スカラーノードは次のいずれかの型の値を持つ。子ノードを持つことはない。
## number （integer含む）,
## string , 
## boolean （true または false）,
## null ,
## Catyではbinaryもスカラーだが、今は考えない。
* タグノード -- 常に1つだけ子ノードを持ち、子ノードへのアクセスインデックス（後述）として、タグ名を使う。
* 配列ノード -- 空配列のときは子ノードを持たない。一般に任意個の子ノードを持つことができ、
子ノードへのアクセスインデックスとして、番号（非負整数）を使う。
* オブジェクトノード -- 空オブジェクトのときは子ノードを持たない。一般に任意個の子ノードを持つことができ、
子ノードへのアクセスインデックスとして、プロパティ名を使う。

（**箇条書きのネストがうまくいってない。**）

XJSONツリーの末端ノード（リーフノード）は次のいずかである。

# スカラーノード
# 空配列ノード
# 空オブジェクトノード

XJSONツリーの分岐ノード（中間ノード）は次のいずかである。

# タグノード （子ノードの個数は1）
# 非空配列ノード （子ノードの個数は1以上任意）
# 非空オブジェクトノード （子ノードの個数は1以上任意）

任意のノードがルートノードになり得る。

== アクセスインデックス

構造ノードは（空でなければ）子ノードを持つ。
構造ノードとその子ノードを結ぶ枝（辺）には、番号や名前でラベル付けされる。このラベルを**アクセスインデックス**と呼ぶ。

* タグノードのアクセスインデックス： タグ名
* 配列ノードのアクセスインデックス： 項目の番号
* オブジェクトノードのアクセスインデックス： プロパティ名

== 子ノードコレクションの順序

ツリー構造は、子ノードコレクションが順序を持つ（コレクションがリストの）とき、**順序付きツリー**と呼ぶ。
一方、子ノードコレクションが順序を持たない（コレクションがバッグまたはセットの）とき、**順序なしツリー**と呼ぶ。

XJSONツリーでは、配列ノードの子ノードコレクションは順序を持ち、
オブジェクトノードの子ノードコレクションは順序を持たないので、順序付き／順序なしの混合ツリーとなっている。

オブジェクトの子ノードコレクション、つまりプロパティセットは論理的に順序を持たないが、物理的に（内部的に）は順序を持つ。
この物理的順序を考えれば、内部的には順序付きツリーと考えることができる。
実際の処理のさいは、//物理的順序を採用して順序付きツリーとして扱う//ことにする。

== 図示法

=== スカラーノード

スカラーノードは四角形で描く。内部に値であるスカラーリテラルを書き込む。

{{scalar-node.jpg|スカラーノード}}

=== タグノード

タグノードは円または楕円形で描く。内部に tagged というラベルを書き込む。
子ノードへ至る枝（グラフの辺）にはタグ名でラベルを付ける。

{{tag-node.jpg|タグノード}}

代替図示法として、タグ名を含むノードを描くこともある。このとき、枝は無名（ラベルなし）となる。
この図の方が実際の処理の説明に好都合なときもある。

{{tag-node-2.jpg|タグノード 2}}

=== 配列ノード

配列ノード
は円または楕円形で描く。内部に array というラベルを書き込む。
子ノードへ至る枝（グラフの辺）には番号（非負整数）でラベルを付ける。


{{array-node.jpg|配列ノード}}

=== オブジェクトノード

オブジェクトノードは円または楕円形で描く。内部に object というラベルを書き込む。
子ノードへ至る枝（グラフの辺）にはプロパティ名でラベルを付ける。

{{object-node.jpg|オブジェクトノード}}


== アクセスAPI

与えられたXJSONツリー（論理的にはXJSONデータと同義）にアクセスするAPIをCatyコマンド宣言を若干変形した形式で記述する。
以下に記述したコマンドをパイプライン結合することにより、ツリーの任意の部分を取り出すことができる。

=== タグノード

{{{
type Tagged<T> = @* T;

@[exception] 
type TagUnmatched = @TagUnmatched {
 "expectedName" : string,
 "actualName" : string,
 * : any?
};

/** タグを取り除いた値を返す。 */
command untagged  :: Tagged<T> -> T ;

/** 引数で指定された名前のタグを取り除いた値を返す。
 * タグ名が一致しないときはエラー
 */
command untagged [string tagName] :: Tagged<T> -> T 
 throws TagUnmatched
;
}}}

=== 配列ノード

{{{
type IndexNum = integer(minimum = 0);

@[exception]
type IndexOutOfRange = @IndexOutOfRange {
 "maxIndex" : integer,
 "actualIndex" : integer
 * : any?
};

/** 引数で指定された番号の項目を返す */
command item [IndexNum index] ::  array -> any
 throws IndexOutOfRange
;
}}}


=== オブジェクトノード

{{{
@[exception]
type PropertyNotFound =  @PropertyNotFound {
 "actualName" : string,
 * : any?
};

/** 引数で指定されたプロパティ名のプロパティ値を返す */
command pv [string name] :: object -> any
 throws PropertyNotFound
;
}}}
