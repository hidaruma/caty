<<ignore  -*- coding: utf-8 -*- >>

= 新FIT仕様 (2) confirmセクション

== 要求と問題点

現在のCatyFITでは、
アプリケーションのリソース状態とは無関係に、メモリ内に作ったテスト用リソース状態のもとで
コマンドを走らせることが原則となっている。
この方式は、特定のアプリケーションに依存せず、アプリケーションを汚さずにテストが実行できるメリットがある。

しかし、アプリケーションのリソース状態と独立であることがいつでも望ましいわけではない。
特定のアプリケーション、特定のリソース状態、特定のアンビエントを前提にテストが実行されることがある。
実際のリソース環境を前提としたテストをする際に、次の要求がある。

# テストを実行する前に、リソース環境が“想定している状態”にあるかどうかをチェックしたい。
  適切でない場合はテストを実行せず、その旨を報告する。（これはホーアトリプルの事前条件とは異なるレベルの概念。）
# リソース環境を含めて、テストの前提となる状態を簡単にセットアップしたい。

リソース環境のセットアップには、複数のファイルをアプリケーションの所定の位置に配備することになる。
複数のファイルをZIPファイルにしておいて展開したり、適当なデプロイスクリプトを書けば目的を達するが、
次の問題がある。

# 複数のファイルをデプロイ可能形式にする／実際にデプロイするには手間がかかる。
  自動化はできるだろうが、別途ツールを必要とする。
# テスト環境、テストデータ、テストスクリプト（エクスペクテーション）が複数ファイルに分散され、
  理解・把握が困難になる。「**近接記述の原則**」に反する。

== confirmセクション

上記問題を解決するために、ビヘイビアファイルの先頭にconfirmセクションを設ける。
confirmセクションは省略可能であるが、出現するなら最初のセクション（setupセクションより前）となる。

confirmセクションでは、そのテストが前提とするリソース群を記述する。
ビヘイビアファイルによるテストが実行されるとき、
最初にconfirmセクションが（あれば）チェックされる。
実行環境がconfirmセクションの条件を満たさない場合はそのテストは実行されない。

confirmセクションは次のサブセクションを持つ。

# applicationサブセクション
# fileサブセクション
# schemaサブセクション
# commandサブセクション
# scriptサブセクション

このなかで、application, commandだけがconfirmセクション特有で、file, schema, script はsetupセクションと共通である。
共通なサブセクションの構文と意味は同じだが、
confirmサブセクションは実際のリソース環境を記述し、
setupサブセクションはメモリ内に作られる擬似環境を記述する。

confirmセクションにより事前チェックが増えるだけで、
チェックが通った後のfit:runの動作は今までと**まったく変わらない**。

== 用語と記法

* CatyFITが処理対象とするファイルを**ビヘイビアファイル**または**ベーファイル**と呼ぶ。
* ビヘイビアファイル内の指令を**FITディレクティブ**と呼ぶ。
* 見出しの形式で書くディレクティブを**見出しディレクティブ**と呼ぶ。
* 見出しディレクティブは名前（**ディレクティブ名**）と0個以上の**パラメータ**からなる。

現在の構文では、見出しディレクティブは'!'から始まり、パラメータはコロン（':'）で区切られ、
ディレクティブの終了は改行またはセミコロン（';'）となっている。

この構文は変更される可能性もあるので、実例以外では、具体的な構文に言及しないで記述する。

== サブセクション

サブセクションの順序は任意である。
applicationサブセクションは高々一回。
applicationサブセクション以外は、任意回出現できる。

=== applicationサブセクション

パラメータにアプリケーション名を指定する。

{{{
== !confirm

=== !application:mytestbed
}}}

アプリケーション名をプロジェクト名で修飾できる。プロジェクト名は、projコマンドで出力される文字列である。

{{{
== !confirm

=== !application:mytestbed@myproj
}}}

構文：

{{{
syntax アプリケーション指定 ::= アプリケーション名 ('@' プロジェクト名)? ;
}}}

applicationサブセクションの内容に、CatyFITは一切関知しない。
通常、対象となるアプリケーションの説明文を書く。

ここで指定されたアプリケーション以外では、confirm条件は満たされない。

=== fileサブセクション

パラメータにファイルパスを指定する。プレースによる修飾が可能。
使用できるプレースは、pub, data, include。
プレース修飾が省略されると、pub@this: が仮定される。
なお、現在の構文では、コロンが特殊文字なのでチルダエスケープが必要となる。

{{{
== !confirm

=== !file:hello.txt

{{{
Hello, World.

 }}}
}}}

セクション内容の最初に出現したpreがファイル内容データとみなされる。
'{~{~{'の直後の改行と'}~}~}'の直前の改行はマークアップの一部とみなされ、
データには入らないので注意。

上の例で、データは "Hello, World.\n" である。最後の空行がないときは "Hello, World." がデータ。

このセクションに記述されているのと同じ名前で同じデータ（テキストに限るがバイト列として比較）のファイルが存在しないなら、
confirm条件は満たされない。
ファイルのデータの比較にはメッセージダイジェストを使用してもよい。バイトレベルの同一性を保証することが目的。

セクション内容にpreが出現しないときはビヘイビアファイルとしての妥当性エラーとなる。
2個目以降のpreはCatyFITには認識されない。


=== schemaサブセクション

処理はfileサブセクションとまったく同じだが、データファイルではないので独立したディレクティブを使う。

パラメータにschemataプレースのルートからのファイルパスを指定する。ただし、ファイルパスは省略可能で、
省略すればmodule宣言から補完される。
ファイルパスを書いた場合は、module宣言と照合される。

=== commandサブセクション

処理はfileサブセクションとまったく同じだが、データファイルではないので独立したディレクティブを使う。

パラメータにcommandsプレースのルートからのファイルパスを指定する。

=== scriptサブセクション

処理はfileサブセクションとまったく同じだが、データファイルではないので独立したディレクティブを使う。

パラメータにscriptsプレースのルートからのファイルパスを指定する。拡張子は.catyでなくてはならない。


== fit:confirm コマンド

fit:runは、各ビヘイビアファイルに対してconfirmセクションのチェックを行うが、
confirmセクションのチェックだけを行うコマンドを別に設ける。

実装上は、fit:runコマンドに --confirm-onlyオプションを設けて、ラップしたコマンドを作ってもよい。
しかし、そうすると、fit:runコマンドのプロファイルが煩雑になる。

{{{
type mafsPath = string(remark="プレース修飾を許すパス名、末尾がスラッシュならディレクトリ");

type behExt = (
  ".beh"|".wiki"|".lit" |
  "beh" |"wiki" |"lit" |
);

/** ディレクティブ */
type ConfirmDirective = {
  "name" : ("application"|"file"|"schema"|"command"|"script"),
  /** schemaのときは、省略されたパラメータが補われる */
  "param" : string
};

/** ビヘイビアファイルごとのconfirmチェックの結果 */
type ConfirmResultObj = {
 /** ビヘイビアファイルのパス */
 "path" : mafsPath,
 /** ビヘイビアファイルのタイトル */
 "title" : string,
 /** ディレクティブごとのチェックの結果 */
 "results" : [(@OK ConfirmDirective | @NG ConfirmDirective)*]
};

/** ビヘイビアファイルごとのconfirmチェックの結果、OK/NG付き */
type ConfirmResult = (@OK ConfirmResultObj | @NG ConfirmResultObj);

/** ビヘイビアファイルのconfirmチェックを行う */
command confirm 
 {
   /** 検索するファイルの拡張子 */
   @[default(".beh")]
   "ext" : behExt?,
   /** ファイルの検索を再帰的に行うかどうか */
   @[default(false)]
   "rec" : boolean?,
 }
 [mafsPath? path] :: void -> (ConfirmResult | [ ConfirmResult* ]);

}}}

fit:confirmコマンドは、指定されたビヘイビアファイルすべてに関してconfirmチェックを行う。
ビヘイビアファイル内のすべてのディレクティブがOKならconfirmチェックにパスする、
ひとつでもNGなディレクティブがあれば、そのビヘイビアファイルはNGとなる。


== fit:deploy コマンド


**TBD**


<<ignore 
=== --overwriteオプション
>>




