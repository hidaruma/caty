<<ignore  -*- coding: utf-8 -*- >>

= URIパスのパターン

* [[URIPathPattern-2.wiki]] に続きあり。

== パス、セグメント、フィールド

概念を明確にするために、いくつかの用語を導入する。
これらの用語は、ここで説明に使う目的のモノであり、//一般的な用語ではない。//

* セグメント -- スラッシュで区切られたパスの成分。セグメントは//空でない//文字列で、スラッシュを含まない。
* パスの深さ -- パスにセグメントが何個含まれるか、その個数を深さと呼ぶ。"/" は深さ0、"/a/b/c/" は深さ3である。
パス先頭とパス末尾のスラッシュは深さに影響しない。
* フィールド -- セグメントを、ドットを区切り記号として切り分けた成分。
* セグメントの幅 -- セグメントにフィールドが何個含まれるか、その個数を幅と呼ぶ。幅は//1以上の//整数値である。
* フィールド番号 -- セグメントのフィールドを、右から順に 1, 2, 3, ... と番号付けた番号。
  0からの番号付けではないので注意。最後のフィールド番号とセグメント幅は一致する。

== ワイルドカードとパターン

ワイルドカード文字は '*' だけであり、これは正規表現の [^/.]+ を意味する。
ただし、「文字の全体」はURIのセグメントとして使える文字の全体（パーセントエスケープも含める）である。

空文字列を認めないのは、*.ext, foo.*, a.*.b のようなパターンが ".ext", "foo.", "a..b"
に一致するのは不自然だからである。

ワイルドカードを含む//かも知れない//パス形式をパターンと呼ぶ。リテラルは特殊なパターンとみなす。

{{{

パターン ::= 絶対パス | ファイル名

絶対パス ::= ルート |  非ルート絶対パス

ルート ::= '/'

非ルート絶対パス ::= '/' セグメント ('/'  セグメント)* '/'? 

セグメント ::= フィールド ('.' フィールド)*

フィールド ::= '*' | 名前リテラル

名前リテラル ::= 通常文字 (通常文字)*

通常文字 ::= {URIのセグメントとして使える文字、詳細後述}

ファイル名 ::= セグメント

}}}

=== 使ってよい文字

* 参考： [[>http://tools.ietf.org/html/rfc3986|RFC3986]]

一般区切り文字（gen-delims）とドットを除外すると、
名前リテラルに使ってよい文字の候補は次のようになる。

{{{

unreserved-no-dot ::= ALPHA | DIGIT | '-' | '_' | '~'

pct-encoded ::= "%" HEXDIG HEXDIG

sub-delims  ::= '!' | '$' | '&' | "'" | '(' | ')'
                  | '*' | '+' | ',' | ';' | '='

}}}

'*'はワイルドカードとして使用するので除外する。
sub-delimのなかで将来使用する可能性があるモノを除外する。

{{{

通常文字 ::= ALPHA | DIGIT | '-' | '_' | uri-allowed | pct-encoded

uri-allowed ::= '~' | "'" | ',' | ';' | '='

pct-encoded ::= "%" HEXDIG HEXDIG

}}}

== otherwiseパターン、排他性、マッチング

αがパターンのとき、D(α) は、αとマッチするリテラルパスの全体とする。
α自体がリテラルパスのときは、D(α) = {α} となる。
また、D("*") = {すべての名前リテラルからなる集合} である。

ワイルドカード'*'とドット'.'だけからなるパターンをotherwiseパターンと呼ぶ。
otherwiseパターンは、パターンと同じ幅を持つすべてのセグメント（またはファイル名）と一致する。
異なる幅のotherwiseパターンは排他的である。
ここで、2つのパターンαとβが排他的とは、集合D(α)とD(β)の共通部分が空であることである。


以下では、パス、セグメント、ファイル名などと言った場合、それらはワイルドカードを許すパターンであるとする。

Sがセグメント（またはファイル名）の集合として、Sが排他的とは、次のことである。

* Sからotherwiseパターンを除いた集合をS'とする。
* α, β∈S' で α≠β のとき、αとβは排他的である。

形容詞「排他的」を2つの異なる意味で使っていることに注意せよ。

# 2つのパターンが排他的 （パターンのあいだの関係）
# セグメント集合が排他的 （集合の性質）

リテラルセグメント（またはリテラルファイル名）xが、セグメント集合Sのセグメントαにマッチするとは次のことである。

# α∈S' で、xがαにマッチすれば、xはセグメント集合Sのセグメントαにマッチする。
# xは、S'のどのセグメントともマッチしないで、α∈S であるotherwiseパターンαとマッチしたとき、
  xはセグメント集合Sのセグメントαにマッチする。
# それ以外のときは、xはセグメント集合Sにマッチしない。

次の事実は定義から自明だが極めて重要である。

* //セグメント集合Sが排他的なら、リテラルなxにマッチするSのセグメントは**存在すれば一意的**である。//

----

* [[URIPathPattern-2.wiki]] に続きあり。
