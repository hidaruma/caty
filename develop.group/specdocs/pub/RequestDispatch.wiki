<<ignore Coding -*- coding: utf-8 -*- >>

= リクエストディスパッチ


* [[URIPathPattern.wiki]]
* [[URIPathPattern-2.wiki]]

== 注意すべき点

* 絶対パスパターン、ファイル名パターンの**2種**のパスパターンを認める。パスパターンはリソースクラスにバインドされる。
* インポーカー文字列にHTTPメソッドを必須とする。HTTPメソッドの**省略は許さない**。
インボーカー文字列はアクションにバインドされる。
* “動詞がない”ことと、“動詞が空文字列である”ことは同じとみなす。
* アクション検索（action lookup）は、「動詞名+HTTPメソッド名」をキーとして行われる。1つのパスパターン（リソースクラス）内では、
  キー（動詞名+HTTPメソッド名）は一意でなくてはならない。
* チェッカー条件（'#'で記述される条件）をキーの一部とは考えない。
（将来的には、チェッカー条件もキーの一部になる可能性もあるが。）
* チェッカー条件はアクション起動のガードとして使われる。
ガード条件が満たされない場合はアクションを起動しない。
アクションが起動されなかった場合、レスポンスはフレームワークが返す。

== 要検討な課題

* チェッカー条件（'#'条件）はアクション検索時の検索キーと考えるべきか？ 
  検索キーと考えるなら、チェッカー条件で失敗しても次の検索を続行することになる。
* 絶対パスパターンとファイル名パターンだけで十分か？
* アクション検索の失敗／チェッカー条件による実行拒否などのとき、適切なHTTPステータスコードは何か？
  一律に403では粗っぽすぎるのでは？
* 実行可能拡張子の扱い。
* 拡張子パターン（以前のパターン構文）の扱い。

== パスパターン

リクエストパスをリソースクラスに振り分けるためのパスパターンについては次を参照。

* [[URIPathPattern.wiki]]
* [[URIPathPattern-2.wiki]]


同一のリソース＆アクション・システムに、多様な“パスパターン割り当て”を行える。
URI設計は、パスパターン＆インボーカーとリソース＆アクションのバインディング定義により実行される。

=== パスパターンの解釈と注意

* 末尾が'/'であれば、ディレクトリーを表す。そうでなければファイルを表す。
* 先頭が'/'であれば絶対パスを表す。そうでなければ相対パスである。
* 自由に相対パスを書くことはできない。名前のみの指定に限定される。
* 自由にワイルドカードパターンを書くことはできない。

=== 互換性構文：拡張子指定

次の形式をパスパターンとして認める。

{{{

拡張子指定 ::= '.' 名前リテラル

}}}

".ext" は、"*.ext" の省略とは考えられない。'*'がドットを含まない名前にしかマッチしないので、
"*.gz"は"foo.tar.gz"にマッチしない。しかし、".gz"は"foo.tar.gz"にマッチすべきである。
したがて、".gz"の解釈は、"*.gz", "*.*.gz", "*.*.*.gz" など無限のファイル名パターンの表現となる。

このような煩雑性を避けるため、拡張子指定をfiletypes設定に限定することも考えられる。

**後日追記**： //ワイルドカード '*~*' が使えるようになっている。//



=== 複数のパスパターンのOR結合

次のようなパターンが許される。

* "*.csv|*.txt" 
* "*.atom|/atom/*.xml"
* "/blogs/|*.blog/"

これは、複数のパターンに同一のリソース定義を割り当てたいときに使われる。
意味的には、重複したリソース定義を書く場合と同じである。

== インボーカー文字列の構文

{{{
Invoker ::= VerbMethod Checker*

VerbMethod ::= VerbName? ('/' Method)
VerbName ::= [a-zA-Z][-_a-zA-Z0-9]* // 先頭は必ず英字
Method ::= ('GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD')
Checker  ::= '#' CheckerName
CheckerName ::=  [a-z][-a-z0-9]* // 先頭は必ず英小文字、ハイフンを許す
}}}

現在次のチェッカー条件を準備している。

# exists -- パスが存在するか
# exists-parent -- 親ディレクトリが存在するか
# dont-care -- パスに関する条件なし
# secure -- HTTPSか

何も指定されないときは、デフォルトでexistsが有効になる。
exists-parentとdont-careでexistsをオーバーライドできる。

例：

# "/GET"
# "view/GET"
# "edit/POST#secure"
# "put/POST#exists-parent"
# "create/POST#secure#dont-care"

* "/GET" は "GET" と略記できたほうがいいか？

複数のInvoker文字列を '|' で連結してよい。

* "/GET|/POST"
* "view/GET|show/GET"

これは、複数のインボーカー文字列に同一のアクション定義を割り当てたいときに使われる。
意味的には、重複したアクション定義を書く場合と同じである。
例えば、"view/GET|show/GET" を使う代わりに次のように書いてもよい。

{{{

action view ("view/GET") :: {/* ... */};
action show ("show/GET") :: {/* ... */};

}}}

== アクションの検索

次の手順で実行すべきアクションが検索される。

**後日追記**： //この検索手順は適切ではない。//

# 最初に、リクエストパスと絶対パスパターンとのマッチングが試みられる。
## パスマッチングが成功したら、インボーカー（動詞＋メソッド）マッチングが試みられる。
## 絶対パスマッチングとインボーカーマッチングが共に成功すればアクション検索は成功する。
# 絶対パスマッチングまたはインボーカーマッチングが失敗したら、次にファイル名パターンが試みられる。
## ファイル名マッチングが成功したら、インボーカー（動詞＋メソッド）マッチングが試みられる。
## ファイル名マッチングとインボーカーマッチングが共に成功すればアクション検索は成功する。
# いずれも成功しなければ、アクション検索は失敗する。

アクション検索が失敗した場合は、フレームワークにより403が返される。
なお、ファイル名マッチングには、後方互換のfiletypes.*.assocによるアクション検索が含まれる。

== アクションの実行

実行の前にチェッカー条件がチェックされ、条件が満足されればアクションが実行される。
条件が満足されないなら、403 が返される。

条件によっては、404, 405 がよりふさわしいかもしれない（要検討）。

----



* [[URIPathPattern.wiki]]
* [[URIPathPattern-2.wiki]]

