<<ignore  -*- coding: utf-8 -*- >>

= CatyBNF

Catyで使うBNF構文。

* [[CatyBNF-2.wiki|続き]]

== 特殊な記号

# '::=' -- 生成規則の左辺と右辺を分離する。
# ';' -- 生成規則の終端記号。
# 空白類（改行含む） -- パディング（特に意味も機能もない）と連接演算子として使用する
# '?' -- 省略可能を示す
# '*' -- 任意回の繰り返しを示す
# '{', '}' -- 回数指定の繰り返しを示す
# '(', ')' -- グルーピング
# '"'と"'" -- リテラル文字列の開始と終了

<<ignore " >>

記号'+'は使用しない、{1,} で代用。次はCatyBNF特有。

# '(:', ':)' -- ラベル付きグループの開始と終了
# ':' -- ラベル付け演算子
# '<', '>' -- パラメータリストの開始と終了
# '@' -- タグの開始

':', ':)', '::=' はいずれもコロンから始まるが2文字先読みで識別する。

Catyスキーマ言語から追加されたトークンは：

# '::='
# 一重引用符のリテラル文字列
# '(:', ':)'

同じ記号だが意味が変更されているトークンは：

# ':'
# '<', '>'


== リテラル文字列

リテラル文字列の構文はJSONと同じとする。ただし、引用符に一重引用符も認める。
引用符に一重引用符を使った場合は二重引用符をエスケープする必要はないが、
一重引用符はエスケープする。Unicodeエスケープも（JSON仕様のとおりに）使える。

構文定義のなかでは空文字列 "", '' は禁止される。

== 構文変数

任意の名前を使える。

* [[NameSyntax.wiki]]

== CatyBNF式の構文

メタなBNFでは、'+' を用いる。


{{{

基本式 ::= リテラル文字列 | 構文変数 | '(' 式 ')' | '(:' (リテラル文字列 繰り返し演算子?|ラベル付き因子)+ ':)'

因子 ::= タグ? 基本式 繰り返し演算子?

タグ ::= '@' 名前 // 名前でないタグ名は許さない、CatyScriptよりきつい制限

繰り返し演算子 ::= オプショナル | スター | 出現指定

オプショナル ::= '?'

スター ::= '*' パラメータ?

出現指定 ::= '{' N (',' M?)? '}' パラメータ? 

N ::= 非負整数

M ::= 正整数

パラメータ ::= '<' リテラル文字列 (',' ブーリアン)? '>'

ブーリアン ::= ('true'|'false')

ラベル付き因子 ::= ラベル ':' 因子 | 構文変数 繰り返し演算子?

ラベル ::= 名前

項 ::= 因子+ // 空白を区切りとした並び

式 ::= 項 ( '|' 項)*

}}}

ラベル付き因子を認識する際に、ラベルも構文変数も名前なので、次に ':' が来るかどうかにより判断する（先読み）。

== ラベル付きグループ

'(:' と ':)' で囲まれた範囲を**ラベル付きグループ**と呼ぶ。
ラベル付きグループの内部には、先行するラベルを持つ構文要素（因子）とリテラル文字列（繰り返し演算子があってもよい）を並べることができる。

例外的に、構文変数（文法の非終端記号）のラベルを省略できるが、省略されると構文変数名と同じラベルが自動的に補完される。
つまり、fooという構文変数の出現は foo:foo と解釈する。foo? なら foo:foo?、foo* なら foo:foo* となる。

ラベルは生成規則の文法には何の影響も与えず、すべて取り去っても効果は何も変わらない。
ラベルは型の自動生成のヒントとして使う。

== 繰り返し演算子のパラメータ

'*', {n,}, {n,m}, {n} の各演算子は、直後にパラメータを取れる。2つまでのパラメータを取れるが、
第二パラメータは省略可能。

* 第一パラメータ -- 繰り返しの分離記号。指定されないなら分離記号はなし（空白類で区切る）。
* 第ニパラメータ -- 余分な分離記号を認めるかどうかのブーリアン値。
  trueなら余分な分離記号を最後に置いてもよい。デフォルト値はfalse。

{0,1}, {1,1} は意味的にパラメータを取れない。
{0,1}, {1,1} にパラメータを付けると意味的なエラーとなる。

== タグ

タグも生成規則の文法には何の影響も与えず、すべて取り去っても効果は何も変わらない。
タグは型の自動生成のヒントとして使う。

== 文書コメント

Catyスキーマ言語と同様なコメント／文書コメントを許す。

文書コメントではないコメントは空白と同じ扱いとなる。
文書コメントDocを考慮した構文は次のとおり。

{{{

基本式 ::= リテラル文字列 | 構文変数 | '(' 式 ')' | '(:' (リテラル文字列 繰り返し演算子?|ラベル付き因子)+ ':)'

因子 ::= Doc? タグ? 基本式 繰り返し演算子?

タグ ::= '@' 名前 // 名前でないタグ名は許さない、CatyScriptよりきつい制限

繰り返し演算子 ::= オプショナル | スター | 出現指定

オプショナル ::= '?'

スター ::= '*' パラメータ?

出現指定 ::= '{' N (',' M?)? '}' パラメータ? 

N ::= 非負整数

M ::= 正整数

パラメータ ::= '<' リテラル文字列 (',' ブーリアン)? '>'

ブーリアン ::= ('true'|'false')

ラベル付き因子 ::= Doc? ラベル ':' 因子 | Doc? 構文変数 繰り返し演算子?

ラベル ::= 名前

項 ::= 因子+ // 空白を区切りとした並び

式 ::= Doc? 項 ( '|' Doc? 項)*

}}}

== syntax宣言文

syntax宣言文は、1つの生成規則だが、Catyスキーマ言語と整合的な構文を持つ。
Annはアノテーションである。

{{{

syntax宣言文 ::= Doc? Ann? 'syntax' 名前 '::=' CatyBNFの式 ('=' 型表現)? ';'

}}}

型表現があるときは、構文に対応する型やパーザーは自動生成されない。
型定義とパーザー作成は手動となる。
型表現が省略されると、型定義とパーザーの自動生成が試みられる
（出来るかどうかは保証しない :-)）。

CatyBNFの式から型定義を生成する方法は別に述べる。

== トークン宣言文とトークン変数

トークン構文を定義する手段はないが、トークンに対応するデータ型は定義できる。

便宜上（予約語を増やさないために）トークンの宣言もsyntax宣言文の形を借用する。

{{{

トークン宣言文 ::= Doc? Ann? 'syntax' 名前 '='型表現 ';'

}}}

トークン宣言文は、型宣言文（型定義）とまったく同じである。
トークン宣言文で宣言した型は、syntax宣言文内で構文変数として使える。
構文変数のなかで、トークン宣言で定義された変数を特に**トークン変数**と呼ぶ。
トークン変数はトークンのデータ型を表し、//構文定義と型定義を繋ぐときに基本となる概念//である。

== 例

== 算術式

{{{

/** トークン定義 */
syntax num = string(format=number);

syntax
basic ::= num | @group '(' expr ')';

syntax 
term ::= basic | @prod basic{2,}<'*'>;

syntx
expr ::= term | @sum term{2,}<'+'>;

}}}

生成規則としては次と同値。

{{{

basic ::= num | '(' expr ')'

term ::= basic ('*' basic)*

expr ::= term ('+' term)*

}}}

== 文字列を末端に持つ二分木

{{{

/** トークン定義 */
syntax val = string;

syntax
node ::= (: '(' left '.' right ') :);

syntax
left ::= val | node ;

syntax
right ::= val | node ;

}}}

生成規則としては次と同値。

{{{

node ::= '(' left '.' right ')

left ::= val | node

right ::= val | node

}}}


== 続き

* [[CatyBNF-2.wiki]]

