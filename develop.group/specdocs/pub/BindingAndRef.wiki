Coding -*- coding: utf-8 -*-

= 束縛と参照

注意：_ARGSプロパティを必須とするのはマズイかもしれない。変更の可能性あり。

== 束縛オブジェクト

束縛オブジェクトはJSONオブジェクトである。「変数名と値の関係を保持」する用途で使われたとき、
そのJSONオブジェクトを**束縛オブジェクト**と呼ぶ。束縛オブジェクトのプロパティ名は変数名と解釈され、
プロパティ値は変数の値と解釈される。

変数名の構文はここでは定義も制限もしないが、次のことは仮定する。

* 変数名の最初の文字にアンダースコア'_'が使える。

# 変数名の最初の文字にパーセント'%'は使えない。
# 変数名の最初の文字にダラー'$'は使えない。
# 変数名の最初の文字にハイフン'-'は使えない。
# 変数名の最初の文字に数字'0'から'9'は使えない。

以下では、変数参照を開始する文字はパーセント（'%'）とする。

{{{
  // トークンの定義

  変数参照 ::= '%' 変数名

}}}

束縛オブジェクトに、変数名としては違法なプロパティ名が現われるのは何ら問題ない。
実際、システム側で使う情報はダラー始まりのプロパティに格納する（ただし、概念上の話で、
実装にダラープロパティを使うことを要求しない）。
変数値（プロパティ値）にも//何の制限も設けない//。

== 予約された名前

システムとして用途が決められた変数は、アンダースコアで始めることにする。
アンダースコア始まりの変数は、ユーザーから可視だが、滅多に参照されることはなく、
書き換えることはできない。

次の名前は予約する。

* _ARGV -- 引数並びが入るとする。値は常に配列であり、少なくとも1つの項目を持つ。

{{{
{
  "$sys_info" : "!secret!",
  "foo" : 3,
  "bar" : "hello",
  "_ARGV" : ["", "orange", "/fruits.txt"]
}
}}}

_ARGVは束縛オブジェクトでは必須とする。さらに、
_ARGVの最初の項目はnullまたは文字列とする。

{{{

type Binding = {
  "_ARGV" : [(string|null), any*],
  * : any?
};

}}}

== 束縛オブジェクトの表現形式

変数オブジェクトのなかで、
プロパティ名が変数名として合法でありかつアンダースコアから始まらない
プロパティの集合を**通常変数集合**（normal variable set）と呼ぶ。

束縛全体も通常変数集合もJSONオプジェクトとしてリテラル表現できる。
前節の例の通常変数集合は次のようになる。

{{{
{
  "foo" : 3,
  "bar" : "hello",
}
}}}

通常変数集合に対して、
変数名（＝プロパティ名）の前にハイフン2つを付け、
イコールで区切って値を続けたペアを空白区切りで並べた形式を**オプション形式**の表現と呼ぶ。

{{{

 --foo=3 --bar="hello"

}}}

値がJSON文字列でワード構文（ここでは定義しない）に合致するときは、引用符を省略できる。

{{{

 --foo=3 --bar=hello

}}}

予約変数_ARGVの値は配列であるが、
区切りをカンマから空白類（(SP | TAB | NL)+）に置き換えた形式を**引数形式**の表現と呼ぶ。

{{{

  "" "orange" "/fruits.txt"

}}}

値がJSON文字列でワード構文に合致するときは、引用符を省略できる。

{{{

  "" orange /fruits.txt

}}}

_ARGVの最初の項目、オプション形式、ARGVの2番目以降の引数形式をこの順で並べた形式を**パラメータ形式**の表現と呼ぶ。
このときも、値がJSON文字列でワード構文に合致するときは、引用符を省略できる。

{{{

 "" --foo=3 --bar=hello orange /fruits.txt

}}}

パラメータ形式が与えられれば、もとの束縛オブジェクトの可視部分を完全に再現できる。
可視部分とは、パロパティ名が変数構文に一致するプロパティ群と、_ARGV配列のことである。
（不可視部分に入るアンダースコアから始める変数も明示的な参照で見ることができる。）

== 束縛オブジェクトのチェーン

束縛オブジェクトには、ユーザーからの参照が不可能なプロパティ$parentを入れることができる。
$parentプロパティは、別な束縛オブジェクトか、または束縛オブジェクトへの（比喩的な意味で）ポインターを含む。

$parentをたどることにより、一連の束縛オブジェクトはチェーンを形成する。
これを**束縛オブジェクトのチェーン**、あるいは単に**束縛チェーン**と呼ぶ。
束縛チェーンの最初に現われる（親子関係の末端に位置する）束縛を**カレントの束縛**と呼ぶ。

変数値の検索は束縛チェーンをたどることが多いが、カレント束縛だけを検索対象にする場合もある。

== 変数参照、ワイルドカード、スライス

* パーセント記号に変数名を続けると対応する変数値を参照できる。変数値検索は束縛チェーンをたどる。
* パーセント記号に'--*'を続けると、**カレント束縛の通常変数**からなる束縛オブジェクトを取得できる。
  束縛チェーンはたどらない。
* パーセント記号に番号を続けると、カレント束縛の_ARGV配列の項目値を参照できる。
* 名前または番号に'?'を後置すると、値が存在しないときは安全なundefined値に置き換えられる。
* 番号に関しては、%n:m, %n: というスライス記法が使える。
* 負の番号も使える（Pythonと同じ）。
* '%*' は使用しない。

安全なundefined値は、内部的な値（またはフラグ）で、オブジェクトのプロパティ値または配列の項目値として
出現したとき、プロパティまたは項目が存在しないとして扱われる。ただし、
トップレベルでは、安全なundefined値も例外（実行時エラー）となる。

例として次の束縛を考える。

{{{

{
  "$sys_info" : "!secret!",
  "$parent" : {"baz" : "hi", "_ARGV": [null]},
  "foo" : 3,
  "bar" : "hello",
  "_ARGV" : ["", "orange", "/fruits.txt"]
}

}}}

この束縛のもとで：

|= 参照構文 |= 値  |
| %foo      | 3   |
| %bar      | "hello" |
| %$sys_info | 構文エラー |
| %1        | "orange"  |
| %1a       | 構文エラー |
| %baz      | "hi" |
| %zot      | 実行時エラー |
| %zot?     | 安全なundefined値 |
|{"a":%zot?}| {} | 
| %0        | "" |
| %2        | "/furits.txt" |
| %3        | 実行時エラー |
| %3?       | 安全なundefined値 |
| [%1, %2]  | ["orange", "/fruits.txt"] |
| [%2, %3]  | 実行時エラー |
| [%2?, %3?]| ["orange"] |
| %--*      | {"foo" : 3,  "bar" : "hello"} |
| %1:       | ["orange", "/fruits.txt"] |
| %-1       | "/fruits.txt" |
| %0:1      | ["", "orange"] |
| %0:       | ["", "orange", "/fruits.txt"] |
| %*        | 構文エラー |

== 束縛スキーマ

Binding型のサブタイプを定義するスキーマ（型定義）を束縛スキーマと呼ぶ。

次は、すべての値を文字列に制限するスキーマである。

{{{

type StringBinding = {
  "_ARGV" : [string, string*],
  * : string?
};

}}}

次は、引数（_ARGV）のみを許すスキーマである。

{{{

type ArgvOnlyBinding = {
  "_ARGV" : [(string|null), any*],
};

}}}

次は、_PATHを必須とするスキーマである。

{{{

type BindingWithPath = {
  "_ARGV" : [(string|null), any*],
  "_PATH" : string(format=filename),
  * : any?
};

}}}

casmで使われているパラメータ束縛スキーマは：

# オプションスキーマと引数スキーマに分かれている。
# 引数スキーマは、_ARGVの2番目以降（インデックスは1以上）の配列のスキーマである。
# オプション値と引数値の型をスカラーに制限している。





