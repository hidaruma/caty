// -*- coding: utf-8 -*-
/** 標準のアノテーション */
module annotation.std;

/** 公開モジュールへの登録
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "MODULE_DECL"]), affect-management]
annotation register-public :: boolean?;

/** 型の隠蔽
 * このアノテーション付きで宣言・定義された型はモジュールからexportされない。
 * 定義された型名は不可視。
 */
@[target("TYPE_DECL"), affect-management]
annotation hidden :: boolean?;

/** 非推奨／廃止予定の対象をマークする
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "PROPERTY"]), affect-management]
annotation deprecated :: boolean?;

/** 将来の懸念となる対象をマークする
 * 代替となる機能が実装された段階でunquietをdeprecatedに変更する。
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "PROPERTY"]), affect-management]
annotation unquiet :: boolean?;


/** システムが使用する型やコマンド
 */
@[target(["TYPE_DECL", "COMMAND_DECL"]), affect-management]
annotation system :: boolean?;


/*{{{

/** open制約
 * この型の制約はopenと解釈される。再帰的に適用される。
 */
@[target(["OBJECT", "ARRAY"]), affect-parsing]
annotation open :: boolean?;

/** closed制約
 * この型の制約はclosedと解釈される。再帰的に適用される。
 */
@[target(["OBJECT", "ARRAY"]), affect-parsing]
annotation closed :: boolean?;

}}}*/

/** 副作用のないコマンドをマークする
 */
@[target(["COMMAND_DECL"]), affect-management]
annotation no-effect :: boolean?;


/** デフォルト値
 * オブジェクトのプロパティが省略されたときのデフォルト値を指定する。
 * 省略可能なプロパティにしか意味を持たない。
 */
@[target("PROPERTY")]
annotation default ::  any;

/** 推奨値
 * オブジェクトのプロパティの推奨値を指定する。
 * 省略可能性とは無関係である。
 */
@[target("PROPERTY")]
annotation recomended :: any;

/** デフォルト値の非存在
 * オブジェクトのプロパティが省略されたときに、デフォルト値を仮定したり推定してはならない。
 * 省略可能なプロパティにしか意味を持たない。
 */
@[target("PROPERTY")]
annotation no-default :: boolean?;

/** 同時出現性
 * 指定した名前のプロパティがないときは、ターゲットのプロパティは出現できない。
 * 複数のプロパティに依存関係があるときに使用する。
 */
@[target("PROPERTY"), affect-validation]
annotation with :: (string | [string, string*]);

/** 排他出現性
 * 指定した名前のプロパティがあるときは、ターゲットのプロパティは出現できない。
 * 複数のプロパティに依存関係があるときに使用する。
 */
@[target("PROPERTY"), affect-validation]
annotation without :: (string | [string, string*]);

/** 依存性
 * このプロパティの値は指定した名前のプロパティ値に依存する。
 * 例えば、このプロパティ値は関数として計算可能であるときなど。
 */
@[target("PROPERTY")]
annotation depends :: (string | [string, string*]);

/** 暫定的な定義である
 * 後で変更の可能性がある
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "MODULE_DECL"])]
annotation tentative :: boolean?;

/** 実験的な定義である
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "MODULE_DECL"])]
annotation experimental :: boolean?;

/** 抽象的な仕様記述である
 * 型やコマンドを、そのまま実際の使用することを想定してない。
 * 抽象的な仕様の記述に採用している。
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "MODULE_DECL"])]
annotation abstract-spec :: boolean?;

/** サンプルである
 */
@[target(["TYPE_DECL", "COMMAND_DECL", "MODULE_DECL"])]
annotation sample :: boolean?;



/** フィルター
 * テンプレートで使用するフィルターである。
 */
@[target("COMMAND_DECL")]
annotation filter :: boolean?;

/** 単一インスタンス実行
 * このアノテーション付きで宣言されたコマンドは、
 * 一つのプロセスあたり高々一つのインスタンスだけが実行される。
 */
@[target("COMMAND_DECL")]
annotation sequential :: boolean?;

/* ---- */
/*== クライアント／サーバー型のシステムで利用するアノテーション  */
/* ---- */

/** 読み取り専用
 * このアノテーション付きのプロパティを書き換える操作は出来ない。
 * クライアント側で仮に書き換えても、それは**無視される**。
 */
@[target("PROPERTY")]
annotation readonly :: boolean?;

/** 書き換え禁止
 * このアノテーション付きのプロパティを書き換えをしてはいけない。
 * readonlyとは違い、クライアント側で書き換えることは可能である。
 * しかし、書き換えるとその後の動作は**保証されない**。
 */
@[target("PROPERTY")]
annotation preserve :: boolean?;

/** サーバー側で動的に生成されるプロパティ 
 * このプロパティは永続的なストレージに保存されていない。
 * readonly, preserveとは独立である。
 */
@[target("PROPERTY")]
annotation generated :: boolean?;

/** サーバー側に戻す必要がないプロパティ 
 * このプロパティを戻すことはトラフィックの無駄使いになる
 */
@[target("PROPERTY")]
annotation discardable :: boolean?;

/** クライアント側で動的に生成されるべきプロパティ 
 * クライアントのアプリケーションが利用する。
 * サーバーは一切関知しないので、サーバーに送ってはならない。
 */
@[target("PROPERTY")]
annotation dynamic :: boolean?;

// End of Module
