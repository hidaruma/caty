<<ignore // -*- coding: utf-8 -*- >>

= 型表現のXJSONシリアライゼーションの案 叩き台

** ~*~* 作業中 ~*~* **

<<{
/** 型表現のXJSONシリアライゼーションの案 叩き台
 */
@[deprecated]
module typeExpr-0;

}>>

== 共通の型

* typeName型は、string型のサブタイプだが、特別な意味論（メタオブジェクトへの参照）を持つので、
組み込み型にすべきである。

<<{
type typeName = string(format="type-name"); // 組み込み型になる予定

/** スカラー型 */
type scalar = (
   null
 | boolean
 | number
 | string
 | binary
);


/** アノテーション */
type Annotation = deferred;
/** ドキュメンテーションコメント */
type Doc = deferred string;
/** スキーマ属性 */
type Attribute = deferred;
/** with構文で導入されるスキーマ添加 */
type Augmentation = deferred;

/** アノテーションとドキュメンテーションコメントを追加するmixin */
type AnnoDocMixin = {
 "doc" : Doc?,
 "annotations" : [Annotation*]?,

 * : any?
};

}>>

== 型表現を表す型

<<{
/** すべての型表現のユニオン */
type typeExpr = (
// 基本型
   typeVar
 | NamedType // attr
 | SingletonType // attr?
// 複合型
 | ArrayType // attr
 | ObjectType // attr
 | TaggedType 
 | BagType // attr
// 型演算で構成される型
 | OptionType
 | UnionType
 | IntersectionType
 | MergedType
// 属性と添加
 | AttributedType // ?? 
 | AugmentedType
// 総称型
 | GenericType
 | AppliedType

);

/** 内部型表現
 * 型変数の名前が内部変数名になる以外は型表現と同じ
 * 内部変数名は "$1", "$2", ... のような名前
 */
type internalTypeExpr = typeExpr;

}>>

== 基本型

# 型変数
# 名前で参照される型
# シングルトン型

基本組み込み型もユーザー定義で名付けられた型も、どちらもNamedTypeとして扱う。

<<{
/** 型変数 */
type typeVar = @_var string(format="simple-name");

/** 名前で参照される型 */
type NamedType = (typeName | @_named typeName);

/** シングルトン型 */
type SingletonType = @_singleton scalar;

}>>

== 複合型

=== 配列型

<<{
/** 配列の項目 */
type ArrayItem = @_arrayItem (AnnoDocMixin & {
 "type" : typeExpr,
 "name" : string? // 項目名、ヒントに過ぎない
});

/** 配列型 */
type ArrayType = @_array (AnnoDocMixin & {
 "specified"  : [ArrayItem*],
 "additional" :  ArrayItem,
});

}>>

=== オブジェクト型

<<{
/** オブジェクトのプロパティ */
type ObjectProperty = @_objectProperty (AnnoDocMixin & {
 "type" : typeExpr,
 "name" : string, // プロパティ名
});


/** オブジェクト型 */
type ObjectType = @_object (AnnoDocMixin & {
 "specified"  : [ObjectProperty*],
 "additional" :  ObjectProperty,
});

}>>

=== タグ付き型

* タグ付きデータの構成部分は、今後、**タグ（tag）**と**内容（content）**と呼ぶ。

<<{
/** タグ付き型 */
type TaggedType = @_tagged (AnnoDocMixin & {
 "tag" : typeExpr, // stringの部分型
 "content" : typeExpr
});

}>>

=== バッグ型

<<{
/** バッグ型の出現性カウント */
@[hidden]
type count = (integer(minimum=0) | "unbounded");

/** バッグの項目 */
type BagItem = @_bagItem (AnnoDocMixin & {
 "type" : typeExpr,
 "minOccur" : count,
 "maxOccur" : count
});
 
/** バッグ型 */
type BagType =  @_bag (AnnoDocMixin & {
  "specified"  : [BagItem*],
});

}>>


== 型演算で構成される型

=== オプション型

<<{
type OptionType = @_option typeExpr;

}>>

=== ユニオン型

<<{
type UnionChoice = @_unionChoice (AnnoDocMixin & {
 "type" : typeExpr,
});

type UnionType = @_union (AnnoDocMixin & {
 "specified"  : [UnionChoice*],
 "additional" :  UnionChoice,
});

}>>

=== インターセクション型

<<{
type IntersectionType = @_intersection [typeExpr, typeExpr*];

}>>

=== マージ型

<<{
type MergedType = @_merged [typeExpr*];

}>>

== 属性と添加

=== 属性付き型

<<{
type AttributedType = @_attributed {
 "type" : typeExpr,
 /** スキーマ属性 */
 "attributes" : [Attribute, Attribute*]
};

}>>

=== 添加付き型

添加（増強）は、with構文により導入される。

<<{
type AugmentedType = {
 "type" : typeExpr,
 /** スキーマ増強 */
 "augmentations" : [Augmentation, Augmentation*],
};

}>>

== 総称型

<<{
type GenericType = @_generic {
 "argNames" : [string, string*],
 "argKinds" : [kindExpr, kindExpr*],
 "type" : internalTypeExpr, // 束縛変数は内部変数に書き換えられている
};

type AppliedType = @_applied {
 "type" : (GenericType | string),
 "arguments" : [typeExpr, typeExpr*]
};

type Fixpoint = @_fixpoint {
 "argNames" : [string, string*],
 "argKinds" : [kindExpr, kindExpr*],
 "type" : internalTypeExpr, // 束縛変数は内部変数に書き換えられ、自分を指す名前 $this が導入される
};

}>>

== カインド

<<{
/** カインド表現 */
type kindExpr = (TypeRange | IntersectionKind | ForallKind);

/** 型レンジ */
type TypeRange = @_Range [typeExpr min, typeExpr max];

/** インターセクションカインド */
type IntersectionKind = @_IntersectionKind [kindExpr, kindExpr*];

/** forallカインド */
type ForallKind = @_Forall {
 "argNames" : [string, string*],
 "argKinds" : [kindExpr, kindExpr*],
 "type" : internalTypeExpr, // 束縛変数は内部変数に書き換えられている
};

}>>

== 擬似タグ付き型

<<{

type PseudTaggedType = deferred;

/*
プロパティ名 ::= 文字列 | 名前
擬似タグ :=  '@?' '(' JSONパス ':' 型 ')' 
*/


}>>

== フォーリン型

<<{
/** フォーリントークン型
 * 印字表現は #'NAME
 */
type ForeignToken = @foreignToken string(format="token");

/** フォーリンオブジェクト型
 * 印字表現は #<NAME DESCRIPTOR>
 */
type ForeignObject = @foreignObject {
  "name" : string(format="simple-name"),
  "descriptor" : any,
};

}>>


例：{{{ @foreignToken "undefined" }}}

