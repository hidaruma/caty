/** 
 * mongodb操作用モジュール
 * JSONストレージバックエンドとは別個に作ってある。
 */
module mongo in casm;

/** _tagプロパティを使用禁止にしたオブジェクト */
type BsonizableUntaggedObject = {
 /** _tagは特別な目的に予約する */
 "_tag": undefined,
 * : BsonizableData?
}(propNameFormat="bson-key");


/** オブジェクトにタグを許す */
type BsonizableObject = @(anyTag) BsonizableUntaggedObject;

/** 
 * mongodbに格納される形の値に変換する。
 */
command to-bson :: BsonizableObject -> BsonizedData
    refers python:mongo.ToBSON;

type BsonizableData =(string | number | boolean | EncodedObjectId | BsonizableObject | binary);

type ObjectId = foreign;


type BsonizedObject = {
 "_tag": string?,
 * : BsonizedData?
}(propNameFormat="bson-key");

type BsonizedData = (BScalar | BsonizedObject | ObjectId);

type Record = {
    *:(BScalar | Record | BArray)?
};
type BScalar = string | number | boolean | EncodedObjectId;
type BArray = [(BScalar|BArray|Record)*];
type QueryExpr = query:Pred | query:ObjSelector;
type EncodedObjectId = @ObjectId string;

type MongoConfig = {
    "host": string,
    "port": integer,
};


facility MongoDB(string database-name)
   applying (string collection-name)
   conforms {* => Collection}
   //refers python:mongolib.MongoDB
;

type Status = {
  "status": ("stopped" | "running" | "unknown"),
  "host": string(remark="ホストアドレス"),
  "port": integer(remark="ポート番号"),
};

database mongodb = MongoDB("mongo-default");

collection person of {
 "id" : integer?,
 "ハンドル": string,
 "名前": {
     "名": string,
     "性": string,
  },
} under mongodb;

