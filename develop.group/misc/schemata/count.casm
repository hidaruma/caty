/* -*- coding: utf-8 -*- */
module count;

/** ファシリティのモード */
type mode = fcl:mode;

/** カウンターの設定情報 */
type Config = null | {
 /** カウンターの基準値 */
 @[default(0)]
 "baseValue" : integer?,

 /** カウンターのステップ値 */
 @[default(1)]
 "stepValue" : integer?,
};

/** アプリケーションインスタンス */
type _AppInstance = fcl:_AppInstance;

/** カウンタファシリティ、マスターインスタンス */
type _Counter = foreign;

/** リクエスタインスタンス */
type _CounterRequester = foreign;

/** カウンター ファシリティクラス */
@[facility-spec-for("python:count4fcl.Counter")]
class Counter (_Counter) {

  /* @[static]が付いているコマンドには、arg0にnullが入る。
   * つまり、arg0は事実上使えない。
   *
   * @[managemement]が付いているコマンドは、シェルからコールバックされる。
   */

   /** システムの起動時にコールバックされる */
   @[static, management]
   command initialize [Config?]
   :: _AppInstance|null -> void
    refers python:countcmd.Initialize
   ;
  
   /** システムの終了時にコールバックされる */
   @[static, management]
   command finalize 
   :: _AppInstance|null -> void
    refers python:countcmd.Finalize
   ;
  
   /** マスターインスタンスーを生成・取得する */
   @[static, management, creator]
   command instance [(null|string)? name]
   :: _AppInstance|null -> _Counter
    refers python:countcmd.Instance
   ;
  
   /** 役割と名前の問い合わせ
    * テスト・確認用
    */
   @[reader]
   command who :: void -> [string, string]
    refers python:countcmd.Who
   ;
  
   /** カウンタの名前をリストする 
    * テスト・確認用
    */
   @[static, reader]
   command list-names
   :: void -> [string*]
    refers python:countcmd.ListNames
   ;
  
   /** クラスが初期化されているかどうか
    * テスト・確認用
    */
   @[static, reader]
   command is-ready
   :: void -> boolean
    refers python:countcmd.IsReady
   ;

   /** カウンターの名前と値をダンプする
    * テスト・確認用
    */
   @[static, reader]
   command dump
   :: void -> {* : integer?}
    refers python:countcmd.Dump
   ;

   /** トランザクションを開始する */
   @[management, creator]
   command start :: void -> _Counter
    refers python:countcmd.Start
   ;
  
   /** トランザクションをコミットする */
   @[management]
   command commit :: void -> void
    refers python:countcmd.Commit
   ;
  
   /** トランザクションをキャンセルする */
   @[management]
   command cancel :: void -> void
    refers python:countcmd.Cancel
   ;
  
   /** マスターインスタンスを後始末する */
   @[management]
   command cleanup :: void -> void
    refers python:countcmd.Cleanup
   ;


   /** リクエスタインスタンスを生成・取得する */
   @[management, creator]
   command create ["use"?, null?]
   :: void -> _CounterRequester
    refers python:countcmd.Create
   ;

};

// 他のFITテストを失敗させるのでコメントアウト
// facility countA = Counter with "A";

/** リクエスタクラス */
class CounterRequester (_CounterRequester) {
  /* 以下のコマンドのarg0には、_CounterRequesterがセットされる  
   */

   /** 役割と名前の問い合わせ
    * テスト・確認用
    */
   @[reader]
   command who :: void -> [string, string]
    refers python:countcmd.Who
   ;
  
 // 以下、固有なコマンド

   /** カウンターの値を取得する */
   @[reader]
   command value :: void -> integer
    refers python:countcmd.Value
   ;
  
   /** カウンターをインクリメントする */
   @[updater]
   command inc :: void -> void
    refers python:countcmd.Inc
   ;
  
   /** カウンターをデクリメントする */
   @[updater]
   command dec :: void -> void
    refers python:countcmd.Dec
   ;
  
   /** カウンターをリセットする */
   @[updater]
   command reset :: void -> void
    refers python:countcmd.Reset
   ;
};

/* End */
