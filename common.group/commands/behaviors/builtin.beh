<<ignore -*- coding: utf-8 -*- >>

= builtinモジュール

システム全体にわたってトップレベルに存在するコマンド群。

== print

引数で指定されたファイルをテンプレートとして扱い、入力値を適用し、WebOutput型のデータを返す。
--rawオプションが指定された場合はファイルの内容をそのまま出力する。
また--resolveオプションが指定された場合、テンプレートの関連スクリプトを実行し、
その結果を入力として用いる。

=== !exec

|=input         |=command|=params                 |=outputMatch|=備考|
|{"foo":"Foo!"} |print   |--no-script     /template.txt| {"body": "foo=Foo!\n"}||
|               |print   |--raw      /template.txt| {"body": "<?caty-meta template=\"smarty\"?>\nfoo={$foo}\n" }|<?caty-meta.. は削除されない|
|      |print   |--resolve  /template.txt| {"body": "foo=Bar!\n"}||
|{"foo":"Foo!"} |print   |--resolve  /template.txt| {"body": "foo=Bar!\n"}|入力は一旦関連スクリプトに渡される|

== expand

printとほぼ同様のコマンドである。printとの違いは、printがHTTPヘッダなどを付け加えたWebOuput型のデータを返すのに対して、こちらは単にテンプレートを適用した結果の文字列を返すことである。

=== !exec

|=input         |=command|=params                 |=output|=備考|
|{"foo":"Foo!"} |expand  |--no-script    /template.txt| "foo=Foo!\n"||
|               |expand  |--raw      /template.txt| "<?caty-meta template=\"smarty\"?>\nfoo={$foo}\n"|<?caty-meta.. は削除されない|
|      |expand  |--resolve  /template.txt| "foo=Bar!\n"||
|{"foo":"Foo!"} |expand  |--resolve  /template.txt| "foo=Bar!\n"|入力は一旦関連スクリプトに渡される|

== response

入力文字列をbodyとしてWebOutput型のデータを返す。

=== !exec

|=input |=command|=params                          |=outputMatch                                                          |=備考|
| "a"   |response|                                 | {"body": "a", "header": {"content-type": "application/octet-stream"}}|デフォルトではapplication/octet-streamがcontent-type|
| "a"   |response| --ext=".txt"                    | {"body": "a", "header": {"content-type": "text/plain; charset=utf-8"}}|拡張子の指定でcontent-typeの値は変わる。テキスト系のタイプの場合、utf-8がデフォルトのエンコーディング方式とされる|
| "a"   |response| --ext=".txt" --encoding="euc-jp"| {"body": "a", "header": {"content-type": "text/plain; charset=euc-jp"}}||

== pass

入力値をそのまま返す。

=== !exec

|= input |= command |=output |= exception|=備考|
| 1      |pass      | 1      ||
| "a"      |pass      | "a"      ||
| [1,2,3]      |pass      | [1,2,3]      ||
| {"foo":1, "bar": 2}      |pass      | {"foo":1, "bar": 2}      ||
| 1      |pass<integer>      | 1      ||
| 1      |pass<string> | | Exception| |
| [1,2,3]      |pass<array>      | [1,2,3]      ||
| {"foo":1, "bar": 2}      |pass<object>      | {"foo":1, "bar": 2}      ||

== tagged

タグ付き型を生成する。

=== !exec

|= input |= command |=output |= exception|=備考|
|["a", 1] |tagged| @a 1| | |
|["string", 1] |tagged --exp|| Exception|明示的なタグが要求される|
|["a", undefined] |tagged|@a||undefinedが第2要素の場合はタグのみの型になる|
|["a"] |tagged|@a||要素数1の配列は意味的に上記と同じ|


== tag

タグ付き型からタグを取り出す。

=== !exec

|= input |= command |=output   |
|@foo 1  | tag      | "foo"    |
|1       | tag      | "number" |
|{}      | tag      | "object" |
|@foo    | tag      | "foo"    |
|@bar    | tag      | "bar"    |
|@"foo bar"| tag    | "foo bar"|


== untagged

タグ付き型からタグ付けされたデータを取り出す。

=== !exec

|= input |= command |=output  |= exception|=備考|
|@foo 1  | untagged | 1       |||
|1       | untagged | 1       ||タグ型でない場合passと同様|
|@number 1|untagged | 1       ||暗黙タグがあっても同じ|
|@foo    | untagged |undefined|||
|@foo foreign | untagged | foreign|||

== typeof

=== !exec

|= input   |= command |=output   |=備考|
| 1        | typeof   | "number" | 1は数値である |
|@number 1 | typeof   | "number" | numberタグは吸収される |
|@foo 1    | typeof   | "tagged" | これはタグ付きの値 |
|@foo      | typeof   | "tagged" | tag-onlyでもタグ付きの値 |
|undefined | typeof   | "undefined" | 未定義型 |
|foreign   | typeof   | "foreign" | フォーリン型 |


== eq

データの等値性を判定する。


=== !exec


|= input         |= command      |=output   |= 備考 |= judge|
|[1, 1.0]        | eq --boolean  | true     |数値は値で比較する |
|[1.0, 1.01]     | eq --boolean  | false    | |
|[1.0, 1.00]     | eq --boolean  | true     | |
|[2E+3, 0.2e4]   | eq --boolean  | true     | |
|[2E+3, 0.02e+5] | eq --boolean  | true     | |
|[2E+3, 2000]    | eq --boolean  | true     | |
|[2.1e3, 2100]   | eq --boolean  | true     | |
|[2.1e3, 2.10e3] | eq --boolean  | true     | |
|[1, true]       | eq --boolean  | false    |1とtrueは別物 |
|[0, false]      | eq --boolean  | false    |0とfalseは別物 |
|["true", true]  | eq --boolean  | false    |"true"とtrueは別物 |
|["false", false] | eq --boolean  | false    |"false"とfalseは別物 |
|[null, false]   | eq --boolean  | false    |nullとfalseは別物 |
|["null", null]  | eq --boolean  | false    |"null"とnullは別物 |
|["", false]     | eq --boolean  | false    |""とfalseは別物 |
|["", null]      | eq --boolean  | false    |""とnullは別物 |
|[[], false]     | eq --boolean  | false    |[]とfalseは別物 |
|[{}, false]     | eq --boolean  | false    |{}とfalseは別物 |
|[[], {}]        | eq --boolean  | false    |[]と{}は別物 |
|[[undefined], []] | eq --boolean| true     |undefineがあっても空配列 |
|[{"a":undefined}, {}] | eq --boolean | true|undefineがあっても空オブジェクト |
|[[,], []]       | eq --boolean  | true     |括弧があっても空配列 |
|[{,}, {}]       | eq --boolean  | true     |括弧があっても空オブジェクト |ignore|
|[[1,], [1]]     | eq --boolean  | true     |配列に余分な括弧は影響ない |
|[{"a":1,}, {"a":1}] | eq --boolean| true   |オブジェクトに余分な括弧は影響ない |
|[foreign, null] | eq --boolean  | false    |foreignとnullは別物 |
|[undefined, foreign]|eq --boolean| false   |undefinedとforeingは別物 |
|[foreign, foreign]|eq --boolean | true     |2つのforeingは同じ |
|[undefined, null]|eq --boolean  | false    |undefinedとnullは違う |
|[null, undefined]|eq --boolean  | false    |等号は対称 |
|[undefined, undefined]|eq --boolean  | true|2つのundefinedは等しい |


余分な括弧を含む空オブジェクト {,} は認めてないのか？


== eq (2)

複合データの等値性を判定する。


=== !exec


|= input         |= command      |=output   |= 備考 |
|[[], [,]]       | eq --boolean  | true     | | 
|[[], [,,]]      | eq --boolean  | true     | | 
|[[,1], [,1]]    | eq --boolean  | true     | | 
|[[1,], [1,]]    | eq --boolean  | true     | | 
|[[1,], [1]]     | eq --boolean  | true     | | 
|[[1,,], [1]]    | eq --boolean  | true     | | 
|[[1,,2], [1,,2,]]| eq --boolean  | true     | | 
|[[1], [1,undefined]]| eq --boolean  | true     | | 
|[[,1], [undefined,1]]| eq --boolean  | true     | | 
|[{}, {"a":undefined}]| eq --boolean | true     | | 
|[{"b":undefined}, {"a":undefined}]  | eq  --boolean | true     | | 
|[{}, {"a":undefined,"b":undefined}] | eq --boolean  | true     | | 


== nth

配列から、1始まりで勘定してn番目の項目を取り出す。

=== !exec

|= !command |= !input  |= !output|= !exception |
| nth -2    |[1, ,3,4] |         | Exception |
| nth -1    |[1, ,3,4] |         | Exception |
| nth 0     |[1, ,3,4] |         | Exception |
| nth 1     |[1, ,3,4] |1        ||
| nth 2     |[1, ,3,4] |         | Undefined |
| nth 3     |[1, ,3,4] |3        ||
| nth 4     |[1, ,3,4] |4        ||
| nth 5     |[1, ,3,4] |         | Undefined |
| nth 6     |[1, ,3,4] |         | Undefined |

|= !command |= !input   |= !output|= !exception |
| nth -2    |[1, ,3,4,] |         | Exception |
| nth -1    |[1, ,3,4,] |         | Exception |
| nth 0     |[1, ,3,4,] |         | Exception |
| nth 1     |[1, ,3,4,] |1        ||
| nth 2     |[1, ,3,4,] |         | Undefined|
| nth 3     |[1, ,3,4,] |3        ||
| nth 4     |[1, ,3,4,] |4        ||
| nth 5     |[1, ,3,4,] |         | Undefined |
| nth 6     |[1, ,3,4,] |         | Undefined |

--safeを付ければ型エラーを除き例外は起きない。

|= !command    |= !input  |= !output|= !exception |
| nth -2    |[1, ,3,4] |         | Exception |
| nth -1    |[1, ,3,4] |         | Exception |
| nth 0     |[1, ,3,4] |         | Exception |
| nth --safe 1 |[1, ,3,4] |1        ||
| nth --safe 2 |[1, ,3,4] |undefined||
| nth --safe 3 |[1, ,3,4] |3        ||
| nth --safe 4 |[1, ,3,4] |4        ||
| nth --safe 5 |[1, ,3,4] |undefined||
| nth --safe 6 |[1, ,3,4] |undefined||

|= !command    |= !input   |= !output|= !exception |
| nth -2    |[1, ,3,4,] |         | Exception |
| nth -1    |[1, ,3,4,] |         | Exception |
| nth 0     |[1, ,3,4,] |         | Exception |
| nth --safe 1 |[1, ,3,4,] |1        ||
| nth --safe 2 |[1, ,3,4,] |undefined||
| nth --safe 3 |[1, ,3,4,] |3        ||
| nth --safe 4 |[1, ,3,4,] |4        ||
| nth --safe 5 |[1, ,3,4,] |undefined||
| nth --safe 6 |[1, ,3,4,] |undefined||


== item

配列から、0始まりで勘定してn番目の項目を取り出す。
負の数のインデックスを扱える。

=== !exec

|= !command |= !input  |= !output|= !exception |
| item -2    |[1, ,3,4] |3        ||
| item -1    |[1, ,3,4] |4        ||
| item 0     |[1, ,3,4] |1        ||
| item 1     |[1, ,3,4] |         | Exception |
| item 2     |[1, ,3,4] |3        ||
| item 3     |[1, ,3,4] |4        ||
| item 4     |[1, ,3,4] |         | Exception |
| item 5     |[1, ,3,4] |         | Exception |
| item 6     |[1, ,3,4] |         | Exception |

|= !command |= !input   |= !output|= !exception |
| item -2    |[1, ,3,4,] |3        ||
| item -1    |[1, ,3,4,] |4        ||
| item 0     |[1, ,3,4,] |1        ||
| item 1     |[1, ,3,4,] |         | Exception |
| item 2     |[1, ,3,4,] |3        ||
| item 3     |[1, ,3,4,] |4        ||
| item 4     |[1, ,3,4,] |         | Exception |
| item 5     |[1, ,3,4,] |         | Exception |
| item 6     |[1, ,3,4,] |         | Exception |

--safeを付ければ例外は起きない。

|= !command    |= !input  |= !output|= !exception |
| item --safe -2|[1, ,3,4] |3        ||
| item --safe -1|[1, ,3,4] |4        ||
| item --safe 0 |[1, ,3,4] |1        ||
| item --safe 1 |[1, ,3,4] |undefined||
| item --safe 2 |[1, ,3,4] |3        ||
| item --safe 3 |[1, ,3,4] |4        ||
| item --safe 4 |[1, ,3,4] |undefined||
| item --safe 5 |[1, ,3,4] |undefined||
| item --safe 6 |[1, ,3,4] |undefined||


|= !command    |= !input  |= !output|= !exception |
| item --safe -2|[1, ,3,4,] |3        ||
| item --safe -1|[1, ,3,4,] |4        ||
| item --safe 0 |[1, ,3,4,] |1        ||
| item --safe 1 |[1, ,3,4,] |undefined||
| item --safe 2 |[1, ,3,4,] |3        ||
| item --safe 3 |[1, ,3,4,] |4        ||
| item --safe 4 |[1, ,3,4,] |undefined||
| item --safe 5 |[1, ,3,4,] |undefined||
| item --safe 6 |[1, ,3,4,] |undefined||



