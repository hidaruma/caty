/**
 * JSONストレージ操作
 */
module strg in casm;

type DumpInfo = {
    "collectionName": string,
    "schema": string,
    "data": [object*]
};

type Collection = {
    "collectionName": string,
    "schema": string,
    "appName": string | null,
};


/**
 * JSON スキーマに対応したコレクションの作成。
 * 第一引数はスキーマ名であり、省略不可能である。またこのスキーマは object 型でなければならない。
 * 第二引数はコレクション名であり、省略した場合スキーマ名がコレクション名となる。
 * 既にコレクションが存在する場合何もせず終了する。
 */
command create-collection {@[default(false)]"as-global": boolean?} [string, string?] :: void -> void
    reads schema
    updates storage
    refers python:strg.CreateCollection;

/**
 * コレクションの削除。
 */
command drop-collection [string] :: void -> void
    updates storage
    refers python:strg.DropCollection;

/**
 * コレクション名とそのスキーマ一覧の表示。
 */
command list-collections :: void -> [Collection*]
    reads storage
    refers python:strg.List;

/**
 * JSON ストレージの検索。
 * 引数で指定されたコレクションに対して入力値をクエリとして検索を行い、その結果を返す。
 * コレクション以降の引数はオプションであり、検索結果のオブジェクトに含める要素のパスを指定する。
 *
 * --limit オプションは検索結果の最大件数を指定する。デフォルトでは無制限に値を取得する。
 * --offset オプションは検索の開始位置を指定する。デフォルトでは最初から値を取得する。
 * --order-by オプションはソートに用いるプロパティ名を指定する。デフォルトでは insert された順に値を取得する。
 * 
 * 検索クエリには JSON オブジェクトを用いる。
 *
 * {{{
 * {"birth": 1984} | strg:select person 
 * }}}
 *
 * 上記のクエリの結果は、 person コレクションの birth の値が 1984 であるオブジェクトの配列となる。
 * 特に指定されなかった項目に付いては、その値が何であれ取得される。
 *
 * また、以下のように特殊なタグを使って検索する事も出来る。
 *
 * {{{
 * {"name": @_OR [@_LIKE "山田%", @_LIKE 鈴木%"]} | strg:select person
 * }}}
 *
 * この場合は name の値が "山田" か "鈴木" で始まるオブジェクトのリストが検索結果となる。
 *
 * クエリが null の場合、全件取得が行われる。
 *
 * これら特殊タグの一覧を以下に示す。
 *
 * * @_ANY              検索条件なし
 * * @_OR [条件リスト]  [条件リスト]のうちいずれかを満たす
 * * @_AND [条件リスト] [条件リスト]をすべて満たす
 * * @_EACH <条件>      配列の要素全てが条件を満たす（配列型の値に対してのみ使用可能）
 * * @_CONTAINS <条件>  配列の要素が一つでも条件を満たす（配列型の値に対してのみ使用可能）
 * * @_LIKE <パターン>  <パターン>に一致する（string型に対してのみ使用可能）
 * * @_NOT_NULL         null でない 
 * * @_LT <数値>        オブジェクトの値が<数値>より小さい
 * * @_LE <数値>        オブジェクトの値が<数値>より小さいあるいは等しい
 * * @_GT <数値>        オブジェクトの値が<数値>より大きい
 * * @_GE <数値>        オブジェクトの値が<数値>より大きいあるいは等しい
 * 
 */
command select<T default object> {
                @[default(-1)]
                "limit": integer(minimum=-1)?, 
                @[default(false)]
                "reverse":boolean?, 
                @[default("")]
                "order-by": string?, 
                @[default(0)]
                "offset": pinteger?,
               } [string, string*] :: any -> [T*]
    reads storage
    refers python:strg.Select;

/**
 * 一件のデータ取得。
 * クエリの指定の仕方は select と同様である。
 * 検索結果が一件でない場合、例外が送出される。
 *
 */
command select1<T default object> [string] :: any -> T
    throws [CollectionNotFound, BadSituation]
    reads storage
    refers python:strg.Select1;

/**
 * JSON コレクションに入力値を挿入する。
 * --alow-dup オプションが指定された場合、重複した値を挿入可能になる。
 * デフォルトでは重複した値を挿入しようとした場合は値が挿入されず、 @NG が出力値となる。
 * 
 */
command insert<T default object> {@[default(false)]"allow-dup": boolean?} [string] :: T -> @OK null | @NG null
    uses storage
    refers python:strg.Insert;

/**
 * JSON ストレージの更新。
 * 入力値の最初の要素で JSON ストレージを検索し、その結果を第二の入力値で更新する。
 */
command update [string] :: [any, any] -> null
    uses storage
    refers python:strg.Update;

/**
 * JSON コレクションの値の削除。
 * 
 */
command delete [string] :: any -> null
    updates storage
    refers python:strg.Delete;

/**
 * コレクションのダンプ。
 * 出力結果は {"collectionName":コレクション名, "schema": スキーマ名, "data": データの配列} という形式になる。
 */
command dump 
    [string] :: void -> DumpInfo
    reads storage
    refers python:strg.Dump;

/**
 * ダンプされた情報のリストア。
 * コレクションを新たに生成し、すべてのデータを再度挿入する。
 * 既存のコレクションが存在する場合、一旦ドロップされる。
 */
command restore :: DumpInfo -> void
    uses storage
    refers python:strg.Restore;
