module collection;

facility default-storage (string database-name)
   applying (string collection-name)
   conforms Collection
   refers python:storage.DefaultStorage;

master default-database = default-storage("default-database");
entity default-collection = default-database("default-collection");

/** デフォルトのレコード型 
 */
type DefaultRecord = {
 /** 主キーは id という名前の文字列フィールドである */
 "id": string?, 

 /* 他は任意 */
 *:any?
};


kind KeyType = lower (number | string | binary);
kind FragmentPathType = lower string?;
kind RecordType = lower object;

type Iterable<T> = ([T*] | foreign);


/** 
 * コレクションを操作するコマンドセット 
 */
@[register-public]
signature Collection
<
  /** レコードの型 */
  Record in RecordType default DefaultRecord,

  /** 主キー（IDフィールド）の型 */
  Key in KeyType default string,

  /** フラグメントパスの型
   * string または undefined に具体化して使う。
   */
  FragmentPath in FragmentPathType default string,
> =
{
 /** 主キー（IDフィールド）の型の名前
  */
  property _keyType :: string(remark="キーの型の名前") ;

 /** レコードの型の名前
  */
  property _recordType :: string(remark="レコードの型の名前") ;


 /** 引数に与えられたキーにより単一レコードを取得する */
 @[reader]
 command lookup [Key key] :: void -> Record
         throws NotFound;

 /** 引数に与えられたキーとフラグメントパスからレコードポーションを得る 
  * レコードの一部（ポーション、フラグメント）が返るので、出力型は動的。
  */
 @[reader]
 command get [Key key, FragmentPath? fragment-path] :: void -> any
         throws NotFound;


 /** 入力に与えられたキーとフラグメントパス（オプショナル）の配列からレコードポーションの配列を得る 
  * --strict=true では、1個でも見つからないレコードポーションがあれば、エラー（例外）となる。
  * --strict=false では、見つかったレコードポーションだけを配列にする。
  * レコードポーションがまったく見つからなくても空配列が返るだけ。
  */
 @[reader]
 command mget 
         {
          /** 1個でも見つからないレコードポーションがあればエラー（例外）とする */
          @[default(false)]
          "strict": boolean?,
         }
         :: [(Key|[Key, FragmentPath?])*]  -> [any*]
         throws NotFound;

 @[reader]
 command multi-get := mget;

 /** レコードがコレクションに所属（∈）するかどうか判定する 
  * IDだけでなく、値の同一性も完全にチェックする。
  * 判定が困難なら indef を出力する。
  */
 @[reader]
 command belongs :: univ -> tboolean;

 /** キーに対応するレコードが存在するかどうか判定する */
 @[reader]
 command exists [Key key] :: void -> boolean;

 /** すべてのキーを列挙する */
 @[reader]
 command keys :: void -> Iterable<Key>; // eachの入力

 /** コレクション内のレコードの個数を返す */
 @[reader]
 command count :: void -> integer(minimum=0);

 /** すべてのレコードを列挙する */
 @[reader]
 command all :: void -> Iterable<Record>; // eachの入力

 /** 型チェックなしですべてのレコードを列挙する 
  * allと同じだが、型チェックはしない。
  * スキーマが変更された場合でも動作する。
  */
 @[reader]
 command dump :: void -> Iterable<any>;


 /* === updaters == */

 /** コレクションにレコードを挿入する 
  * 引数にキーが指定されれば、そのキーを使う。この場合、入力データであるレコードにキーがあっても無視される。
  *
  * 引数にキーが指定されず、レコードにもIDがないきは可能なら自動生成する、
  * 自動生成が不可能ならBadInput例外。
  *
  * 出力は任意である。
  */
 @[updater]
 command insert [Key? key] :: Record -> any?
   throws [AlreadyExists, BadInput]
 ;

 /** 単一レコードを置き換える 
  * 必ず既存レコードを置き換える。
  * 出力は任意である。
  */
 @[updater]
 command replace [Key key] :: Record -> any?
   throws NotExist
 ;

 /** 引数に指定されたキーのレコードを削除する 
  * 削除に失敗した場合は例外とする。
  * 出力は任意である。
  */
 @[updater]
 command delete [Key key] :: void -> any?
   throws NotFound
 ;

 /** コレクション内の全てのレコードを削除する 
  * データベース管理コマンド clear-collection と同じ。
  * 出力は任意である。
  *
  * このコマンドは危険過ぎると判断するなら、実装しなくてもよい。
  */
 @[optional, updater]
 command delete-all:: void -> any?
 ;


 /* == デフォルト実装付きのコマンドプロファイル == */

 /** 入力に与えられたキーとフラグメントパスからレコードポーションを得る */
 @[reader]
 command get_ :: [Key, FragmentPath?] -> any throws NotFound {
   =[ pass > k, pass > p];
   get %k %p?
 };

 /** 存在すればレコードを取得し、そうでないならundefinedを返す */
 @[reader]
 command get-if-exists [Key key, FragmentPath? fragment-path] :: void -> any? {
   exists %1 |
   case {
    true  => get %1 %2?,
    false => undefined,
   }
 };

 /** 存在すればレコードを置換し、そうでないなら新規作成する */
 @[updater]
 command put [Key? key] :: Record -> any? {
   pass > record;
   %1? |
   when {
     undefined => 
       %record | insert // -> output
       ,
     * => 
       pass > id; exists %id |
       case {
         true  => %record | replace %id,  // -> output
         false => %record | insert %id,   // -> output
       }
       ,
   }
 };
} refers python:collection;




@[hidden] signature StorageAdmin = {
/*


|コマンド                |入力                    | 別名   |
|------------------------|------------------------|--------|
| list-databases         |void                    |        |
| create-database 名前?  |DatabaseOptions         |        |
| activate-database 名前?|ActivationOptions       |connect |
| confirm-database 名前? |ConfirmOptions          |confirm |
| list-collecions 名前?  |void                    |list    |
| drop-database 名前?    |void                    |        |
| create-collection 名前 |CollectionOptions       |        |
| drop-collection 名前   |void                    |        |
| clear-collection 名前  |void                    |truncate|
| alter-collection 名前  |CollectionOptions       |        |
| show-collectin 名前    |void                    |describe|

*/

 type DatabaseOptions;
 type CollectionOptions;

 type DatabaseInfo;
 type CollectionInfo;

 type ConfirmOptions;
 type ActivationOptions;


 /** データベースを列挙する
  */
 command list-databases
  :: void -> [DatabaseInfo*]
 ;

 /** データベースを作成する
  * 1つのストレージバックエンドが1つのデータベースしかサポートしない場合は、
  * データベース名は不要。
  */
 command create-database [string? database-name] 
  :: DatabaseOptions -> any
 ;

 /** 存在するデータベースをアクティブ化する
  * データベースサーバーへの接続処理などを行う。
  */
 command activate-database [string? database-name]
  :: ActivationOptions -> any
 ;
 command connect := activate-database;


 /** データベースを利用可能とする
  * 存在しなければ作成し、アクティブでないならアクティブ化する。
  */
 command confirm-database [string? database-name]
  :: ConfirmOptions -> any
 ;
 command confirm := confirm-database;


 /** データベース内のすべてのコレクションを列挙する */
 command list-collecions [string? database-name]
  :: void -> [CollectionInfo*]
 ;
 command list := list-collections;

 /** データベースを削除する */
 command drop-database [string? database-name]
  :: void -> any
 ;


 /** コレクションを新規作成する */
 command create-collection [string? database-name] 
  :: CollectionOptions -> any
 ;

 /** コレクションを削除する */
 command drop-collection [string? database-name]
   :: void -> any
 ;

 /** コレクションに含まれるすべてのレコードを削除して空にする */
 command clear-collection [string? database-name]
  :: void -> any
 ;
 command truncate := clear-collection;

 /** コレクションに関する設定を変更する */
 command alter-collection [string? database-name]
  :: CollectionOptions -> any
 ;

 /** コレクションに関する情報を出力する */
 command show-collectin [string? database-name]
  :: void -> CollectionInfo
 throws NotFound
 ;
 command describe := show-collection;

};


/** 
 * ベースコレクションとして必要なコマンドセット 
 */
@[register-public]
signature Basable
<
  /** 主キー（IDフィールド）の型 */
  Key in KeyType default string,

  /** フラグメントパスの型
   * string または undefined に具体化して使う。
   */
  FragmentPath in FragmentPathType default string,
> =
{

 /* 接頭辞の p- は、partial(ly), portion を意味する */

 /** 入力データが指定されたレコードポーションにサブレコードとしてマッチするかどうか判定する 
  * 判定が困難なら indef を出力する。
  */
 @[reader]
 command p-matches [Key key, FragmentPath? frag-path]  :: any -> tboolean;

 /** キーとパスに対応するレコードポーションが存在するかどうか判定する */
 @[reader]
 command p-exists [Key key, FragmentPath? frag-path] :: void -> boolean;

 /** パスに対応するレコードポーションが存在するすべてのキーを列挙する */
 @[reader]
 command p-keys [FragmentPath? frag-path]:: void -> Iterable<Key>;

 /** コレクション内の、パスに対応するレコードポーションが存在するレコードの個数を返す */
 @[reader]
 command p-count [FragmentPath? frag-path] :: void -> integer(minimum=0);

 /** パスに対応するレコードポーションを列挙する */
 @[reader]
 command p-all [FragmentPath? frag-path] :: void -> Iterable<any>;

 /** 型チェックなしで、パスに対応するレコードポーションを列挙する
  */
 @[reader]
 command p-dump [FragmentPath? frag-path] :: void -> Iterable<any>;

};

