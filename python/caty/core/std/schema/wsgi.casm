module wsgi in casm;


type InputStream = foreign;

// !! stringではなくて、binaryになるかもしれない !!

type Environ = {

  /** HTTPメソッド */
  "REQUEST_METHOD": httpMethod,

  /** アプリケーションを識別する名前 */
  "SCRIPT_NAME" : string,

  /** リクエストパス */
  "PATH_INFO": string,

  /** クエリー文字列 */
  "QUERY_STRING": string,

  /** リクエストボディのメディア型 */
  "CONTENT_TYPE": mediaType?,

  /** リクエストボディの長さ */
  "CONTENT_LENGTH": string?,

  /** リクエストボディ（入力）を表現するfile-likeオブジェクト */
  "wsgi.input": InputStream,

// ... その他なにやら

  * : univ?,
};

command make-env 
  {
    @[default(false)]
    "fullpath": boolean?,

    @[default("GET")]
    "method": string?,

    @[default("")]
    "verb": string?,

    "content-type": string?,

    @[default("http")]
    "url-scheme": string?,

    "server-name": string?, // デフォルトは設定から取るべきか？

    "server-port": integer?, // ここでは、文字列である必要性はないだろう。
     // デフォルトは設定から取るべきか？

    @[default(false)]
    "multiprocess": boolean?, // デフォルトは設定から取るべきか？

    @[default(true)]
    "multithread": boolean?, // デフォルトは設定から取るべきか？

  }
  [string path, string? query]
:: (null|string|binary) -> Environ
    throws InvalidInput
    refers python:caty.core.std.command.wsgilib.MakeEnv
;

type Response = {
    "status": integer,
    "header": {
        *: string?,
    },
    "body": (string | binary),
};

command call-application
  {
    @[default(false)]
    "no-middle": boolean?,
  }
:: Environ -> Response
    refers python:caty.core.std.command.wsgilib.CallApplication
;
